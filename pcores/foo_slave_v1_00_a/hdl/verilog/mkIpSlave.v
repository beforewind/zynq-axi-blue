//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Tue Nov 27 09:02:59 EST 2012
//
// Method conflict info:
// Method: put
// Conflict-free: error
// Sequenced after: get, interrupt
// Conflicts: put
//
// Method: get
// Conflict-free: get, error, interrupt
// Sequenced before: put
//
// Method: error
// Conflict-free: put, get, error, interrupt
//
// Method: interrupt
// Conflict-free: get, error, interrupt
// Sequenced before: put
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1 const
// get                            O    32
// RDY_get                        O     1 const
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_addr                       I    12
// put_v                          I    32
// get_addr                       I    12
// EN_put                         I     1
// EN_get                         I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIpSlave(CLK,
		 RST_N,

		 put_addr,
		 put_v,
		 EN_put,
		 RDY_put,

		 get_addr,
		 EN_get,
		 get,
		 RDY_get,

		 error,
		 RDY_error,

		 interrupt,
		 RDY_interrupt);
  input  CLK;
  input  RST_N;

  // action method put
  input  [11 : 0] put_addr;
  input  [31 : 0] put_v;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  [11 : 0] get_addr;
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_error, RDY_get, RDY_interrupt, RDY_put, error, interrupt;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2, rf$D_OUT_3;
  wire [11 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_timer;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rf$upd_2__VAL_2;
  wire MUX_interrupted$write_1__SEL_1;

  // action method put
  assign RDY_put = 1'd1 ;

  // actionvalue method get
  assign get = rf$D_OUT_3 ;
  assign RDY_get = 1'd1 ;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = rf$D_OUT_2[0] && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // submodule rf
  RegFile #(.addr_width(32'd12),
	    .data_width(32'd32),
	    .lo(12'd0),
	    .hi(12'hFFF)) rf(.CLK(CLK),
			     .ADDR_1(rf$ADDR_1),
			     .ADDR_2(rf$ADDR_2),
			     .ADDR_3(rf$ADDR_3),
			     .ADDR_4(rf$ADDR_4),
			     .ADDR_5(rf$ADDR_5),
			     .ADDR_IN(rf$ADDR_IN),
			     .D_IN(rf$D_IN),
			     .WE(rf$WE),
			     .D_OUT_1(rf$D_OUT_1),
			     .D_OUT_2(rf$D_OUT_2),
			     .D_OUT_3(rf$D_OUT_3),
			     .D_OUT_4(),
			     .D_OUT_5());

  // rule RL_timer
  assign WILL_FIRE_RL_timer = rf$D_OUT_1 != 32'd0 && !EN_put ;

  // inputs to muxes for submodule ports
  assign MUX_interrupted$write_1__SEL_1 =
	     WILL_FIRE_RL_timer && rf$D_OUT_1 == 32'd1 ;
  assign MUX_rf$upd_2__VAL_2 = rf$D_OUT_1 - 32'd1 ;

  // register interrupted
  assign interrupted$D_IN = MUX_interrupted$write_1__SEL_1 ;
  assign interrupted$EN =
	     WILL_FIRE_RL_timer && rf$D_OUT_1 == 32'd1 ||
	     EN_put && put_addr == 12'h0 && put_v[0] ;

  // submodule rf
  assign rf$ADDR_1 = 12'h008 ;
  assign rf$ADDR_2 = 12'h004 ;
  assign rf$ADDR_3 = get_addr ;
  assign rf$ADDR_4 = 12'h0 ;
  assign rf$ADDR_5 = 12'h0 ;
  assign rf$ADDR_IN = EN_put ? put_addr : 12'h008 ;
  assign rf$D_IN = EN_put ? put_v : MUX_rf$upd_2__VAL_2 ;
  assign rf$WE = EN_put || WILL_FIRE_RL_timer ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    interrupted = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkIpSlave

