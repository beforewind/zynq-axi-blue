//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Tue Nov 27 16:38:39 EST 2012
//
// Method conflict info:
// Method: put
// Conflict-free: error
// Sequenced after: get, interrupt
// Conflicts: put
//
// Method: get
// Conflict-free: error, interrupt
// Sequenced before: put
// Conflicts: get
//
// Method: error
// Conflict-free: put, get, error, interrupt
//
// Method: interrupt
// Conflict-free: get, error, interrupt
// Sequenced before: put
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1 reg
// get                            O    32
// RDY_get                        O     1 const
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_addr                       I    12
// put_v                          I    32
// get_addr                       I    12
// EN_put                         I     1
// EN_get                         I     1
//
// Combinational paths from inputs to outputs:
//   get_addr -> get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIpSlave(CLK,
		 RST_N,

		 put_addr,
		 put_v,
		 EN_put,
		 RDY_put,

		 get_addr,
		 EN_get,
		 get,
		 RDY_get,

		 error,
		 RDY_error,

		 interrupt,
		 RDY_interrupt);
  input  CLK;
  input  RST_N;

  // action method put
  input  [11 : 0] put_addr;
  input  [31 : 0] put_v;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  [11 : 0] get_addr;
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_error, RDY_get, RDY_interrupt, RDY_put, error, interrupt;

  // register dutWrapper_dut_resultReg
  reg [32 : 0] dutWrapper_dut_resultReg;
  wire [32 : 0] dutWrapper_dut_resultReg$D_IN;
  wire dutWrapper_dut_resultReg$EN;

  // register dutWrapper_requestFired
  reg [31 : 0] dutWrapper_requestFired;
  wire [31 : 0] dutWrapper_requestFired$D_IN;
  wire dutWrapper_requestFired$EN;

  // register dutWrapper_respReg
  reg [32 : 0] dutWrapper_respReg;
  wire [32 : 0] dutWrapper_respReg$D_IN;
  wire dutWrapper_respReg$EN;

  // register dutWrapper_responseFired
  reg [31 : 0] dutWrapper_responseFired;
  wire [31 : 0] dutWrapper_responseFired$D_IN;
  wire dutWrapper_responseFired$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [63 : 0] requestFifo_buff;
  wire [63 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // ports of submodule requestFifo_fifo
  wire [63 : 0] requestFifo_fifo$D_IN, requestFifo_fifo$D_OUT;
  wire requestFifo_fifo$CLR,
       requestFifo_fifo$DEQ,
       requestFifo_fifo$EMPTY_N,
       requestFifo_fifo$ENQ,
       requestFifo_fifo$FULL_N;

  // ports of submodule responseFifo_fifo
  wire [31 : 0] responseFifo_fifo$D_IN, responseFifo_fifo$D_OUT;
  wire responseFifo_fifo$CLR,
       responseFifo_fifo$DEQ,
       responseFifo_fifo$EMPTY_N,
       responseFifo_fifo$ENQ,
       responseFifo_fifo$FULL_N;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2, rf$D_OUT_3;
  wire [11 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_mkConnectionGetPut, WILL_FIRE_RL_timer;

  // inputs to muxes for submodule ports
  wire [32 : 0] MUX_dutWrapper_dut_resultReg$write_1__VAL_1,
		MUX_dutWrapper_respReg$write_1__VAL_1;
  wire [31 : 0] MUX_rf$upd_2__VAL_2;
  wire MUX_dutWrapper_respReg$write_1__SEL_2,
       MUX_interrupted$write_1__SEL_1,
       MUX_rf$upd_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1;
  wire [63 : 0] longval__h1844;
  wire [31 : 0] result__h2152,
		v__h2230,
		x__h1798,
		x__h2080,
		x__h2261,
		y_avValue__h2224;
  wire get_addr_ULT_0x100___d80, put_addr_ULT_0x100___d31;

  // action method put
  assign RDY_put = requestFifo_fifo$FULL_N ;

  // actionvalue method get
  assign get =
	     get_addr_ULT_0x100___d80 ?
	       CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 :
	       y_avValue__h2224 ;
  assign RDY_get = 1'd1 ;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = rf$D_OUT_2[0] && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // submodule requestFifo_fifo
  FIFO2 #(.width(32'd64), .guarded(32'd0)) requestFifo_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(requestFifo_fifo$D_IN),
							    .ENQ(requestFifo_fifo$ENQ),
							    .DEQ(requestFifo_fifo$DEQ),
							    .CLR(requestFifo_fifo$CLR),
							    .D_OUT(requestFifo_fifo$D_OUT),
							    .FULL_N(requestFifo_fifo$FULL_N),
							    .EMPTY_N(requestFifo_fifo$EMPTY_N));

  // submodule responseFifo_fifo
  FIFO2 #(.width(32'd32), .guarded(32'd0)) responseFifo_fifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(responseFifo_fifo$D_IN),
							     .ENQ(responseFifo_fifo$ENQ),
							     .DEQ(responseFifo_fifo$DEQ),
							     .CLR(responseFifo_fifo$CLR),
							     .D_OUT(responseFifo_fifo$D_OUT),
							     .FULL_N(responseFifo_fifo$FULL_N),
							     .EMPTY_N(responseFifo_fifo$EMPTY_N));

  // submodule rf
  RegFile #(.addr_width(32'd12),
	    .data_width(32'd32),
	    .lo(12'd0),
	    .hi(12'hFFF)) rf(.CLK(CLK),
			     .ADDR_1(rf$ADDR_1),
			     .ADDR_2(rf$ADDR_2),
			     .ADDR_3(rf$ADDR_3),
			     .ADDR_4(rf$ADDR_4),
			     .ADDR_5(rf$ADDR_5),
			     .ADDR_IN(rf$ADDR_IN),
			     .D_IN(rf$D_IN),
			     .WE(rf$WE),
			     .D_OUT_1(rf$D_OUT_1),
			     .D_OUT_2(rf$D_OUT_2),
			     .D_OUT_3(rf$D_OUT_3),
			     .D_OUT_4(),
			     .D_OUT_5());

  // rule RL_mkConnectionGetPut
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     !dutWrapper_dut_resultReg[32] && requestFifo_fifo$EMPTY_N ;

  // rule RL_timer
  assign WILL_FIRE_RL_timer = rf$D_OUT_1 != 32'd0 && !EN_put ;

  // inputs to muxes for submodule ports
  assign MUX_dutWrapper_respReg$write_1__SEL_2 =
	     dutWrapper_respReg[32] && responseFifo_fifo$FULL_N ;
  assign MUX_interrupted$write_1__SEL_1 =
	     WILL_FIRE_RL_timer && rf$D_OUT_1 == 32'd1 ;
  assign MUX_rf$upd_1__SEL_1 = EN_put && put_addr_ULT_0x100___d31 ;
  assign MUX_dutWrapper_dut_resultReg$write_1__VAL_1 =
	     { 1'd1,
	       requestFifo_fifo$D_OUT[63:32] |
	       requestFifo_fifo$D_OUT[31:0] } ;
  assign MUX_dutWrapper_respReg$write_1__VAL_1 =
	     { 1'd1, dutWrapper_dut_resultReg[31:0] } ;
  assign MUX_rf$upd_2__VAL_2 = rf$D_OUT_1 - 32'd1 ;

  // register dutWrapper_dut_resultReg
  assign dutWrapper_dut_resultReg$D_IN =
	     WILL_FIRE_RL_mkConnectionGetPut ?
	       MUX_dutWrapper_dut_resultReg$write_1__VAL_1 :
	       33'h0AAAAAAAA ;
  assign dutWrapper_dut_resultReg$EN =
	     WILL_FIRE_RL_mkConnectionGetPut || dutWrapper_dut_resultReg[32] ;

  // register dutWrapper_requestFired
  assign dutWrapper_requestFired$D_IN = dutWrapper_requestFired + 32'd1 ;
  assign dutWrapper_requestFired$EN = WILL_FIRE_RL_mkConnectionGetPut ;

  // register dutWrapper_respReg
  assign dutWrapper_respReg$D_IN =
	     dutWrapper_dut_resultReg[32] ?
	       MUX_dutWrapper_respReg$write_1__VAL_1 :
	       33'h0AAAAAAAA ;
  assign dutWrapper_respReg$EN =
	     dutWrapper_dut_resultReg[32] ||
	     dutWrapper_respReg[32] && responseFifo_fifo$FULL_N ;

  // register dutWrapper_responseFired
  assign dutWrapper_responseFired$D_IN = dutWrapper_responseFired + 32'd1 ;
  assign dutWrapper_responseFired$EN = dutWrapper_dut_resultReg[32] ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN = EN_get && !get_addr_ULT_0x100___d80 ;

  // register interrupted
  assign interrupted$D_IN = MUX_interrupted$write_1__SEL_1 ;
  assign interrupted$EN =
	     WILL_FIRE_RL_timer && rf$D_OUT_1 == 32'd1 ||
	     EN_put && put_addr == 12'h0 && put_v[0] ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN = EN_put && !put_addr_ULT_0x100___d31 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { put_v, requestFifo_buff[63:32] } :
	       longval__h1844 ;
  assign requestFifo_buff$EN = EN_put && !put_addr_ULT_0x100___d31 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h1798 ;
  assign requestFifo_count$EN = EN_put && !put_addr_ULT_0x100___d31 ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     (responseFifo_count == 32'd0) ? responseFifo_count : x__h2080 ;
  assign responseFifo_count$EN =
	     EN_get && !get_addr_ULT_0x100___d80 &&
	     responseFifo_fifo$EMPTY_N ;

  // submodule requestFifo_fifo
  assign requestFifo_fifo$D_IN = longval__h1844 ;
  assign requestFifo_fifo$ENQ =
	     EN_put && !put_addr_ULT_0x100___d31 &&
	     requestFifo_count == 32'd1 ;
  assign requestFifo_fifo$DEQ = WILL_FIRE_RL_mkConnectionGetPut ;
  assign requestFifo_fifo$CLR = 1'b0 ;

  // submodule responseFifo_fifo
  assign responseFifo_fifo$D_IN = dutWrapper_respReg[31:0] ;
  assign responseFifo_fifo$ENQ = MUX_dutWrapper_respReg$write_1__SEL_2 ;
  assign responseFifo_fifo$DEQ =
	     EN_get && !get_addr_ULT_0x100___d80 &&
	     responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd0 ;
  assign responseFifo_fifo$CLR = 1'b0 ;

  // submodule rf
  assign rf$ADDR_1 = 12'h008 ;
  assign rf$ADDR_2 = 12'h004 ;
  assign rf$ADDR_3 = get_addr ;
  assign rf$ADDR_4 = 12'h0 ;
  assign rf$ADDR_5 = 12'h0 ;
  assign rf$ADDR_IN = MUX_rf$upd_1__SEL_1 ? put_addr : 12'h008 ;
  assign rf$D_IN = MUX_rf$upd_1__SEL_1 ? put_v : MUX_rf$upd_2__VAL_2 ;
  assign rf$WE = EN_put && put_addr_ULT_0x100___d31 || WILL_FIRE_RL_timer ;

  // remaining internal signals
  assign get_addr_ULT_0x100___d80 = get_addr < 12'h100 ;
  assign longval__h1844 = { put_v, requestFifo_buff[63:32] } ;
  assign put_addr_ULT_0x100___d31 = put_addr < 12'h100 ;
  assign result__h2152 = { rf$D_OUT_3[31:1], interrupted } ;
  assign v__h2230 = responseFifo_fifo$D_OUT >> x__h2261 ;
  assign x__h1798 = requestFifo_count + 32'd1 ;
  assign x__h2080 = responseFifo_count + 32'd1 ;
  assign x__h2261 = { responseFifo_count[26:0], 5'd0 } ;
  assign y_avValue__h2224 = responseFifo_fifo$EMPTY_N ? v__h2230 : 32'd0 ;
  always@(get_addr or
	  rf$D_OUT_3 or
	  result__h2152 or
	  dutWrapper_requestFired or
	  dutWrapper_responseFired or putWordCount or getWordCount)
  begin
    case (get_addr)
      12'h0:
	  CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 =
	      result__h2152;
      12'h010:
	  CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 =
	      dutWrapper_requestFired;
      12'h014:
	  CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 =
	      dutWrapper_responseFired;
      12'h018:
	  CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 =
	      putWordCount;
      12'h01C:
	  CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 =
	      getWordCount;
      default: CASE_get_addr_rfD_OUT_3_0x0_result152_0x10_du_ETC__q1 =
		   rf$D_OUT_3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_respReg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 64'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dutWrapper_dut_resultReg$EN)
	  dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_resultReg$D_IN;
	if (dutWrapper_requestFired$EN)
	  dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestFired$D_IN;
	if (dutWrapper_respReg$EN)
	  dutWrapper_respReg <= `BSV_ASSIGNMENT_DELAY dutWrapper_respReg$D_IN;
	if (dutWrapper_responseFired$EN)
	  dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseFired$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dutWrapper_dut_resultReg = 33'h0AAAAAAAA;
    dutWrapper_requestFired = 32'hAAAAAAAA;
    dutWrapper_respReg = 33'h0AAAAAAAA;
    dutWrapper_responseFired = 32'hAAAAAAAA;
    getWordCount = 32'hAAAAAAAA;
    interrupted = 1'h0;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 64'hAAAAAAAAAAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    responseFifo_count = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkIpSlave

