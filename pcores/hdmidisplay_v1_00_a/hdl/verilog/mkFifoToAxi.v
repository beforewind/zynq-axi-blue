//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Mon Nov 26 17:12:17 EST 2012
//
// Method conflict info:
// Method: base__write
// Conflict-free: bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before (restricted): base__write
// Sequenced after: base__read, aboveThreshold, notEmpty, notFull
// Sequenced after (restricted): axi_writeAddr
//
// Method: base__read
// Conflict-free: base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: base__write
//
// Method: bounds__write
// Conflict-free: base__write,
// 	       base__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before (restricted): bounds__write
// Sequenced after: bounds__read, notFull
//
// Method: bounds__read
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: bounds__write
//
// Method: threshold__write
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before (restricted): threshold__write
// Sequenced after: threshold__read, aboveThreshold
//
// Method: threshold__read
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: threshold__write
//
// Method: aboveThreshold
// Conflict-free: base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: base__write, threshold__write, axi_writeAddr
//
// Method: notEmpty
// Conflict-free: base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: base__write, axi_writeAddr
//
// Method: notFull
// Conflict-free: base__read,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: base__write, bounds__write, axi_writeAddr
//
// Method: axi_writeAddr
// Conflict-free: base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before (restricted): base__write, axi_writeData
// Sequenced after: aboveThreshold,
// 		 notEmpty,
// 		 notFull,
// 		 axi_writeBurstLen,
// 		 axi_writeLastDataBeat
// Conflicts: axi_writeAddr
//
// Method: axi_writeBurstLen
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: axi_writeAddr
// Sequenced before (restricted): axi_writeData
//
// Method: axi_writeBurstWidth
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
//
// Method: axi_writeBurstType
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
//
// Method: axi_writeBurstProt
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
//
// Method: axi_writeBurstCache
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
//
// Method: axi_writeData
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeResponse,
// 	       enq
// Sequenced after (restricted): axi_writeAddr,
// 			      axi_writeBurstLen,
// 			      axi_writeLastDataBeat
// Conflicts: axi_writeData
//
// Method: axi_writeDataByteEnable
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
//
// Method: axi_writeLastDataBeat
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
// Sequenced before: axi_writeAddr
// Sequenced before (restricted): axi_writeData
//
// Method: axi_writeResponse
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse,
// 	       enq
//
// Method: enq
// Conflict-free: base__write,
// 	       base__read,
// 	       bounds__write,
// 	       bounds__read,
// 	       threshold__write,
// 	       threshold__read,
// 	       aboveThreshold,
// 	       notEmpty,
// 	       notFull,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
// Conflicts: enq
//
//
// Ports:
// Name                         I/O  size props
// RDY_base__write                O     1 const
// base__read                     O    32 reg
// RDY_base__read                 O     1 const
// RDY_bounds__write              O     1 const
// bounds__read                   O    32 reg
// RDY_bounds__read               O     1 const
// RDY_threshold__write           O     1 const
// threshold__read                O    32 reg
// RDY_threshold__read            O     1 const
// aboveThreshold                 O     1
// RDY_aboveThreshold             O     1 const
// notEmpty                       O     1
// RDY_notEmpty                   O     1 const
// notFull                        O     1
// RDY_notFull                    O     1 const
// axi_writeAddr                  O    32 reg
// RDY_axi_writeAddr              O     1
// axi_writeBurstLen              O     8 reg
// RDY_axi_writeBurstLen          O     1 const
// axi_writeBurstWidth            O     3 const
// RDY_axi_writeBurstWidth        O     1 const
// axi_writeBurstType             O     2 const
// RDY_axi_writeBurstType         O     1 const
// axi_writeBurstProt             O     3 const
// RDY_axi_writeBurstProt         O     1 const
// axi_writeBurstCache            O     4 const
// RDY_axi_writeBurstCache        O     1 const
// axi_writeData                  O    32 reg
// RDY_axi_writeData              O     1 reg
// axi_writeDataByteEnable        O     4 const
// RDY_axi_writeDataByteEnable    O     1 const
// axi_writeLastDataBeat          O     1
// RDY_axi_writeLastDataBeat      O     1 const
// RDY_axi_writeResponse          O     1 const
// RDY_enq                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// base__write_1                  I    32
// bounds__write_1                I    32 reg
// threshold__write_1             I    32 reg
// axi_writeResponse_responseCode  I     2 unused
// enq_value                      I    32 reg
// EN_base__write                 I     1
// EN_bounds__write               I     1
// EN_threshold__write            I     1
// EN_axi_writeResponse           I     1 unused
// EN_enq                         I     1
// EN_axi_writeAddr               I     1
// EN_axi_writeData               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFifoToAxi(CLK,
		   RST_N,

		   base__write_1,
		   EN_base__write,
		   RDY_base__write,

		   base__read,
		   RDY_base__read,

		   bounds__write_1,
		   EN_bounds__write,
		   RDY_bounds__write,

		   bounds__read,
		   RDY_bounds__read,

		   threshold__write_1,
		   EN_threshold__write,
		   RDY_threshold__write,

		   threshold__read,
		   RDY_threshold__read,

		   aboveThreshold,
		   RDY_aboveThreshold,

		   notEmpty,
		   RDY_notEmpty,

		   notFull,
		   RDY_notFull,

		   EN_axi_writeAddr,
		   axi_writeAddr,
		   RDY_axi_writeAddr,

		   axi_writeBurstLen,
		   RDY_axi_writeBurstLen,

		   axi_writeBurstWidth,
		   RDY_axi_writeBurstWidth,

		   axi_writeBurstType,
		   RDY_axi_writeBurstType,

		   axi_writeBurstProt,
		   RDY_axi_writeBurstProt,

		   axi_writeBurstCache,
		   RDY_axi_writeBurstCache,

		   EN_axi_writeData,
		   axi_writeData,
		   RDY_axi_writeData,

		   axi_writeDataByteEnable,
		   RDY_axi_writeDataByteEnable,

		   axi_writeLastDataBeat,
		   RDY_axi_writeLastDataBeat,

		   axi_writeResponse_responseCode,
		   EN_axi_writeResponse,
		   RDY_axi_writeResponse,

		   enq_value,
		   EN_enq,
		   RDY_enq);
  input  CLK;
  input  RST_N;

  // action method base__write
  input  [31 : 0] base__write_1;
  input  EN_base__write;
  output RDY_base__write;

  // value method base__read
  output [31 : 0] base__read;
  output RDY_base__read;

  // action method bounds__write
  input  [31 : 0] bounds__write_1;
  input  EN_bounds__write;
  output RDY_bounds__write;

  // value method bounds__read
  output [31 : 0] bounds__read;
  output RDY_bounds__read;

  // action method threshold__write
  input  [31 : 0] threshold__write_1;
  input  EN_threshold__write;
  output RDY_threshold__write;

  // value method threshold__read
  output [31 : 0] threshold__read;
  output RDY_threshold__read;

  // value method aboveThreshold
  output aboveThreshold;
  output RDY_aboveThreshold;

  // value method notEmpty
  output notEmpty;
  output RDY_notEmpty;

  // value method notFull
  output notFull;
  output RDY_notFull;

  // actionvalue method axi_writeAddr
  input  EN_axi_writeAddr;
  output [31 : 0] axi_writeAddr;
  output RDY_axi_writeAddr;

  // value method axi_writeBurstLen
  output [7 : 0] axi_writeBurstLen;
  output RDY_axi_writeBurstLen;

  // value method axi_writeBurstWidth
  output [2 : 0] axi_writeBurstWidth;
  output RDY_axi_writeBurstWidth;

  // value method axi_writeBurstType
  output [1 : 0] axi_writeBurstType;
  output RDY_axi_writeBurstType;

  // value method axi_writeBurstProt
  output [2 : 0] axi_writeBurstProt;
  output RDY_axi_writeBurstProt;

  // value method axi_writeBurstCache
  output [3 : 0] axi_writeBurstCache;
  output RDY_axi_writeBurstCache;

  // actionvalue method axi_writeData
  input  EN_axi_writeData;
  output [31 : 0] axi_writeData;
  output RDY_axi_writeData;

  // value method axi_writeDataByteEnable
  output [3 : 0] axi_writeDataByteEnable;
  output RDY_axi_writeDataByteEnable;

  // value method axi_writeLastDataBeat
  output axi_writeLastDataBeat;
  output RDY_axi_writeLastDataBeat;

  // action method axi_writeResponse
  input  [1 : 0] axi_writeResponse_responseCode;
  input  EN_axi_writeResponse;
  output RDY_axi_writeResponse;

  // action method enq
  input  [31 : 0] enq_value;
  input  EN_enq;
  output RDY_enq;

  // signals for module outputs
  wire [31 : 0] axi_writeAddr,
		axi_writeData,
		base__read,
		bounds__read,
		threshold__read;
  wire [7 : 0] axi_writeBurstLen;
  wire [3 : 0] axi_writeBurstCache, axi_writeDataByteEnable;
  wire [2 : 0] axi_writeBurstProt, axi_writeBurstWidth;
  wire [1 : 0] axi_writeBurstType;
  wire RDY_aboveThreshold,
       RDY_axi_writeAddr,
       RDY_axi_writeBurstCache,
       RDY_axi_writeBurstLen,
       RDY_axi_writeBurstProt,
       RDY_axi_writeBurstType,
       RDY_axi_writeBurstWidth,
       RDY_axi_writeData,
       RDY_axi_writeDataByteEnable,
       RDY_axi_writeLastDataBeat,
       RDY_axi_writeResponse,
       RDY_base__read,
       RDY_base__write,
       RDY_bounds__read,
       RDY_bounds__write,
       RDY_enq,
       RDY_notEmpty,
       RDY_notFull,
       RDY_threshold__read,
       RDY_threshold__write,
       aboveThreshold,
       axi_writeLastDataBeat,
       notEmpty,
       notFull;

  // register baseReg
  reg [31 : 0] baseReg;
  wire [31 : 0] baseReg$D_IN;
  wire baseReg$EN;

  // register boundsReg
  reg [31 : 0] boundsReg;
  wire [31 : 0] boundsReg$D_IN;
  wire boundsReg$EN;

  // register burstCountReg
  reg [7 : 0] burstCountReg;
  wire [7 : 0] burstCountReg$D_IN;
  wire burstCountReg$EN;

  // register enabledReg
  reg enabledReg;
  wire enabledReg$D_IN, enabledReg$EN;

  // register ptrReg
  reg [31 : 0] ptrReg;
  wire [31 : 0] ptrReg$D_IN;
  wire ptrReg$EN;

  // register thresholdReg
  reg [31 : 0] thresholdReg;
  wire [31 : 0] thresholdReg$D_IN;
  wire thresholdReg$EN;

  // ports of submodule fifo
  wire [31 : 0] fifo$D_IN, fifo$D_OUT;
  wire fifo$CLR, fifo$DEQ, fifo$EMPTY_N, fifo$ENQ, fifo$FULL_N;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_ptrReg$write_1__VAL_2;
  wire [7 : 0] MUX_burstCountReg$write_1__VAL_2;
  wire MUX_ptrReg$write_1__SEL_1;

  // action method base__write
  assign RDY_base__write = 1'd1 ;

  // value method base__read
  assign base__read = baseReg ;
  assign RDY_base__read = 1'd1 ;

  // action method bounds__write
  assign RDY_bounds__write = 1'd1 ;

  // value method bounds__read
  assign bounds__read = boundsReg ;
  assign RDY_bounds__read = 1'd1 ;

  // action method threshold__write
  assign RDY_threshold__write = 1'd1 ;

  // value method threshold__read
  assign threshold__read = thresholdReg ;
  assign RDY_threshold__read = 1'd1 ;

  // value method aboveThreshold
  assign aboveThreshold = ptrReg >= thresholdReg ;
  assign RDY_aboveThreshold = 1'd1 ;

  // value method notEmpty
  assign notEmpty = ptrReg != baseReg ;
  assign RDY_notEmpty = 1'd1 ;

  // value method notFull
  assign notFull = ptrReg != boundsReg ;
  assign RDY_notFull = 1'd1 ;

  // actionvalue method axi_writeAddr
  assign axi_writeAddr = ptrReg ;
  assign RDY_axi_writeAddr = burstCountReg != 8'd0 && enabledReg ;

  // value method axi_writeBurstLen
  assign axi_writeBurstLen = burstCountReg ;
  assign RDY_axi_writeBurstLen = 1'd1 ;

  // value method axi_writeBurstWidth
  assign axi_writeBurstWidth = 3'b010 ;
  assign RDY_axi_writeBurstWidth = 1'd1 ;

  // value method axi_writeBurstType
  assign axi_writeBurstType = 2'b01 ;
  assign RDY_axi_writeBurstType = 1'd1 ;

  // value method axi_writeBurstProt
  assign axi_writeBurstProt = 3'b0 ;
  assign RDY_axi_writeBurstProt = 1'd1 ;

  // value method axi_writeBurstCache
  assign axi_writeBurstCache = 4'b0011 ;
  assign RDY_axi_writeBurstCache = 1'd1 ;

  // actionvalue method axi_writeData
  assign axi_writeData = fifo$D_OUT ;
  assign RDY_axi_writeData = fifo$EMPTY_N ;

  // value method axi_writeDataByteEnable
  assign axi_writeDataByteEnable = 4'b1111 ;
  assign RDY_axi_writeDataByteEnable = 1'd1 ;

  // value method axi_writeLastDataBeat
  assign axi_writeLastDataBeat = burstCountReg == 8'd4 ;
  assign RDY_axi_writeLastDataBeat = 1'd1 ;

  // action method axi_writeResponse
  assign RDY_axi_writeResponse = 1'd1 ;

  // action method enq
  assign RDY_enq = fifo$FULL_N ;

  // submodule fifo
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifo(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(fifo$D_IN),
				    .ENQ(fifo$ENQ),
				    .DEQ(fifo$DEQ),
				    .CLR(fifo$CLR),
				    .D_OUT(fifo$D_OUT),
				    .FULL_N(fifo$FULL_N),
				    .EMPTY_N(fifo$EMPTY_N));

  // inputs to muxes for submodule ports
  assign MUX_ptrReg$write_1__SEL_1 = EN_base__write && !enabledReg ;
  assign MUX_burstCountReg$write_1__VAL_2 = burstCountReg - 8'd1 ;
  assign MUX_ptrReg$write_1__VAL_2 = ptrReg + 32'd4 ;

  // register baseReg
  assign baseReg$D_IN = base__write_1 ;
  assign baseReg$EN = MUX_ptrReg$write_1__SEL_1 ;

  // register boundsReg
  assign boundsReg$D_IN = bounds__write_1 ;
  assign boundsReg$EN = EN_bounds__write && !enabledReg ;

  // register burstCountReg
  assign burstCountReg$D_IN =
	     (!fifo$FULL_N) ? 8'd7 : MUX_burstCountReg$write_1__VAL_2 ;
  assign burstCountReg$EN = EN_axi_writeAddr || !fifo$FULL_N ;

  // register enabledReg
  assign enabledReg$D_IN = 1'b0 ;
  assign enabledReg$EN = 1'b0 ;

  // register ptrReg
  assign ptrReg$D_IN =
	     MUX_ptrReg$write_1__SEL_1 ?
	       base__write_1 :
	       MUX_ptrReg$write_1__VAL_2 ;
  assign ptrReg$EN = EN_base__write && !enabledReg || EN_axi_writeAddr ;

  // register thresholdReg
  assign thresholdReg$D_IN = threshold__write_1 ;
  assign thresholdReg$EN = EN_threshold__write ;

  // submodule fifo
  assign fifo$D_IN = enq_value ;
  assign fifo$ENQ = EN_enq ;
  assign fifo$DEQ = EN_axi_writeData ;
  assign fifo$CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        baseReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	boundsReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	burstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	enabledReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	thresholdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (baseReg$EN) baseReg <= `BSV_ASSIGNMENT_DELAY baseReg$D_IN;
	if (boundsReg$EN) boundsReg <= `BSV_ASSIGNMENT_DELAY boundsReg$D_IN;
	if (burstCountReg$EN)
	  burstCountReg <= `BSV_ASSIGNMENT_DELAY burstCountReg$D_IN;
	if (enabledReg$EN)
	  enabledReg <= `BSV_ASSIGNMENT_DELAY enabledReg$D_IN;
	if (ptrReg$EN) ptrReg <= `BSV_ASSIGNMENT_DELAY ptrReg$D_IN;
	if (thresholdReg$EN)
	  thresholdReg <= `BSV_ASSIGNMENT_DELAY thresholdReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    baseReg = 32'hAAAAAAAA;
    boundsReg = 32'hAAAAAAAA;
    burstCountReg = 8'hAA;
    enabledReg = 1'h0;
    ptrReg = 32'hAAAAAAAA;
    thresholdReg = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFifoToAxi

