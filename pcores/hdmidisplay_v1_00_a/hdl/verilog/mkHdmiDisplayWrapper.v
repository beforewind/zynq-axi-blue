//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Tue Feb  5 12:46:52 EST 2013
//
// Method conflict info:
// Method: interrupt
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: ctrl_write_writeData
//
// Method: ctrl_read_readAddr
// Conflict-free: interrupt,
// 	       ctrl_read_readData,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: ctrl_read_last
// Conflicts: ctrl_read_readAddr
//
// Method: ctrl_read_readData
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: ctrl_write_writeData,
// 		  fifo_read_readData,
// 		  fifo_write_writeData
// Sequenced after: ctrl_read_last
// Conflicts: ctrl_read_readData
//
// Method: ctrl_read_last
// Conflict-free: interrupt,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: ctrl_read_readAddr, ctrl_read_readData
//
// Method: ctrl_write_writeAddr
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: ctrl_write_writeAddr
//
// Method: ctrl_write_writeData
// Conflict-free: ctrl_read_readAddr,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: interrupt, ctrl_read_readData
// Conflicts: ctrl_write_writeData
//
// Method: ctrl_write_writeResponse
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: ctrl_write_writeResponse
//
// Method: fifo_read_readAddr
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readData,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: fifo_read_last
// Conflicts: fifo_read_readAddr
//
// Method: fifo_read_readData
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: ctrl_read_readData, fifo_read_last
// Conflicts: fifo_read_readData
//
// Method: fifo_read_last
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: fifo_read_readAddr, fifo_read_readData
//
// Method: fifo_write_writeAddr
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: fifo_write_writeAddr
//
// Method: fifo_write_writeData
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: ctrl_read_readData
// Conflicts: fifo_write_writeData
//
// Method: fifo_write_writeResponse
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: fifo_write_writeResponse
//
// Method: m_axi_read_readAddr
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: m_axi_read_readAddr
//
// Method: m_axi_read_readBurstLen
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_read_readBurstWidth
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_read_readBurstType
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_read_readBurstProt
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_read_readBurstCache
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_read_readId
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_read_readData
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: m_axi_read_readData
//
// Method: m_axi_write_writeAddr
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeBurstLen
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeBurstWidth
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeBurstType
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeBurstProt
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeBurstCache
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeId
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeData
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeDataByteEnable
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeLastDataBeat
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: m_axi_write_writeResponse
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_vsync
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_hsync
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_de
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_data
// Conflict-free: interrupt,
// 	       ctrl_read_readAddr,
// 	       ctrl_read_readData,
// 	       ctrl_read_last,
// 	       ctrl_write_writeAddr,
// 	       ctrl_write_writeData,
// 	       ctrl_write_writeResponse,
// 	       fifo_read_readAddr,
// 	       fifo_read_readData,
// 	       fifo_read_last,
// 	       fifo_write_writeAddr,
// 	       fifo_write_writeData,
// 	       fifo_write_writeResponse,
// 	       m_axi_read_readAddr,
// 	       m_axi_read_readBurstLen,
// 	       m_axi_read_readBurstWidth,
// 	       m_axi_read_readBurstType,
// 	       m_axi_read_readBurstProt,
// 	       m_axi_read_readBurstCache,
// 	       m_axi_read_readId,
// 	       m_axi_read_readData,
// 	       m_axi_write_writeAddr,
// 	       m_axi_write_writeBurstLen,
// 	       m_axi_write_writeBurstWidth,
// 	       m_axi_write_writeBurstType,
// 	       m_axi_write_writeBurstProt,
// 	       m_axi_write_writeBurstCache,
// 	       m_axi_write_writeId,
// 	       m_axi_write_writeData,
// 	       m_axi_write_writeDataByteEnable,
// 	       m_axi_write_writeLastDataBeat,
// 	       m_axi_write_writeResponse,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
//
// Ports:
// Name                         I/O  size props
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// RDY_ctrl_read_readAddr         O     1
// ctrl_read_readData             O    32
// RDY_ctrl_read_readData         O     1
// ctrl_read_last                 O     1
// RDY_ctrl_read_last             O     1 const
// RDY_ctrl_write_writeAddr       O     1
// RDY_ctrl_write_writeData       O     1
// ctrl_write_writeResponse       O     2 reg
// RDY_ctrl_write_writeResponse   O     1 reg
// RDY_fifo_read_readAddr         O     1
// fifo_read_readData             O    32
// RDY_fifo_read_readData         O     1
// fifo_read_last                 O     1
// RDY_fifo_read_last             O     1 const
// RDY_fifo_write_writeAddr       O     1
// RDY_fifo_write_writeData       O     1
// fifo_write_writeResponse       O     2 reg
// RDY_fifo_write_writeResponse   O     1 reg
// m_axi_read_readAddr            O    32
// RDY_m_axi_read_readAddr        O     1
// m_axi_read_readBurstLen        O     4 const
// RDY_m_axi_read_readBurstLen    O     1 const
// m_axi_read_readBurstWidth      O     3 const
// RDY_m_axi_read_readBurstWidth  O     1 const
// m_axi_read_readBurstType       O     2 const
// RDY_m_axi_read_readBurstType   O     1 const
// m_axi_read_readBurstProt       O     2 const
// RDY_m_axi_read_readBurstProt   O     1 const
// m_axi_read_readBurstCache      O     3 const
// RDY_m_axi_read_readBurstCache  O     1 const
// m_axi_read_readId              O     1 const
// RDY_m_axi_read_readId          O     1 const
// RDY_m_axi_read_readData        O     1 const
// m_axi_write_writeAddr          O    32 const
// RDY_m_axi_write_writeAddr      O     1 const
// m_axi_write_writeBurstLen      O     4 const
// RDY_m_axi_write_writeBurstLen  O     1 const
// m_axi_write_writeBurstWidth    O     3 const
// RDY_m_axi_write_writeBurstWidth  O     1 const
// m_axi_write_writeBurstType     O     2 const
// RDY_m_axi_write_writeBurstType  O     1 const
// m_axi_write_writeBurstProt     O     2 const
// RDY_m_axi_write_writeBurstProt  O     1 const
// m_axi_write_writeBurstCache    O     3 const
// RDY_m_axi_write_writeBurstCache  O     1 const
// m_axi_write_writeId            O     1 const
// RDY_m_axi_write_writeId        O     1 const
// m_axi_write_writeData          O    64 const
// RDY_m_axi_write_writeData      O     1 const
// m_axi_write_writeDataByteEnable  O     8 const
// RDY_m_axi_write_writeDataByteEnable  O     1 const
// m_axi_write_writeLastDataBeat  O     1 const
// RDY_m_axi_write_writeLastDataBeat  O     1 const
// RDY_m_axi_write_writeResponse  O     1 const
// hdmi_hdmi_vsync                O     1 reg
// RDY_hdmi_hdmi_vsync            O     1 const
// hdmi_hdmi_hsync                O     1 reg
// RDY_hdmi_hdmi_hsync            O     1 const
// hdmi_hdmi_de                   O     1 reg
// RDY_hdmi_hdmi_de               O     1 const
// hdmi_hdmi_data                 O    16 reg
// RDY_hdmi_hdmi_data             O     1 const
// CLK_hdmi_clk                   I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ctrl_read_readAddr_addr        I    32
// ctrl_read_readAddr_burstLen    I     8
// ctrl_read_readAddr_burstWidth  I     3 unused
// ctrl_read_readAddr_burstType   I     2 unused
// ctrl_read_readAddr_burstProt   I     3 unused
// ctrl_read_readAddr_burstCache  I     4 unused
// ctrl_write_writeAddr_addr      I    32
// ctrl_write_writeAddr_burstLen  I     8
// ctrl_write_writeAddr_burstWidth  I     3 unused
// ctrl_write_writeAddr_burstType  I     2 unused
// ctrl_write_writeAddr_burstProt  I     3 unused
// ctrl_write_writeAddr_burstCache  I     4 unused
// ctrl_write_writeData_data      I    32
// ctrl_write_writeData_byteEnable  I     4 unused
// ctrl_write_writeData_last      I     1 unused
// fifo_read_readAddr_addr        I    32
// fifo_read_readAddr_burstLen    I     8
// fifo_read_readAddr_burstWidth  I     3 unused
// fifo_read_readAddr_burstType   I     2 unused
// fifo_read_readAddr_burstProt   I     3 unused
// fifo_read_readAddr_burstCache  I     4 unused
// fifo_write_writeAddr_addr      I    32
// fifo_write_writeAddr_burstLen  I     8
// fifo_write_writeAddr_burstWidth  I     3 unused
// fifo_write_writeAddr_burstType  I     2 unused
// fifo_write_writeAddr_burstProt  I     3 unused
// fifo_write_writeAddr_burstCache  I     4 unused
// fifo_write_writeData_data      I    32
// fifo_write_writeData_byteEnable  I     4 unused
// fifo_write_writeData_last      I     1 unused
// m_axi_read_readData_data       I    64
// m_axi_read_readData_resp       I     2 unused
// m_axi_read_readData_last       I     1 unused
// m_axi_read_readData_id         I     1 unused
// m_axi_write_writeResponse_responseCode  I     2 unused
// m_axi_write_writeResponse_id   I     1 unused
// EN_ctrl_read_readAddr          I     1
// EN_ctrl_write_writeAddr        I     1
// EN_ctrl_write_writeData        I     1
// EN_fifo_read_readAddr          I     1
// EN_fifo_write_writeAddr        I     1
// EN_fifo_write_writeData        I     1
// EN_m_axi_read_readData         I     1
// EN_m_axi_write_writeResponse   I     1 unused
// EN_ctrl_read_readData          I     1
// EN_ctrl_write_writeResponse    I     1
// EN_fifo_read_readData          I     1
// EN_fifo_write_writeResponse    I     1
// EN_m_axi_read_readAddr         I     1
// EN_m_axi_write_writeAddr       I     1 unused
// EN_m_axi_write_writeData       I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHdmiDisplayWrapper(CLK_hdmi_clk,
			    CLK,
			    RST_N,

			    interrupt,
			    RDY_interrupt,

			    ctrl_read_readAddr_addr,
			    ctrl_read_readAddr_burstLen,
			    ctrl_read_readAddr_burstWidth,
			    ctrl_read_readAddr_burstType,
			    ctrl_read_readAddr_burstProt,
			    ctrl_read_readAddr_burstCache,
			    EN_ctrl_read_readAddr,
			    RDY_ctrl_read_readAddr,

			    EN_ctrl_read_readData,
			    ctrl_read_readData,
			    RDY_ctrl_read_readData,

			    ctrl_read_last,
			    RDY_ctrl_read_last,

			    ctrl_write_writeAddr_addr,
			    ctrl_write_writeAddr_burstLen,
			    ctrl_write_writeAddr_burstWidth,
			    ctrl_write_writeAddr_burstType,
			    ctrl_write_writeAddr_burstProt,
			    ctrl_write_writeAddr_burstCache,
			    EN_ctrl_write_writeAddr,
			    RDY_ctrl_write_writeAddr,

			    ctrl_write_writeData_data,
			    ctrl_write_writeData_byteEnable,
			    ctrl_write_writeData_last,
			    EN_ctrl_write_writeData,
			    RDY_ctrl_write_writeData,

			    EN_ctrl_write_writeResponse,
			    ctrl_write_writeResponse,
			    RDY_ctrl_write_writeResponse,

			    fifo_read_readAddr_addr,
			    fifo_read_readAddr_burstLen,
			    fifo_read_readAddr_burstWidth,
			    fifo_read_readAddr_burstType,
			    fifo_read_readAddr_burstProt,
			    fifo_read_readAddr_burstCache,
			    EN_fifo_read_readAddr,
			    RDY_fifo_read_readAddr,

			    EN_fifo_read_readData,
			    fifo_read_readData,
			    RDY_fifo_read_readData,

			    fifo_read_last,
			    RDY_fifo_read_last,

			    fifo_write_writeAddr_addr,
			    fifo_write_writeAddr_burstLen,
			    fifo_write_writeAddr_burstWidth,
			    fifo_write_writeAddr_burstType,
			    fifo_write_writeAddr_burstProt,
			    fifo_write_writeAddr_burstCache,
			    EN_fifo_write_writeAddr,
			    RDY_fifo_write_writeAddr,

			    fifo_write_writeData_data,
			    fifo_write_writeData_byteEnable,
			    fifo_write_writeData_last,
			    EN_fifo_write_writeData,
			    RDY_fifo_write_writeData,

			    EN_fifo_write_writeResponse,
			    fifo_write_writeResponse,
			    RDY_fifo_write_writeResponse,

			    EN_m_axi_read_readAddr,
			    m_axi_read_readAddr,
			    RDY_m_axi_read_readAddr,

			    m_axi_read_readBurstLen,
			    RDY_m_axi_read_readBurstLen,

			    m_axi_read_readBurstWidth,
			    RDY_m_axi_read_readBurstWidth,

			    m_axi_read_readBurstType,
			    RDY_m_axi_read_readBurstType,

			    m_axi_read_readBurstProt,
			    RDY_m_axi_read_readBurstProt,

			    m_axi_read_readBurstCache,
			    RDY_m_axi_read_readBurstCache,

			    m_axi_read_readId,
			    RDY_m_axi_read_readId,

			    m_axi_read_readData_data,
			    m_axi_read_readData_resp,
			    m_axi_read_readData_last,
			    m_axi_read_readData_id,
			    EN_m_axi_read_readData,
			    RDY_m_axi_read_readData,

			    EN_m_axi_write_writeAddr,
			    m_axi_write_writeAddr,
			    RDY_m_axi_write_writeAddr,

			    m_axi_write_writeBurstLen,
			    RDY_m_axi_write_writeBurstLen,

			    m_axi_write_writeBurstWidth,
			    RDY_m_axi_write_writeBurstWidth,

			    m_axi_write_writeBurstType,
			    RDY_m_axi_write_writeBurstType,

			    m_axi_write_writeBurstProt,
			    RDY_m_axi_write_writeBurstProt,

			    m_axi_write_writeBurstCache,
			    RDY_m_axi_write_writeBurstCache,

			    m_axi_write_writeId,
			    RDY_m_axi_write_writeId,

			    EN_m_axi_write_writeData,
			    m_axi_write_writeData,
			    RDY_m_axi_write_writeData,

			    m_axi_write_writeDataByteEnable,
			    RDY_m_axi_write_writeDataByteEnable,

			    m_axi_write_writeLastDataBeat,
			    RDY_m_axi_write_writeLastDataBeat,

			    m_axi_write_writeResponse_responseCode,
			    m_axi_write_writeResponse_id,
			    EN_m_axi_write_writeResponse,
			    RDY_m_axi_write_writeResponse,

			    hdmi_hdmi_vsync,
			    RDY_hdmi_hdmi_vsync,

			    hdmi_hdmi_hsync,
			    RDY_hdmi_hdmi_hsync,

			    hdmi_hdmi_de,
			    RDY_hdmi_hdmi_de,

			    hdmi_hdmi_data,
			    RDY_hdmi_hdmi_data);
  input  CLK_hdmi_clk;
  input  CLK;
  input  RST_N;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // action method ctrl_read_readAddr
  input  [31 : 0] ctrl_read_readAddr_addr;
  input  [7 : 0] ctrl_read_readAddr_burstLen;
  input  [2 : 0] ctrl_read_readAddr_burstWidth;
  input  [1 : 0] ctrl_read_readAddr_burstType;
  input  [2 : 0] ctrl_read_readAddr_burstProt;
  input  [3 : 0] ctrl_read_readAddr_burstCache;
  input  EN_ctrl_read_readAddr;
  output RDY_ctrl_read_readAddr;

  // actionvalue method ctrl_read_readData
  input  EN_ctrl_read_readData;
  output [31 : 0] ctrl_read_readData;
  output RDY_ctrl_read_readData;

  // value method ctrl_read_last
  output ctrl_read_last;
  output RDY_ctrl_read_last;

  // action method ctrl_write_writeAddr
  input  [31 : 0] ctrl_write_writeAddr_addr;
  input  [7 : 0] ctrl_write_writeAddr_burstLen;
  input  [2 : 0] ctrl_write_writeAddr_burstWidth;
  input  [1 : 0] ctrl_write_writeAddr_burstType;
  input  [2 : 0] ctrl_write_writeAddr_burstProt;
  input  [3 : 0] ctrl_write_writeAddr_burstCache;
  input  EN_ctrl_write_writeAddr;
  output RDY_ctrl_write_writeAddr;

  // action method ctrl_write_writeData
  input  [31 : 0] ctrl_write_writeData_data;
  input  [3 : 0] ctrl_write_writeData_byteEnable;
  input  ctrl_write_writeData_last;
  input  EN_ctrl_write_writeData;
  output RDY_ctrl_write_writeData;

  // actionvalue method ctrl_write_writeResponse
  input  EN_ctrl_write_writeResponse;
  output [1 : 0] ctrl_write_writeResponse;
  output RDY_ctrl_write_writeResponse;

  // action method fifo_read_readAddr
  input  [31 : 0] fifo_read_readAddr_addr;
  input  [7 : 0] fifo_read_readAddr_burstLen;
  input  [2 : 0] fifo_read_readAddr_burstWidth;
  input  [1 : 0] fifo_read_readAddr_burstType;
  input  [2 : 0] fifo_read_readAddr_burstProt;
  input  [3 : 0] fifo_read_readAddr_burstCache;
  input  EN_fifo_read_readAddr;
  output RDY_fifo_read_readAddr;

  // actionvalue method fifo_read_readData
  input  EN_fifo_read_readData;
  output [31 : 0] fifo_read_readData;
  output RDY_fifo_read_readData;

  // value method fifo_read_last
  output fifo_read_last;
  output RDY_fifo_read_last;

  // action method fifo_write_writeAddr
  input  [31 : 0] fifo_write_writeAddr_addr;
  input  [7 : 0] fifo_write_writeAddr_burstLen;
  input  [2 : 0] fifo_write_writeAddr_burstWidth;
  input  [1 : 0] fifo_write_writeAddr_burstType;
  input  [2 : 0] fifo_write_writeAddr_burstProt;
  input  [3 : 0] fifo_write_writeAddr_burstCache;
  input  EN_fifo_write_writeAddr;
  output RDY_fifo_write_writeAddr;

  // action method fifo_write_writeData
  input  [31 : 0] fifo_write_writeData_data;
  input  [3 : 0] fifo_write_writeData_byteEnable;
  input  fifo_write_writeData_last;
  input  EN_fifo_write_writeData;
  output RDY_fifo_write_writeData;

  // actionvalue method fifo_write_writeResponse
  input  EN_fifo_write_writeResponse;
  output [1 : 0] fifo_write_writeResponse;
  output RDY_fifo_write_writeResponse;

  // actionvalue method m_axi_read_readAddr
  input  EN_m_axi_read_readAddr;
  output [31 : 0] m_axi_read_readAddr;
  output RDY_m_axi_read_readAddr;

  // value method m_axi_read_readBurstLen
  output [3 : 0] m_axi_read_readBurstLen;
  output RDY_m_axi_read_readBurstLen;

  // value method m_axi_read_readBurstWidth
  output [2 : 0] m_axi_read_readBurstWidth;
  output RDY_m_axi_read_readBurstWidth;

  // value method m_axi_read_readBurstType
  output [1 : 0] m_axi_read_readBurstType;
  output RDY_m_axi_read_readBurstType;

  // value method m_axi_read_readBurstProt
  output [1 : 0] m_axi_read_readBurstProt;
  output RDY_m_axi_read_readBurstProt;

  // value method m_axi_read_readBurstCache
  output [2 : 0] m_axi_read_readBurstCache;
  output RDY_m_axi_read_readBurstCache;

  // value method m_axi_read_readId
  output m_axi_read_readId;
  output RDY_m_axi_read_readId;

  // action method m_axi_read_readData
  input  [63 : 0] m_axi_read_readData_data;
  input  [1 : 0] m_axi_read_readData_resp;
  input  m_axi_read_readData_last;
  input  m_axi_read_readData_id;
  input  EN_m_axi_read_readData;
  output RDY_m_axi_read_readData;

  // actionvalue method m_axi_write_writeAddr
  input  EN_m_axi_write_writeAddr;
  output [31 : 0] m_axi_write_writeAddr;
  output RDY_m_axi_write_writeAddr;

  // value method m_axi_write_writeBurstLen
  output [3 : 0] m_axi_write_writeBurstLen;
  output RDY_m_axi_write_writeBurstLen;

  // value method m_axi_write_writeBurstWidth
  output [2 : 0] m_axi_write_writeBurstWidth;
  output RDY_m_axi_write_writeBurstWidth;

  // value method m_axi_write_writeBurstType
  output [1 : 0] m_axi_write_writeBurstType;
  output RDY_m_axi_write_writeBurstType;

  // value method m_axi_write_writeBurstProt
  output [1 : 0] m_axi_write_writeBurstProt;
  output RDY_m_axi_write_writeBurstProt;

  // value method m_axi_write_writeBurstCache
  output [2 : 0] m_axi_write_writeBurstCache;
  output RDY_m_axi_write_writeBurstCache;

  // value method m_axi_write_writeId
  output m_axi_write_writeId;
  output RDY_m_axi_write_writeId;

  // actionvalue method m_axi_write_writeData
  input  EN_m_axi_write_writeData;
  output [63 : 0] m_axi_write_writeData;
  output RDY_m_axi_write_writeData;

  // value method m_axi_write_writeDataByteEnable
  output [7 : 0] m_axi_write_writeDataByteEnable;
  output RDY_m_axi_write_writeDataByteEnable;

  // value method m_axi_write_writeLastDataBeat
  output m_axi_write_writeLastDataBeat;
  output RDY_m_axi_write_writeLastDataBeat;

  // action method m_axi_write_writeResponse
  input  [1 : 0] m_axi_write_writeResponse_responseCode;
  input  m_axi_write_writeResponse_id;
  input  EN_m_axi_write_writeResponse;
  output RDY_m_axi_write_writeResponse;

  // value method hdmi_hdmi_vsync
  output hdmi_hdmi_vsync;
  output RDY_hdmi_hdmi_vsync;

  // value method hdmi_hdmi_hsync
  output hdmi_hdmi_hsync;
  output RDY_hdmi_hdmi_hsync;

  // value method hdmi_hdmi_de
  output hdmi_hdmi_de;
  output RDY_hdmi_hdmi_de;

  // value method hdmi_hdmi_data
  output [15 : 0] hdmi_hdmi_data;
  output RDY_hdmi_hdmi_data;

  // signals for module outputs
  reg [31 : 0] ctrl_read_readData;
  wire [63 : 0] m_axi_write_writeData;
  wire [31 : 0] fifo_read_readData,
		m_axi_read_readAddr,
		m_axi_write_writeAddr;
  wire [15 : 0] hdmi_hdmi_data;
  wire [7 : 0] m_axi_write_writeDataByteEnable;
  wire [3 : 0] m_axi_read_readBurstLen, m_axi_write_writeBurstLen;
  wire [2 : 0] m_axi_read_readBurstCache,
	       m_axi_read_readBurstWidth,
	       m_axi_write_writeBurstCache,
	       m_axi_write_writeBurstWidth;
  wire [1 : 0] ctrl_write_writeResponse,
	       fifo_write_writeResponse,
	       m_axi_read_readBurstProt,
	       m_axi_read_readBurstType,
	       m_axi_write_writeBurstProt,
	       m_axi_write_writeBurstType;
  wire RDY_ctrl_read_last,
       RDY_ctrl_read_readAddr,
       RDY_ctrl_read_readData,
       RDY_ctrl_write_writeAddr,
       RDY_ctrl_write_writeData,
       RDY_ctrl_write_writeResponse,
       RDY_fifo_read_last,
       RDY_fifo_read_readAddr,
       RDY_fifo_read_readData,
       RDY_fifo_write_writeAddr,
       RDY_fifo_write_writeData,
       RDY_fifo_write_writeResponse,
       RDY_hdmi_hdmi_data,
       RDY_hdmi_hdmi_de,
       RDY_hdmi_hdmi_hsync,
       RDY_hdmi_hdmi_vsync,
       RDY_interrupt,
       RDY_m_axi_read_readAddr,
       RDY_m_axi_read_readBurstCache,
       RDY_m_axi_read_readBurstLen,
       RDY_m_axi_read_readBurstProt,
       RDY_m_axi_read_readBurstType,
       RDY_m_axi_read_readBurstWidth,
       RDY_m_axi_read_readData,
       RDY_m_axi_read_readId,
       RDY_m_axi_write_writeAddr,
       RDY_m_axi_write_writeBurstCache,
       RDY_m_axi_write_writeBurstLen,
       RDY_m_axi_write_writeBurstProt,
       RDY_m_axi_write_writeBurstType,
       RDY_m_axi_write_writeBurstWidth,
       RDY_m_axi_write_writeData,
       RDY_m_axi_write_writeDataByteEnable,
       RDY_m_axi_write_writeId,
       RDY_m_axi_write_writeLastDataBeat,
       RDY_m_axi_write_writeResponse,
       ctrl_read_last,
       fifo_read_last,
       hdmi_hdmi_de,
       hdmi_hdmi_hsync,
       hdmi_hdmi_vsync,
       interrupt,
       m_axi_read_readId,
       m_axi_write_writeId,
       m_axi_write_writeLastDataBeat;

  // inlined wires
  wire [97 : 0] responseFifo_fifo_wDataIn$wget;
  wire [35 : 0] requestFifo_fifo_wDataIn$wget, requestFifo_fifo_wDataOut$wget;
  wire requestFifo_fifo_pwDequeue$whas,
       requestFifo_fifo_pwEnqueue$whas,
       responseFifo_fifo_pwDequeue$whas,
       responseFifo_fifo_pwEnqueue$whas,
       responseFifo_fifo_wDataIn$whas;

  // register blockedRequestsDiscardedReg
  reg [31 : 0] blockedRequestsDiscardedReg;
  wire [31 : 0] blockedRequestsDiscardedReg$D_IN;
  wire blockedRequestsDiscardedReg$EN;

  // register blockedResponsesDiscardedReg
  reg [31 : 0] blockedResponsesDiscardedReg;
  wire [31 : 0] blockedResponsesDiscardedReg$D_IN;
  wire blockedResponsesDiscardedReg$EN;

  // register ctrlReadAddrReg
  reg [11 : 0] ctrlReadAddrReg;
  wire [11 : 0] ctrlReadAddrReg$D_IN;
  wire ctrlReadAddrReg$EN;

  // register ctrlReadBurstCountReg
  reg [7 : 0] ctrlReadBurstCountReg;
  wire [7 : 0] ctrlReadBurstCountReg$D_IN;
  wire ctrlReadBurstCountReg$EN;

  // register ctrlWriteAddrReg
  reg [11 : 0] ctrlWriteAddrReg;
  wire [11 : 0] ctrlWriteAddrReg$D_IN;
  wire ctrlWriteAddrReg$EN;

  // register ctrlWriteBurstCountReg
  reg [7 : 0] ctrlWriteBurstCountReg;
  wire [7 : 0] ctrlWriteBurstCountReg$D_IN;
  wire ctrlWriteBurstCountReg$EN;

  // register fifoReadAddrReg
  reg [11 : 0] fifoReadAddrReg;
  wire [11 : 0] fifoReadAddrReg$D_IN;
  wire fifoReadAddrReg$EN;

  // register fifoReadBurstCountReg
  reg [7 : 0] fifoReadBurstCountReg;
  wire [7 : 0] fifoReadBurstCountReg$D_IN;
  wire fifoReadBurstCountReg$EN;

  // register fifoWriteAddrReg
  reg [11 : 0] fifoWriteAddrReg;
  wire [11 : 0] fifoWriteAddrReg$D_IN;
  wire fifoWriteAddrReg$EN;

  // register fifoWriteBurstCountReg
  reg [7 : 0] fifoWriteBurstCountReg;
  wire [7 : 0] fifoWriteBurstCountReg$D_IN;
  wire fifoWriteBurstCountReg$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register hdmiDisplay_frameBufferEnabled
  reg hdmiDisplay_frameBufferEnabled;
  wire hdmiDisplay_frameBufferEnabled$D_IN, hdmiDisplay_frameBufferEnabled$EN;

  // register hdmiDisplay_frameBuffer_fbc
  reg [68 : 0] hdmiDisplay_frameBuffer_fbc;
  wire [68 : 0] hdmiDisplay_frameBuffer_fbc$D_IN;
  wire hdmiDisplay_frameBuffer_fbc$EN;

  // register hdmiDisplay_frameBuffer_lineAddrReg
  reg [23 : 0] hdmiDisplay_frameBuffer_lineAddrReg;
  wire [23 : 0] hdmiDisplay_frameBuffer_lineAddrReg$D_IN;
  wire hdmiDisplay_frameBuffer_lineAddrReg$EN;

  // register hdmiDisplay_frameBuffer_lineCountReg
  reg [10 : 0] hdmiDisplay_frameBuffer_lineCountReg;
  wire [10 : 0] hdmiDisplay_frameBuffer_lineCountReg$D_IN;
  wire hdmiDisplay_frameBuffer_lineCountReg$EN;

  // register hdmiDisplay_frameBuffer_nextFbc
  reg [68 : 0] hdmiDisplay_frameBuffer_nextFbc;
  wire [68 : 0] hdmiDisplay_frameBuffer_nextFbc$D_IN;
  wire hdmiDisplay_frameBuffer_nextFbc$EN;

  // register hdmiDisplay_frameBuffer_nextent2Enabled
  reg hdmiDisplay_frameBuffer_nextent2Enabled;
  wire hdmiDisplay_frameBuffer_nextent2Enabled$D_IN,
       hdmiDisplay_frameBuffer_nextent2Enabled$EN;

  // register hdmiDisplay_frameBuffer_pixelCountReg
  reg [11 : 0] hdmiDisplay_frameBuffer_pixelCountReg;
  wire [11 : 0] hdmiDisplay_frameBuffer_pixelCountReg$D_IN;
  wire hdmiDisplay_frameBuffer_pixelCountReg$EN;

  // register hdmiDisplay_frameBuffer_pixelCountReg2
  reg [11 : 0] hdmiDisplay_frameBuffer_pixelCountReg2;
  wire [11 : 0] hdmiDisplay_frameBuffer_pixelCountReg2$D_IN;
  wire hdmiDisplay_frameBuffer_pixelCountReg2$EN;

  // register hdmiDisplay_frameBuffer_readAddrReg
  reg [23 : 0] hdmiDisplay_frameBuffer_readAddrReg;
  reg [23 : 0] hdmiDisplay_frameBuffer_readAddrReg$D_IN;
  wire hdmiDisplay_frameBuffer_readAddrReg$EN;

  // register hdmiDisplay_frameBuffer_readLimitReg
  reg [23 : 0] hdmiDisplay_frameBuffer_readLimitReg;
  wire [23 : 0] hdmiDisplay_frameBuffer_readLimitReg$D_IN;
  wire hdmiDisplay_frameBuffer_readLimitReg$EN;

  // register hdmiDisplay_frameBuffer_readingReg
  reg [96 : 0] hdmiDisplay_frameBuffer_readingReg;
  reg [96 : 0] hdmiDisplay_frameBuffer_readingReg$D_IN;
  wire hdmiDisplay_frameBuffer_readingReg$EN;

  // register hdmiDisplay_frameBuffer_runningReg
  reg hdmiDisplay_frameBuffer_runningReg;
  wire hdmiDisplay_frameBuffer_runningReg$D_IN,
       hdmiDisplay_frameBuffer_runningReg$EN;

  // register hdmiDisplay_frameBuffer_segmentLimitReg
  reg [23 : 0] hdmiDisplay_frameBuffer_segmentLimitReg;
  wire [23 : 0] hdmiDisplay_frameBuffer_segmentLimitReg$D_IN;
  wire hdmiDisplay_frameBuffer_segmentLimitReg$EN;

  // register hdmiDisplay_frameBuffer_segmentOffsetReg
  reg [31 : 0] hdmiDisplay_frameBuffer_segmentOffsetReg;
  wire [31 : 0] hdmiDisplay_frameBuffer_segmentOffsetReg$D_IN;
  wire hdmiDisplay_frameBuffer_segmentOffsetReg$EN;

  // register hdmiDisplay_frameBuffer_sglistIndexReg
  reg [7 : 0] hdmiDisplay_frameBuffer_sglistIndexReg;
  wire [7 : 0] hdmiDisplay_frameBuffer_sglistIndexReg$D_IN;
  wire hdmiDisplay_frameBuffer_sglistIndexReg$EN;

  // register hdmiDisplay_frameBuffer_startFrameEnabled
  reg hdmiDisplay_frameBuffer_startFrameEnabled;
  wire hdmiDisplay_frameBuffer_startFrameEnabled$D_IN,
       hdmiDisplay_frameBuffer_startFrameEnabled$EN;

  // register hdmiDisplay_frameBuffer_traceReadingReg
  reg hdmiDisplay_frameBuffer_traceReadingReg;
  wire hdmiDisplay_frameBuffer_traceReadingReg$D_IN,
       hdmiDisplay_frameBuffer_traceReadingReg$EN;

  // register hdmiDisplay_frameCountReg
  reg [31 : 0] hdmiDisplay_frameCountReg;
  wire [31 : 0] hdmiDisplay_frameCountReg$D_IN;
  wire hdmiDisplay_frameCountReg$EN;

  // register hdmiDisplay_hdmiTpg_dataCount
  reg [11 : 0] hdmiDisplay_hdmiTpg_dataCount;
  wire [11 : 0] hdmiDisplay_hdmiTpg_dataCount$D_IN;
  wire hdmiDisplay_hdmiTpg_dataCount$EN;

  // register hdmiDisplay_hdmiTpg_deLineCountMaximum
  reg [10 : 0] hdmiDisplay_hdmiTpg_deLineCountMaximum;
  wire [10 : 0] hdmiDisplay_hdmiTpg_deLineCountMaximum$D_IN;
  wire hdmiDisplay_hdmiTpg_deLineCountMaximum$EN;

  // register hdmiDisplay_hdmiTpg_deLineCountMinimum
  reg [10 : 0] hdmiDisplay_hdmiTpg_deLineCountMinimum;
  wire [10 : 0] hdmiDisplay_hdmiTpg_deLineCountMinimum$D_IN;
  wire hdmiDisplay_hdmiTpg_deLineCountMinimum$EN;

  // register hdmiDisplay_hdmiTpg_dePixelCountMaximum
  reg [11 : 0] hdmiDisplay_hdmiTpg_dePixelCountMaximum;
  wire [11 : 0] hdmiDisplay_hdmiTpg_dePixelCountMaximum$D_IN;
  wire hdmiDisplay_hdmiTpg_dePixelCountMaximum$EN;

  // register hdmiDisplay_hdmiTpg_dePixelCountMinimum
  reg [11 : 0] hdmiDisplay_hdmiTpg_dePixelCountMinimum;
  wire [11 : 0] hdmiDisplay_hdmiTpg_dePixelCountMinimum$D_IN;
  wire hdmiDisplay_hdmiTpg_dePixelCountMinimum$EN;

  // register hdmiDisplay_hdmiTpg_evenOddPixelReg
  reg hdmiDisplay_hdmiTpg_evenOddPixelReg;
  wire hdmiDisplay_hdmiTpg_evenOddPixelReg$D_IN,
       hdmiDisplay_hdmiTpg_evenOddPixelReg$EN;

  // register hdmiDisplay_hdmiTpg_hsyncWidth
  reg [11 : 0] hdmiDisplay_hdmiTpg_hsyncWidth;
  wire [11 : 0] hdmiDisplay_hdmiTpg_hsyncWidth$D_IN;
  wire hdmiDisplay_hdmiTpg_hsyncWidth$EN;

  // register hdmiDisplay_hdmiTpg_lineCount
  reg [10 : 0] hdmiDisplay_hdmiTpg_lineCount;
  wire [10 : 0] hdmiDisplay_hdmiTpg_lineCount$D_IN;
  wire hdmiDisplay_hdmiTpg_lineCount$EN;

  // register hdmiDisplay_hdmiTpg_lineMidpoint
  reg [10 : 0] hdmiDisplay_hdmiTpg_lineMidpoint;
  wire [10 : 0] hdmiDisplay_hdmiTpg_lineMidpoint$D_IN;
  wire hdmiDisplay_hdmiTpg_lineMidpoint$EN;

  // register hdmiDisplay_hdmiTpg_numberOfLines
  reg [10 : 0] hdmiDisplay_hdmiTpg_numberOfLines;
  wire [10 : 0] hdmiDisplay_hdmiTpg_numberOfLines$D_IN;
  wire hdmiDisplay_hdmiTpg_numberOfLines$EN;

  // register hdmiDisplay_hdmiTpg_numberOfPixels
  reg [11 : 0] hdmiDisplay_hdmiTpg_numberOfPixels;
  wire [11 : 0] hdmiDisplay_hdmiTpg_numberOfPixels$D_IN;
  wire hdmiDisplay_hdmiTpg_numberOfPixels$EN;

  // register hdmiDisplay_hdmiTpg_patternReg0
  reg [31 : 0] hdmiDisplay_hdmiTpg_patternReg0;
  wire [31 : 0] hdmiDisplay_hdmiTpg_patternReg0$D_IN;
  wire hdmiDisplay_hdmiTpg_patternReg0$EN;

  // register hdmiDisplay_hdmiTpg_patternRegs
  reg [31 : 0] hdmiDisplay_hdmiTpg_patternRegs;
  wire [31 : 0] hdmiDisplay_hdmiTpg_patternRegs$D_IN;
  wire hdmiDisplay_hdmiTpg_patternRegs$EN;

  // register hdmiDisplay_hdmiTpg_patternRegs_1
  reg [31 : 0] hdmiDisplay_hdmiTpg_patternRegs_1;
  wire [31 : 0] hdmiDisplay_hdmiTpg_patternRegs_1$D_IN;
  wire hdmiDisplay_hdmiTpg_patternRegs_1$EN;

  // register hdmiDisplay_hdmiTpg_patternRegs_2
  reg [31 : 0] hdmiDisplay_hdmiTpg_patternRegs_2;
  wire [31 : 0] hdmiDisplay_hdmiTpg_patternRegs_2$D_IN;
  wire hdmiDisplay_hdmiTpg_patternRegs_2$EN;

  // register hdmiDisplay_hdmiTpg_patternRegs_3
  reg [31 : 0] hdmiDisplay_hdmiTpg_patternRegs_3;
  wire [31 : 0] hdmiDisplay_hdmiTpg_patternRegs_3$D_IN;
  wire hdmiDisplay_hdmiTpg_patternRegs_3$EN;

  // register hdmiDisplay_hdmiTpg_pixelCount
  reg [11 : 0] hdmiDisplay_hdmiTpg_pixelCount;
  wire [11 : 0] hdmiDisplay_hdmiTpg_pixelCount$D_IN;
  wire hdmiDisplay_hdmiTpg_pixelCount$EN;

  // register hdmiDisplay_hdmiTpg_pixelMidpoint
  reg [11 : 0] hdmiDisplay_hdmiTpg_pixelMidpoint;
  wire [11 : 0] hdmiDisplay_hdmiTpg_pixelMidpoint$D_IN;
  wire hdmiDisplay_hdmiTpg_pixelMidpoint$EN;

  // register hdmiDisplay_hdmiTpg_rgb888StageReg
  reg [38 : 0] hdmiDisplay_hdmiTpg_rgb888StageReg;
  wire [38 : 0] hdmiDisplay_hdmiTpg_rgb888StageReg$D_IN;
  wire hdmiDisplay_hdmiTpg_rgb888StageReg$EN;

  // register hdmiDisplay_hdmiTpg_shadowTestPatternEnabled
  reg hdmiDisplay_hdmiTpg_shadowTestPatternEnabled;
  wire hdmiDisplay_hdmiTpg_shadowTestPatternEnabled$D_IN,
       hdmiDisplay_hdmiTpg_shadowTestPatternEnabled$EN;

  // register hdmiDisplay_hdmiTpg_testPatternEnabled
  reg hdmiDisplay_hdmiTpg_testPatternEnabled;
  wire hdmiDisplay_hdmiTpg_testPatternEnabled$D_IN,
       hdmiDisplay_hdmiTpg_testPatternEnabled$EN;

  // register hdmiDisplay_hdmiTpg_vsyncWidth
  reg [10 : 0] hdmiDisplay_hdmiTpg_vsyncWidth;
  wire [10 : 0] hdmiDisplay_hdmiTpg_vsyncWidth$D_IN;
  wire hdmiDisplay_hdmiTpg_vsyncWidth$EN;

  // register hdmiDisplay_hdmiTpg_yuv422StageReg
  reg [18 : 0] hdmiDisplay_hdmiTpg_yuv422StageReg;
  wire [18 : 0] hdmiDisplay_hdmiTpg_yuv422StageReg$D_IN;
  wire hdmiDisplay_hdmiTpg_yuv422StageReg$EN;

  // register hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg
  reg [146 : 0] hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg;
  wire [146 : 0] hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg$D_IN;
  wire hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg$EN;

  // register hdmiDisplay_hdmiTpg_yuv444StageReg
  reg [26 : 0] hdmiDisplay_hdmiTpg_yuv444StageReg;
  wire [26 : 0] hdmiDisplay_hdmiTpg_yuv444StageReg$D_IN;
  wire hdmiDisplay_hdmiTpg_yuv444StageReg$EN;

  // register hdmiDisplay_linesReg
  reg [10 : 0] hdmiDisplay_linesReg;
  wire [10 : 0] hdmiDisplay_linesReg$D_IN;
  wire hdmiDisplay_linesReg$EN;

  // register hdmiDisplay_pixelsReg
  reg [11 : 0] hdmiDisplay_pixelsReg;
  wire [11 : 0] hdmiDisplay_pixelsReg$D_IN;
  wire hdmiDisplay_pixelsReg$EN;

  // register hdmiDisplay_segmentIndexReg
  reg [7 : 0] hdmiDisplay_segmentIndexReg;
  wire [7 : 0] hdmiDisplay_segmentIndexReg$D_IN;
  wire hdmiDisplay_segmentIndexReg$EN;

  // register hdmiDisplay_segmentOffsetReg
  reg [23 : 0] hdmiDisplay_segmentOffsetReg;
  wire [23 : 0] hdmiDisplay_segmentOffsetReg$D_IN;
  wire hdmiDisplay_segmentOffsetReg$EN;

  // register hdmiDisplay_sendVsyncIndication
  reg hdmiDisplay_sendVsyncIndication;
  wire hdmiDisplay_sendVsyncIndication$D_IN,
       hdmiDisplay_sendVsyncIndication$EN;

  // register hdmiDisplay_strideBytesReg
  reg [13 : 0] hdmiDisplay_strideBytesReg;
  wire [13 : 0] hdmiDisplay_strideBytesReg$D_IN;
  wire hdmiDisplay_strideBytesReg$EN;

  // register hdmiDisplay_vsyncPulseCountReg
  reg [31 : 0] hdmiDisplay_vsyncPulseCountReg;
  wire [31 : 0] hdmiDisplay_vsyncPulseCountReg$D_IN;
  wire hdmiDisplay_vsyncPulseCountReg$EN;

  // register hdmiDisplay_waitingForVsync
  reg hdmiDisplay_waitingForVsync;
  wire hdmiDisplay_waitingForVsync$D_IN, hdmiDisplay_waitingForVsync$EN;

  // register interruptCleared
  reg interruptCleared;
  wire interruptCleared$D_IN, interruptCleared$EN;

  // register interruptEnableReg
  reg [31 : 0] interruptEnableReg;
  wire [31 : 0] interruptEnableReg$D_IN;
  wire interruptEnableReg$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register junkReqReg
  reg [31 : 0] junkReqReg;
  wire [31 : 0] junkReqReg$D_IN;
  wire junkReqReg$EN;

  // register overflowCount
  reg [31 : 0] overflowCount;
  wire [31 : 0] overflowCount$D_IN;
  wire overflowCount$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [35 : 0] requestFifo_buff;
  wire [35 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register requestFifo_fifo_rCache
  reg [41 : 0] requestFifo_fifo_rCache;
  wire [41 : 0] requestFifo_fifo_rCache$D_IN;
  wire requestFifo_fifo_rCache$EN;

  // register requestFifo_fifo_rRdPtr
  reg [4 : 0] requestFifo_fifo_rRdPtr;
  wire [4 : 0] requestFifo_fifo_rRdPtr$D_IN;
  wire requestFifo_fifo_rRdPtr$EN;

  // register requestFifo_fifo_rWrPtr
  reg [4 : 0] requestFifo_fifo_rWrPtr;
  wire [4 : 0] requestFifo_fifo_rWrPtr$D_IN;
  wire requestFifo_fifo_rWrPtr$EN;

  // register requestFired
  reg [31 : 0] requestFired;
  wire [31 : 0] requestFired$D_IN;
  wire requestFired$EN;

  // register requestTimeLimitReg
  reg [15 : 0] requestTimeLimitReg;
  wire [15 : 0] requestTimeLimitReg$D_IN;
  wire requestTimeLimitReg$EN;

  // register requestTimerReg
  reg [15 : 0] requestTimerReg;
  wire [15 : 0] requestTimerReg$D_IN;
  wire requestTimerReg$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // register responseFifo_fifo_rCache
  reg [103 : 0] responseFifo_fifo_rCache;
  wire [103 : 0] responseFifo_fifo_rCache$D_IN;
  wire responseFifo_fifo_rCache$EN;

  // register responseFifo_fifo_rRdPtr
  reg [4 : 0] responseFifo_fifo_rRdPtr;
  wire [4 : 0] responseFifo_fifo_rRdPtr$D_IN;
  wire responseFifo_fifo_rRdPtr$EN;

  // register responseFifo_fifo_rWrPtr
  reg [4 : 0] responseFifo_fifo_rWrPtr;
  wire [4 : 0] responseFifo_fifo_rWrPtr$D_IN;
  wire responseFifo_fifo_rWrPtr$EN;

  // register responseFired
  reg [31 : 0] responseFired;
  wire [31 : 0] responseFired$D_IN;
  wire responseFired$EN;

  // register responseTimeLimitReg
  reg [15 : 0] responseTimeLimitReg;
  wire [15 : 0] responseTimeLimitReg$D_IN;
  wire responseTimeLimitReg$EN;

  // register responseTimerReg
  reg [15 : 0] responseTimerReg;
  wire [15 : 0] responseTimerReg$D_IN;
  wire responseTimerReg$EN;

  // register underflowCount
  reg [31 : 0] underflowCount;
  wire [31 : 0] underflowCount$D_IN;
  wire underflowCount$EN;

  // register word0Put
  reg [31 : 0] word0Put;
  wire [31 : 0] word0Put$D_IN;
  wire word0Put$EN;

  // register word1Put
  reg [31 : 0] word1Put;
  wire [31 : 0] word1Put$D_IN;
  wire word1Put$EN;

  // ports of submodule ctrlBrespFifo
  wire [1 : 0] ctrlBrespFifo$D_IN, ctrlBrespFifo$D_OUT;
  wire ctrlBrespFifo$CLR,
       ctrlBrespFifo$DEQ,
       ctrlBrespFifo$EMPTY_N,
       ctrlBrespFifo$ENQ,
       ctrlBrespFifo$FULL_N;

  // ports of submodule fifoBrespFifo
  wire [1 : 0] fifoBrespFifo$D_IN, fifoBrespFifo$D_OUT;
  wire fifoBrespFifo$CLR,
       fifoBrespFifo$DEQ,
       fifoBrespFifo$EMPTY_N,
       fifoBrespFifo$ENQ,
       fifoBrespFifo$FULL_N;

  // ports of submodule hdmiDisplay_commandFifo
  reg [34 : 0] hdmiDisplay_commandFifo$sD_IN;
  wire [34 : 0] hdmiDisplay_commandFifo$dD_OUT;
  wire hdmiDisplay_commandFifo$dDEQ,
       hdmiDisplay_commandFifo$dEMPTY_N,
       hdmiDisplay_commandFifo$sENQ,
       hdmiDisplay_commandFifo$sFULL_N;

  // ports of submodule hdmiDisplay_frameBuffer_sglist_syncBRAMBVI
  wire [87 : 0] hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DIA,
		hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DIB,
		hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOA,
		hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB;
  wire [7 : 0] hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ADDRA,
	       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ADDRB;
  wire hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DRA,
       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DRB,
       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ENA,
       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ENB,
       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$WEA,
       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$WEB;

  // ports of submodule hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI
  wire [63 : 0] hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DIA,
		hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DIB,
		hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DOA;
  wire [11 : 0] hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ADDRA,
		hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ADDRB;
  wire hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DRA,
       hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ENA,
       hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ENB,
       hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$WEA,
       hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$WEB;

  // ports of submodule hdmiDisplay_hdmiTpg_bramOutStageFifo
  wire [38 : 0] hdmiDisplay_hdmiTpg_bramOutStageFifo$D_IN,
		hdmiDisplay_hdmiTpg_bramOutStageFifo$D_OUT;
  wire hdmiDisplay_hdmiTpg_bramOutStageFifo$CLR,
       hdmiDisplay_hdmiTpg_bramOutStageFifo$DEQ,
       hdmiDisplay_hdmiTpg_bramOutStageFifo$EMPTY_N,
       hdmiDisplay_hdmiTpg_bramOutStageFifo$ENQ,
       hdmiDisplay_hdmiTpg_bramOutStageFifo$FULL_N;

  // ports of submodule hdmiDisplay_hdmi_reset
  wire hdmiDisplay_hdmi_reset$OUT_RST;

  // ports of submodule hdmiDisplay_hsyncPulse
  wire hdmiDisplay_hsyncPulse$dPulse,
       hdmiDisplay_hsyncPulse$sEN,
       hdmiDisplay_hsyncPulse$sRDY;

  // ports of submodule hdmiDisplay_translationEntryFifo
  wire [95 : 0] hdmiDisplay_translationEntryFifo$D_IN,
		hdmiDisplay_translationEntryFifo$D_OUT;
  wire hdmiDisplay_translationEntryFifo$CLR,
       hdmiDisplay_translationEntryFifo$DEQ,
       hdmiDisplay_translationEntryFifo$EMPTY_N,
       hdmiDisplay_translationEntryFifo$ENQ,
       hdmiDisplay_translationEntryFifo$FULL_N;

  // ports of submodule hdmiDisplay_vsyncPulse
  wire hdmiDisplay_vsyncPulse$dPulse,
       hdmiDisplay_vsyncPulse$sEN,
       hdmiDisplay_vsyncPulse$sRDY;

  // ports of submodule requestFifo_fifo_memory
  wire [35 : 0] requestFifo_fifo_memory$DIA,
		requestFifo_fifo_memory$DIB,
		requestFifo_fifo_memory$DOB;
  wire [3 : 0] requestFifo_fifo_memory$ADDRA, requestFifo_fifo_memory$ADDRB;
  wire requestFifo_fifo_memory$ENA,
       requestFifo_fifo_memory$ENB,
       requestFifo_fifo_memory$WEA,
       requestFifo_fifo_memory$WEB;

  // ports of submodule responseFifo_fifo_memory
  wire [97 : 0] responseFifo_fifo_memory$DIA,
		responseFifo_fifo_memory$DIB,
		responseFifo_fifo_memory$DOB;
  wire [3 : 0] responseFifo_fifo_memory$ADDRA, responseFifo_fifo_memory$ADDRB;
  wire responseFifo_fifo_memory$ENA,
       responseFifo_fifo_memory$ENB,
       responseFifo_fifo_memory$WEA,
       responseFifo_fifo_memory$WEB;

  // rule scheduling signals
  wire WILL_FIRE_RL_handleaddTranslationEntryrequest,
       WILL_FIRE_RL_handlebeginTranslationTablerequest,
       WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest,
       WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest,
       WILL_FIRE_RL_handlehdmiLinesPixelsrequest,
       WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest,
       WILL_FIRE_RL_handlehdmiStrideBytesrequest,
       WILL_FIRE_RL_handlehdmiSyncWidthsrequest,
       WILL_FIRE_RL_handlesetPatternRegrequest,
       WILL_FIRE_RL_handlestartFrameBufferrequest,
       WILL_FIRE_RL_handlewaitForVsyncrequest,
       WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent,
       WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2,
       WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule,
       WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data,
       WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule,
       WILL_FIRE_RL_hdmiDisplay_hsync,
       WILL_FIRE_RL_hdmiDisplay_vsync,
       WILL_FIRE_RL_translationTableEntryresponse,
       WILL_FIRE_RL_vsyncReceivedresponse;

  // inputs to muxes for submodule ports
  wire [97 : 0] MUX_responseFifo_fifo_wDataIn$wset_1__VAL_1,
		MUX_responseFifo_fifo_wDataIn$wset_1__VAL_2;
  wire [96 : 0] MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_1,
		MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_2,
		MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_3;
  wire [87 : 0] MUX_hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$portAReq_3__VAL_2;
  wire [38 : 0] MUX_hdmiDisplay_hdmiTpg_bramOutStageFifo$enq_1__VAL_1,
		MUX_hdmiDisplay_hdmiTpg_bramOutStageFifo$enq_1__VAL_2;
  wire [34 : 0] MUX_hdmiDisplay_commandFifo$enq_1__VAL_1,
		MUX_hdmiDisplay_commandFifo$enq_1__VAL_3,
		MUX_hdmiDisplay_commandFifo$enq_1__VAL_4,
		MUX_hdmiDisplay_commandFifo$enq_1__VAL_5,
		MUX_hdmiDisplay_commandFifo$enq_1__VAL_6,
		MUX_hdmiDisplay_commandFifo$enq_1__VAL_7;
  wire [23 : 0] MUX_hdmiDisplay_frameBuffer_readAddrReg$write_1__VAL_3,
		MUX_hdmiDisplay_frameBuffer_readLimitReg$write_1__VAL_1;
  wire [15 : 0] MUX_requestTimerReg$write_1__VAL_12;
  wire [11 : 0] MUX_ctrlReadAddrReg$write_1__VAL_2,
		MUX_ctrlWriteAddrReg$write_1__VAL_2,
		MUX_fifoReadAddrReg$write_1__VAL_2,
		MUX_fifoWriteAddrReg$write_1__VAL_2,
		MUX_hdmiDisplay_frameBuffer_pixelCountReg2$write_1__VAL_2,
		MUX_hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$portAReq_2__VAL_1,
		MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__VAL_1,
		MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__VAL_2;
  wire [7 : 0] MUX_ctrlReadBurstCountReg$write_1__VAL_1,
	       MUX_ctrlReadBurstCountReg$write_1__VAL_2,
	       MUX_ctrlWriteBurstCountReg$write_1__VAL_1,
	       MUX_ctrlWriteBurstCountReg$write_1__VAL_2,
	       MUX_fifoReadBurstCountReg$write_1__VAL_1,
	       MUX_fifoReadBurstCountReg$write_1__VAL_2,
	       MUX_fifoWriteBurstCountReg$write_1__VAL_1,
	       MUX_fifoWriteBurstCountReg$write_1__VAL_2,
	       MUX_hdmiDisplay_segmentIndexReg$write_1__VAL_2;
  wire MUX_hdmiDisplay_frameBuffer_lineAddrReg$write_1__SEL_2,
       MUX_hdmiDisplay_frameBuffer_readingReg$write_1__SEL_3,
       MUX_hdmiDisplay_frameBuffer_startFrameEnabled$write_1__SEL_1,
       MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_1,
       MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_2,
       MUX_hdmiDisplay_sendVsyncIndication$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] data__h5985;
  wire [143 : 0] IF_hdmiDisplay_hdmiTpg_rgb888StageReg_78_BIT_3_ETC___d207;
  wire [97 : 0] val__h15581, x__h10144, x__h15819;
  wire [35 : 0] newval__h16201, x__h9146;
  wire [31 : 0] IF_interrupted_12_THEN_1_ELSE_0___d599,
		IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598,
		_107_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Sta_ETC___d199,
		_150_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Sta_ETC___d187,
		_21_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d201,
		_29_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d191,
		_43_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d193,
		_77_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d183,
		_85_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d195,
		result__h14943,
		segmentOffset__h1961,
		segmentOffset__h2402,
		spliced_bits__h2042,
		spliced_bits__h2684,
		x__h14893,
		x__h14895,
		x__h14897,
		x__h15675,
		x__h15827,
		x__h16302,
		y__h14894,
		y__h14896,
		y__h14898;
  wire [23 : 0] IF_hdmiDisplay_hdmiTpg_testPatternEnabled_02_T_ETC___d175,
		lineAddr___1__h7900,
		lineAddr__h7862,
		readLimit___1__h7901,
		readLimit__h7863,
		x__h12850,
		y__h2506;
  wire [19 : 0] length__h12730;
  wire [15 : 0] data__h7484,
		x245_PLUS_hdmiDisplay_hdmiTpg_yuv444Intermedia_ETC__q1,
		x308_PLUS_hdmiDisplay_hdmiTpg_yuv444Intermedia_ETC__q2,
		x363_MINUS_hdmiDisplay_hdmiTpg_yuv444Intermedi_ETC__q3,
		x__h7245,
		x__h7308,
		x__h7310,
		x__h7363,
		x__h7365;
  wire [11 : 0] newPixelCount__h6442, x__h6640;
  wire [10 : 0] IF_hdmiDisplay_hdmiTpg_lineCount_6_EQ_hdmiDisp_ETC___d111,
		lineCount___1__h7902,
		lineCount__h7860,
		newLineCount___1__h6411;
  wire [7 : 0] index__h1818;
  wire [4 : 0] x__h10245, x__h9247;
  wire [1 : 0] _theResult____h5984, result__h6110, x__h6096;
  wire NOT_hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDi_ETC___d95,
       NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127,
       _dor1hdmiDisplay_hdmiTpg_testPatternEnabled$EN_write,
       hdmiDisplay_frameBuffer_readAddrReg_ULE_hdmiDi_ETC___d5,
       hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97,
       hdmiDisplay_hdmiTpg_pixelCount_8_EQ_hdmiDispla_ETC___d589,
       requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331,
       requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596,
       responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600,
       responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585,
       x__h6020,
       x__h6030;

  // value method interrupt
  assign interrupt =
	     interruptEnableReg[0] && !interruptCleared && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // action method ctrl_read_readAddr
  assign RDY_ctrl_read_readAddr = ctrlReadBurstCountReg == 8'd0 ;

  // actionvalue method ctrl_read_readData
  always@(ctrlReadAddrReg or
	  result__h14943 or
	  interruptEnableReg or
	  requestFired or
	  responseFired or
	  underflowCount or
	  overflowCount or
	  x__h14893 or
	  y__h14894 or
	  putWordCount or
	  getWordCount or
	  word0Put or
	  word1Put or
	  junkReqReg or
	  blockedRequestsDiscardedReg or blockedResponsesDiscardedReg)
  begin
    case (ctrlReadAddrReg)
      12'h0: ctrl_read_readData = result__h14943;
      12'h004: ctrl_read_readData = interruptEnableReg;
      12'h008: ctrl_read_readData = 32'd36;
      12'h00C: ctrl_read_readData = 32'd98;
      12'h010: ctrl_read_readData = requestFired;
      12'h014: ctrl_read_readData = responseFired;
      12'h018: ctrl_read_readData = underflowCount;
      12'h01C: ctrl_read_readData = overflowCount;
      12'h020: ctrl_read_readData = x__h14893 | y__h14894;
      12'h024: ctrl_read_readData = putWordCount;
      12'h028: ctrl_read_readData = getWordCount;
      12'h02C: ctrl_read_readData = word0Put;
      12'h030: ctrl_read_readData = word1Put;
      12'h034: ctrl_read_readData = junkReqReg;
      12'h038: ctrl_read_readData = blockedRequestsDiscardedReg;
      12'h03C: ctrl_read_readData = blockedResponsesDiscardedReg;
      default: ctrl_read_readData = 32'h005A05A0;
    endcase
  end
  assign RDY_ctrl_read_readData = ctrlReadBurstCountReg != 8'd0 ;

  // value method ctrl_read_last
  assign ctrl_read_last = ctrlReadBurstCountReg == 8'd1 ;
  assign RDY_ctrl_read_last = 1'd1 ;

  // action method ctrl_write_writeAddr
  assign RDY_ctrl_write_writeAddr = ctrlWriteBurstCountReg == 8'd0 ;

  // action method ctrl_write_writeData
  assign RDY_ctrl_write_writeData =
	     ctrlWriteBurstCountReg != 8'd0 && ctrlBrespFifo$FULL_N ;

  // actionvalue method ctrl_write_writeResponse
  assign ctrl_write_writeResponse = ctrlBrespFifo$D_OUT ;
  assign RDY_ctrl_write_writeResponse = ctrlBrespFifo$EMPTY_N ;

  // action method fifo_read_readAddr
  assign RDY_fifo_read_readAddr = fifoReadBurstCountReg == 8'd0 ;

  // actionvalue method fifo_read_readData
  assign fifo_read_readData =
	     responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ?
	       32'h050A050A :
	       x__h15819[31:0] ;
  assign RDY_fifo_read_readData =
	     fifoReadBurstCountReg != 8'd0 &&
	     !responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ;

  // value method fifo_read_last
  assign fifo_read_last = fifoReadBurstCountReg == 8'd1 ;
  assign RDY_fifo_read_last = 1'd1 ;

  // action method fifo_write_writeAddr
  assign RDY_fifo_write_writeAddr = fifoWriteBurstCountReg == 8'd0 ;

  // action method fifo_write_writeData
  assign RDY_fifo_write_writeData =
	     fifoWriteBurstCountReg != 8'd0 && fifoBrespFifo$FULL_N &&
	     !requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ;

  // actionvalue method fifo_write_writeResponse
  assign fifo_write_writeResponse = fifoBrespFifo$D_OUT ;
  assign RDY_fifo_write_writeResponse = fifoBrespFifo$EMPTY_N ;

  // actionvalue method m_axi_read_readAddr
  assign m_axi_read_readAddr =
	     { 8'd0, hdmiDisplay_frameBuffer_readAddrReg } +
	     hdmiDisplay_frameBuffer_segmentOffsetReg ;
  assign RDY_m_axi_read_readAddr =
	     hdmiDisplay_frameBuffer_runningReg &&
	     hdmiDisplay_frameBuffer_readAddrReg <
	     hdmiDisplay_frameBuffer_readLimitReg &&
	     hdmiDisplay_frameBuffer_readAddrReg_ULE_hdmiDi_ETC___d5 ;

  // value method m_axi_read_readBurstLen
  assign m_axi_read_readBurstLen = 4'd3 ;
  assign RDY_m_axi_read_readBurstLen = 1'd1 ;

  // value method m_axi_read_readBurstWidth
  assign m_axi_read_readBurstWidth = 3'b011 ;
  assign RDY_m_axi_read_readBurstWidth = 1'd1 ;

  // value method m_axi_read_readBurstType
  assign m_axi_read_readBurstType = 2'b01 ;
  assign RDY_m_axi_read_readBurstType = 1'd1 ;

  // value method m_axi_read_readBurstProt
  assign m_axi_read_readBurstProt = 2'b0 ;
  assign RDY_m_axi_read_readBurstProt = 1'd1 ;

  // value method m_axi_read_readBurstCache
  assign m_axi_read_readBurstCache = 3'b011 ;
  assign RDY_m_axi_read_readBurstCache = 1'd1 ;

  // value method m_axi_read_readId
  assign m_axi_read_readId = 1'd0 ;
  assign RDY_m_axi_read_readId = 1'd1 ;

  // action method m_axi_read_readData
  assign RDY_m_axi_read_readData = 1'd1 ;

  // actionvalue method m_axi_write_writeAddr
  assign m_axi_write_writeAddr = 32'd0 ;
  assign RDY_m_axi_write_writeAddr = 1'd0 ;

  // value method m_axi_write_writeBurstLen
  assign m_axi_write_writeBurstLen = 4'd0 ;
  assign RDY_m_axi_write_writeBurstLen = 1'd1 ;

  // value method m_axi_write_writeBurstWidth
  assign m_axi_write_writeBurstWidth = 3'b011 ;
  assign RDY_m_axi_write_writeBurstWidth = 1'd1 ;

  // value method m_axi_write_writeBurstType
  assign m_axi_write_writeBurstType = 2'b01 ;
  assign RDY_m_axi_write_writeBurstType = 1'd1 ;

  // value method m_axi_write_writeBurstProt
  assign m_axi_write_writeBurstProt = 2'b0 ;
  assign RDY_m_axi_write_writeBurstProt = 1'd1 ;

  // value method m_axi_write_writeBurstCache
  assign m_axi_write_writeBurstCache = 3'b011 ;
  assign RDY_m_axi_write_writeBurstCache = 1'd1 ;

  // value method m_axi_write_writeId
  assign m_axi_write_writeId = 1'd0 ;
  assign RDY_m_axi_write_writeId = 1'd1 ;

  // actionvalue method m_axi_write_writeData
  assign m_axi_write_writeData = 64'd0 ;
  assign RDY_m_axi_write_writeData = 1'd1 ;

  // value method m_axi_write_writeDataByteEnable
  assign m_axi_write_writeDataByteEnable = 8'd255 ;
  assign RDY_m_axi_write_writeDataByteEnable = 1'd1 ;

  // value method m_axi_write_writeLastDataBeat
  assign m_axi_write_writeLastDataBeat = 1'd0 ;
  assign RDY_m_axi_write_writeLastDataBeat = 1'd1 ;

  // action method m_axi_write_writeResponse
  assign RDY_m_axi_write_writeResponse = 1'd1 ;

  // value method hdmi_hdmi_vsync
  assign hdmi_hdmi_vsync = hdmiDisplay_hdmiTpg_yuv422StageReg[18] ;
  assign RDY_hdmi_hdmi_vsync = 1'd1 ;

  // value method hdmi_hdmi_hsync
  assign hdmi_hdmi_hsync = hdmiDisplay_hdmiTpg_yuv422StageReg[17] ;
  assign RDY_hdmi_hdmi_hsync = 1'd1 ;

  // value method hdmi_hdmi_de
  assign hdmi_hdmi_de = hdmiDisplay_hdmiTpg_yuv422StageReg[16] ;
  assign RDY_hdmi_hdmi_de = 1'd1 ;

  // value method hdmi_hdmi_data
  assign hdmi_hdmi_data = hdmiDisplay_hdmiTpg_yuv422StageReg[15:0] ;
  assign RDY_hdmi_hdmi_data = 1'd1 ;

  // submodule ctrlBrespFifo
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ctrlBrespFifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ctrlBrespFifo$D_IN),
							.ENQ(ctrlBrespFifo$ENQ),
							.DEQ(ctrlBrespFifo$DEQ),
							.CLR(ctrlBrespFifo$CLR),
							.D_OUT(ctrlBrespFifo$D_OUT),
							.FULL_N(ctrlBrespFifo$FULL_N),
							.EMPTY_N(ctrlBrespFifo$EMPTY_N));

  // submodule fifoBrespFifo
  FIFO2 #(.width(32'd2), .guarded(32'd1)) fifoBrespFifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(fifoBrespFifo$D_IN),
							.ENQ(fifoBrespFifo$ENQ),
							.DEQ(fifoBrespFifo$DEQ),
							.CLR(fifoBrespFifo$CLR),
							.D_OUT(fifoBrespFifo$D_OUT),
							.FULL_N(fifoBrespFifo$FULL_N),
							.EMPTY_N(fifoBrespFifo$EMPTY_N));

  // submodule hdmiDisplay_commandFifo
  SyncFIFO1 #(.dataWidth(32'd35)) hdmiDisplay_commandFifo(.sCLK(CLK),
							  .dCLK(CLK_hdmi_clk),
							  .sRST(RST_N),
							  .sD_IN(hdmiDisplay_commandFifo$sD_IN),
							  .sENQ(hdmiDisplay_commandFifo$sENQ),
							  .dDEQ(hdmiDisplay_commandFifo$dDEQ),
							  .dD_OUT(hdmiDisplay_commandFifo$dD_OUT),
							  .sFULL_N(hdmiDisplay_commandFifo$sFULL_N),
							  .dEMPTY_N(hdmiDisplay_commandFifo$dEMPTY_N));

  // submodule hdmiDisplay_frameBuffer_sglist_syncBRAMBVI
  NRCCBRAM2 #(.ADDR_WIDTH(32'd8),
	      .DATA_WIDTH(32'd88),
	      .MEMSIZE(32'd256),
	      .PIPELINED(32'd0)) hdmiDisplay_frameBuffer_sglist_syncBRAMBVI(.CLKA(CLK),
									    .CLKB(CLK),
									    .RSTA_N(RST_N),
									    .RSTB_N(RST_N),
									    .ADDRA(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ADDRA),
									    .ADDRB(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ADDRB),
									    .DIA(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DIA),
									    .DIB(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DIB),
									    .WEA(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$WEA),
									    .WEB(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$WEB),
									    .ENA(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ENA),
									    .ENB(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ENB),
									    .DOA(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOA),
									    .DOB(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB),
									    .DRA(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DRA),
									    .DRB(hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DRB));

  // submodule hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI
  NRCCBRAM2 #(.ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd64),
	      .MEMSIZE(32'd4096),
	      .PIPELINED(32'd0)) hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI(.CLKA(CLK_hdmi_clk),
									      .CLKB(CLK),
									      .RSTA_N(hdmiDisplay_hdmi_reset$OUT_RST),
									      .RSTB_N(RST_N),
									      .ADDRA(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ADDRA),
									      .ADDRB(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ADDRB),
									      .DIA(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DIA),
									      .DIB(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DIB),
									      .WEA(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$WEA),
									      .WEB(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$WEB),
									      .ENA(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ENA),
									      .ENB(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ENB),
									      .DOA(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DOA),
									      .DOB(),
									      .DRA(hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DRA),
									      .DRB());

  // submodule hdmiDisplay_hdmiTpg_bramOutStageFifo
  SizedFIFO #(.p1width(32'd39),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) hdmiDisplay_hdmiTpg_bramOutStageFifo(.RST(hdmiDisplay_hdmi_reset$OUT_RST),
								    .CLK(CLK_hdmi_clk),
								    .D_IN(hdmiDisplay_hdmiTpg_bramOutStageFifo$D_IN),
								    .ENQ(hdmiDisplay_hdmiTpg_bramOutStageFifo$ENQ),
								    .DEQ(hdmiDisplay_hdmiTpg_bramOutStageFifo$DEQ),
								    .CLR(hdmiDisplay_hdmiTpg_bramOutStageFifo$CLR),
								    .D_OUT(hdmiDisplay_hdmiTpg_bramOutStageFifo$D_OUT),
								    .FULL_N(hdmiDisplay_hdmiTpg_bramOutStageFifo$FULL_N),
								    .EMPTY_N(hdmiDisplay_hdmiTpg_bramOutStageFifo$EMPTY_N));

  // submodule hdmiDisplay_hdmi_reset
  SyncResetA #(.RSTDELAY(32'd1)) hdmiDisplay_hdmi_reset(.CLK(CLK_hdmi_clk),
							.IN_RST(RST_N),
							.OUT_RST(hdmiDisplay_hdmi_reset$OUT_RST));

  // submodule hdmiDisplay_hsyncPulse
  SyncHandshake hdmiDisplay_hsyncPulse(.sCLK(CLK_hdmi_clk),
				       .dCLK(CLK),
				       .sRST(hdmiDisplay_hdmi_reset$OUT_RST),
				       .sEN(hdmiDisplay_hsyncPulse$sEN),
				       .dPulse(hdmiDisplay_hsyncPulse$dPulse),
				       .sRDY(hdmiDisplay_hsyncPulse$sRDY));

  // submodule hdmiDisplay_translationEntryFifo
  FIFO2 #(.width(32'd96),
	  .guarded(32'd1)) hdmiDisplay_translationEntryFifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(hdmiDisplay_translationEntryFifo$D_IN),
							    .ENQ(hdmiDisplay_translationEntryFifo$ENQ),
							    .DEQ(hdmiDisplay_translationEntryFifo$DEQ),
							    .CLR(hdmiDisplay_translationEntryFifo$CLR),
							    .D_OUT(hdmiDisplay_translationEntryFifo$D_OUT),
							    .FULL_N(hdmiDisplay_translationEntryFifo$FULL_N),
							    .EMPTY_N(hdmiDisplay_translationEntryFifo$EMPTY_N));

  // submodule hdmiDisplay_vsyncPulse
  SyncHandshake hdmiDisplay_vsyncPulse(.sCLK(CLK_hdmi_clk),
				       .dCLK(CLK),
				       .sRST(hdmiDisplay_hdmi_reset$OUT_RST),
				       .sEN(hdmiDisplay_vsyncPulse$sEN),
				       .dPulse(hdmiDisplay_vsyncPulse$dPulse),
				       .sRDY(hdmiDisplay_vsyncPulse$sRDY));

  // submodule requestFifo_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd36),
	  .MEMSIZE(5'd16)) requestFifo_fifo_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(requestFifo_fifo_memory$ADDRA),
						   .ADDRB(requestFifo_fifo_memory$ADDRB),
						   .DIA(requestFifo_fifo_memory$DIA),
						   .DIB(requestFifo_fifo_memory$DIB),
						   .WEA(requestFifo_fifo_memory$WEA),
						   .WEB(requestFifo_fifo_memory$WEB),
						   .ENA(requestFifo_fifo_memory$ENA),
						   .ENB(requestFifo_fifo_memory$ENB),
						   .DOA(),
						   .DOB(requestFifo_fifo_memory$DOB));

  // submodule responseFifo_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd98),
	  .MEMSIZE(5'd16)) responseFifo_fifo_memory(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(responseFifo_fifo_memory$ADDRA),
						    .ADDRB(responseFifo_fifo_memory$ADDRB),
						    .DIA(responseFifo_fifo_memory$DIA),
						    .DIB(responseFifo_fifo_memory$DIB),
						    .WEA(responseFifo_fifo_memory$WEA),
						    .WEB(responseFifo_fifo_memory$WEB),
						    .ENA(responseFifo_fifo_memory$ENA),
						    .ENB(responseFifo_fifo_memory$ENB),
						    .DOA(),
						    .DOB(responseFifo_fifo_memory$DOB));

  // rule RL_vsyncReceivedresponse
  assign WILL_FIRE_RL_vsyncReceivedresponse =
	     !responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585 &&
	     hdmiDisplay_sendVsyncIndication ;

  // rule RL_translationTableEntryresponse
  assign WILL_FIRE_RL_translationTableEntryresponse =
	     !responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585 &&
	     hdmiDisplay_translationEntryFifo$EMPTY_N &&
	     !WILL_FIRE_RL_vsyncReceivedresponse ;

  // rule RL_hdmiDisplay_vsync
  assign WILL_FIRE_RL_hdmiDisplay_vsync =
	     !hdmiDisplay_frameBuffer_startFrameEnabled &&
	     hdmiDisplay_vsyncPulse$dPulse ;

  // rule RL_hdmiDisplay_frameBuffer_nextent
  assign WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent =
	     hdmiDisplay_frameBuffer_readAddrReg != 24'hFFFFFF &&
	     !hdmiDisplay_frameBuffer_readAddrReg_ULE_hdmiDi_ETC___d5 &&
	     !hdmiDisplay_frameBuffer_nextent2Enabled ;

  // rule RL_hdmiDisplay_hsync
  assign WILL_FIRE_RL_hdmiDisplay_hsync =
	     hdmiDisplay_hsyncPulse$dPulse && !EN_m_axi_read_readAddr ;

  // rule RL_hdmiDisplay_frameBuffer_nextent2
  assign WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 =
	     hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DRA &&
	     hdmiDisplay_frameBuffer_nextent2Enabled &&
	     !WILL_FIRE_RL_hdmiDisplay_hsync &&
	     !EN_m_axi_read_readAddr ;

  // rule RL_hdmiDisplay_frameBuffer_startFrameRule
  assign WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule =
	     hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DRB &&
	     hdmiDisplay_frameBuffer_startFrameEnabled ;

  // rule RL_hdmiDisplay_hdmiTpg_data
  assign WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data =
	     hdmiDisplay_hdmiTpg_bramOutStageFifo$FULL_N &&
	     hdmiDisplay_hdmiTpg_testPatternEnabled ;

  // rule RL_hdmiDisplay_hdmiTpg_fbRule
  assign WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule =
	     hdmiDisplay_hdmiTpg_bramOutStageFifo$FULL_N &&
	     !hdmiDisplay_hdmiTpg_testPatternEnabled ;

  // rule RL_handlesetPatternRegrequest
  assign WILL_FIRE_RL_handlesetPatternRegrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd0 ;

  // rule RL_handlestartFrameBufferrequest
  assign WILL_FIRE_RL_handlestartFrameBufferrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd1 ;

  // rule RL_handlewaitForVsyncrequest
  assign WILL_FIRE_RL_handlewaitForVsyncrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd2 ;

  // rule RL_handlehdmiLinesPixelsrequest
  assign WILL_FIRE_RL_handlehdmiLinesPixelsrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd3 ;

  // rule RL_handlehdmiBlankLinesPixelsrequest
  assign WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd4 ;

  // rule RL_handlehdmiStrideBytesrequest
  assign WILL_FIRE_RL_handlehdmiStrideBytesrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd5 ;

  // rule RL_handlehdmiLineCountMinMaxrequest
  assign WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd6 ;

  // rule RL_handlehdmiPixelCountMinMaxrequest
  assign WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd7 ;

  // rule RL_handlehdmiSyncWidthsrequest
  assign WILL_FIRE_RL_handlehdmiSyncWidthsrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd8 ;

  // rule RL_handlebeginTranslationTablerequest
  assign WILL_FIRE_RL_handlebeginTranslationTablerequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd9 ;

  // rule RL_handleaddTranslationEntryrequest
  assign WILL_FIRE_RL_handleaddTranslationEntryrequest =
	     !requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 &&
	     hdmiDisplay_translationEntryFifo$FULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd10 &&
	     !WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent ;

  // inputs to muxes for submodule ports
  assign MUX_hdmiDisplay_frameBuffer_lineAddrReg$write_1__SEL_2 =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg ;
  assign MUX_hdmiDisplay_frameBuffer_readingReg$write_1__SEL_3 =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg &&
	     hdmiDisplay_frameBuffer_readAddrReg == 24'hFFFFFF ;
  assign MUX_hdmiDisplay_frameBuffer_startFrameEnabled$write_1__SEL_1 =
	     WILL_FIRE_RL_hdmiDisplay_vsync &&
	     hdmiDisplay_frameBufferEnabled ;
  assign MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data &&
	     (NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127 &&
	      hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97 ||
	      x__h6030) ;
  assign MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule &&
	     (x__h6030 ||
	      NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127 &&
	      hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97) ;
  assign MUX_hdmiDisplay_sendVsyncIndication$write_1__SEL_1 =
	     WILL_FIRE_RL_hdmiDisplay_vsync && hdmiDisplay_waitingForVsync ;
  assign MUX_ctrlReadAddrReg$write_1__VAL_2 = ctrlReadAddrReg + 12'd4 ;
  assign MUX_ctrlReadBurstCountReg$write_1__VAL_1 =
	     ctrl_read_readAddr_burstLen + 8'd1 ;
  assign MUX_ctrlReadBurstCountReg$write_1__VAL_2 =
	     ctrlReadBurstCountReg - 8'd1 ;
  assign MUX_ctrlWriteAddrReg$write_1__VAL_2 = ctrlWriteAddrReg + 12'd4 ;
  assign MUX_ctrlWriteBurstCountReg$write_1__VAL_1 =
	     ctrl_write_writeAddr_burstLen + 8'd1 ;
  assign MUX_ctrlWriteBurstCountReg$write_1__VAL_2 =
	     ctrlWriteBurstCountReg - 8'd1 ;
  assign MUX_fifoReadAddrReg$write_1__VAL_2 = fifoReadAddrReg + 12'd4 ;
  assign MUX_fifoReadBurstCountReg$write_1__VAL_1 =
	     fifo_read_readAddr_burstLen + 8'd1 ;
  assign MUX_fifoReadBurstCountReg$write_1__VAL_2 =
	     fifoReadBurstCountReg - 8'd1 ;
  assign MUX_fifoWriteAddrReg$write_1__VAL_2 = fifoWriteAddrReg + 12'd4 ;
  assign MUX_fifoWriteBurstCountReg$write_1__VAL_1 =
	     fifo_write_writeAddr_burstLen + 8'd1 ;
  assign MUX_fifoWriteBurstCountReg$write_1__VAL_2 =
	     fifoWriteBurstCountReg - 8'd1 ;
  assign MUX_hdmiDisplay_commandFifo$enq_1__VAL_1 =
	     { 3'd0, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_hdmiDisplay_commandFifo$enq_1__VAL_3 =
	     { 3'd2, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_hdmiDisplay_commandFifo$enq_1__VAL_4 =
	     { 3'd3, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_hdmiDisplay_commandFifo$enq_1__VAL_5 =
	     { 3'd4, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_hdmiDisplay_commandFifo$enq_1__VAL_6 =
	     { 3'd5, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_hdmiDisplay_commandFifo$enq_1__VAL_7 =
	     { 3'd6, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_hdmiDisplay_frameBuffer_pixelCountReg2$write_1__VAL_2 =
	     hdmiDisplay_frameBuffer_pixelCountReg2 + 12'd2 ;
  assign MUX_hdmiDisplay_frameBuffer_readAddrReg$write_1__VAL_3 =
	     hdmiDisplay_frameBuffer_readAddrReg + 24'd32 ;
  assign MUX_hdmiDisplay_frameBuffer_readLimitReg$write_1__VAL_1 =
	     hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] +
	     y__h2506 ;
  assign MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_1 =
	     { 1'd1,
	       segmentOffset__h2402,
	       32'd16777215,
	       spliced_bits__h2684 } ;
  assign MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_2 =
	     { 1'd1,
	       segmentOffset__h1961,
	       8'd0,
	       hdmiDisplay_frameBuffer_readAddrReg,
	       spliced_bits__h2042 } ;
  assign MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_3 =
	     { 1'd1,
	       hdmiDisplay_frameBuffer_segmentOffsetReg,
	       8'd0,
	       lineAddr__h7862,
	       8'd0,
	       hdmiDisplay_frameBuffer_segmentLimitReg } ;
  assign MUX_hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$portAReq_3__VAL_2 =
	     { hdmiDisplay_segmentOffsetReg,
	       x__h12850,
	       requestFifo_fifo_wDataOut$wget[31:12],
	       length__h12730 } ;
  assign MUX_hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$portAReq_2__VAL_1 =
	     { 1'd0, hdmiDisplay_hdmiTpg_dataCount[11:1] } ;
  assign MUX_hdmiDisplay_hdmiTpg_bramOutStageFifo$enq_1__VAL_1 =
	     { x__h6020,
	       x__h6030,
	       NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127 &&
	       hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97,
	       data__h5985[23:0],
	       12'hAAA } ;
  assign MUX_hdmiDisplay_hdmiTpg_bramOutStageFifo$enq_1__VAL_2 =
	     { x__h6020,
	       x__h6030,
	       NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127 &&
	       hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97,
	       24'hAAAAAA,
	       hdmiDisplay_hdmiTpg_dataCount } ;
  assign MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__VAL_1 =
	     (NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127 &&
	      hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97) ?
	       x__h6640 :
	       12'd0 ;
  assign MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__VAL_2 =
	     x__h6030 ? 12'd0 : x__h6640 ;
  assign MUX_hdmiDisplay_segmentIndexReg$write_1__VAL_2 =
	     hdmiDisplay_segmentIndexReg + 8'd1 ;
  assign MUX_requestTimerReg$write_1__VAL_12 = requestTimerReg + 16'd1 ;
  assign MUX_responseFifo_fifo_wDataIn$wset_1__VAL_1 =
	     { 66'h0AAAAAAAAAAAAAAAA, hdmiDisplay_vsyncPulseCountReg } ;
  assign MUX_responseFifo_fifo_wDataIn$wset_1__VAL_2 =
	     { 2'd1, hdmiDisplay_translationEntryFifo$D_OUT } ;

  // inlined wires
  assign requestFifo_fifo_wDataIn$wget =
	     { fifo_write_writeData_data[3:0], requestFifo_buff[35:4] } ;
  assign requestFifo_fifo_wDataOut$wget =
	     (requestFifo_fifo_rCache[41] &&
	      requestFifo_fifo_rCache[40:36] == requestFifo_fifo_rRdPtr) ?
	       requestFifo_fifo_rCache[35:0] :
	       requestFifo_fifo_memory$DOB ;
  assign responseFifo_fifo_wDataIn$wget =
	     WILL_FIRE_RL_vsyncReceivedresponse ?
	       MUX_responseFifo_fifo_wDataIn$wset_1__VAL_1 :
	       MUX_responseFifo_fifo_wDataIn$wset_1__VAL_2 ;
  assign responseFifo_fifo_wDataIn$whas =
	     WILL_FIRE_RL_vsyncReceivedresponse ||
	     WILL_FIRE_RL_translationTableEntryresponse ;
  assign requestFifo_fifo_pwDequeue$whas =
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_handlehdmiSyncWidthsrequest ||
	     WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest ||
	     WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest ||
	     WILL_FIRE_RL_handlehdmiStrideBytesrequest ||
	     WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest ||
	     WILL_FIRE_RL_handlehdmiLinesPixelsrequest ||
	     WILL_FIRE_RL_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_handlesetPatternRegrequest ;
  assign requestFifo_fifo_pwEnqueue$whas =
	     EN_fifo_write_writeData &&
	     !requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 &&
	     requestFifo_count == 32'd1 ;
  assign responseFifo_fifo_pwDequeue$whas =
	     EN_fifo_read_readData &&
	     !responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 &&
	     responseFifo_count == 32'd3 ;
  assign responseFifo_fifo_pwEnqueue$whas =
	     WILL_FIRE_RL_translationTableEntryresponse ||
	     WILL_FIRE_RL_vsyncReceivedresponse ;

  // register blockedRequestsDiscardedReg
  assign blockedRequestsDiscardedReg$D_IN = 32'h0 ;
  assign blockedRequestsDiscardedReg$EN = 1'b0 ;

  // register blockedResponsesDiscardedReg
  assign blockedResponsesDiscardedReg$D_IN = 32'h0 ;
  assign blockedResponsesDiscardedReg$EN = 1'b0 ;

  // register ctrlReadAddrReg
  assign ctrlReadAddrReg$D_IN =
	     EN_ctrl_read_readAddr ?
	       ctrl_read_readAddr_addr[11:0] :
	       MUX_ctrlReadAddrReg$write_1__VAL_2 ;
  assign ctrlReadAddrReg$EN = EN_ctrl_read_readAddr || EN_ctrl_read_readData ;

  // register ctrlReadBurstCountReg
  assign ctrlReadBurstCountReg$D_IN =
	     EN_ctrl_read_readAddr ?
	       MUX_ctrlReadBurstCountReg$write_1__VAL_1 :
	       MUX_ctrlReadBurstCountReg$write_1__VAL_2 ;
  assign ctrlReadBurstCountReg$EN =
	     EN_ctrl_read_readAddr || EN_ctrl_read_readData ;

  // register ctrlWriteAddrReg
  assign ctrlWriteAddrReg$D_IN =
	     EN_ctrl_write_writeAddr ?
	       ctrl_write_writeAddr_addr[11:0] :
	       MUX_ctrlWriteAddrReg$write_1__VAL_2 ;
  assign ctrlWriteAddrReg$EN =
	     EN_ctrl_write_writeAddr || EN_ctrl_write_writeData ;

  // register ctrlWriteBurstCountReg
  assign ctrlWriteBurstCountReg$D_IN =
	     EN_ctrl_write_writeAddr ?
	       MUX_ctrlWriteBurstCountReg$write_1__VAL_1 :
	       MUX_ctrlWriteBurstCountReg$write_1__VAL_2 ;
  assign ctrlWriteBurstCountReg$EN =
	     EN_ctrl_write_writeAddr || EN_ctrl_write_writeData ;

  // register fifoReadAddrReg
  assign fifoReadAddrReg$D_IN =
	     EN_fifo_read_readAddr ?
	       fifo_read_readAddr_addr[11:0] :
	       MUX_fifoReadAddrReg$write_1__VAL_2 ;
  assign fifoReadAddrReg$EN = EN_fifo_read_readAddr || EN_fifo_read_readData ;

  // register fifoReadBurstCountReg
  assign fifoReadBurstCountReg$D_IN =
	     EN_fifo_read_readAddr ?
	       MUX_fifoReadBurstCountReg$write_1__VAL_1 :
	       MUX_fifoReadBurstCountReg$write_1__VAL_2 ;
  assign fifoReadBurstCountReg$EN =
	     EN_fifo_read_readAddr || EN_fifo_read_readData ;

  // register fifoWriteAddrReg
  assign fifoWriteAddrReg$D_IN =
	     EN_fifo_write_writeAddr ?
	       fifo_write_writeAddr_addr[11:0] :
	       MUX_fifoWriteAddrReg$write_1__VAL_2 ;
  assign fifoWriteAddrReg$EN =
	     EN_fifo_write_writeAddr || EN_fifo_write_writeData ;

  // register fifoWriteBurstCountReg
  assign fifoWriteBurstCountReg$D_IN =
	     EN_fifo_write_writeAddr ?
	       MUX_fifoWriteBurstCountReg$write_1__VAL_1 :
	       MUX_fifoWriteBurstCountReg$write_1__VAL_2 ;
  assign fifoWriteBurstCountReg$EN =
	     EN_fifo_write_writeAddr || EN_fifo_write_writeData ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN =
	     EN_fifo_read_readData &&
	     !responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ;

  // register hdmiDisplay_frameBufferEnabled
  assign hdmiDisplay_frameBufferEnabled$D_IN = 1'd1 ;
  assign hdmiDisplay_frameBufferEnabled$EN =
	     WILL_FIRE_RL_handlestartFrameBufferrequest ;

  // register hdmiDisplay_frameBuffer_fbc
  assign hdmiDisplay_frameBuffer_fbc$D_IN = hdmiDisplay_frameBuffer_nextFbc ;
  assign hdmiDisplay_frameBuffer_fbc$EN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_lineAddrReg
  assign hdmiDisplay_frameBuffer_lineAddrReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ?
	       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] :
	       lineAddr__h7862 ;
  assign hdmiDisplay_frameBuffer_lineAddrReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_lineCountReg
  assign hdmiDisplay_frameBuffer_lineCountReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ?
	       hdmiDisplay_frameBuffer_nextFbc[36:26] :
	       lineCount__h7860 ;
  assign hdmiDisplay_frameBuffer_lineCountReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_nextFbc
  assign hdmiDisplay_frameBuffer_nextFbc$D_IN =
	     { requestFifo_fifo_wDataOut$wget[31:0],
	       hdmiDisplay_linesReg,
	       hdmiDisplay_pixelsReg,
	       hdmiDisplay_strideBytesReg } ;
  assign hdmiDisplay_frameBuffer_nextFbc$EN =
	     WILL_FIRE_RL_handlestartFrameBufferrequest ;

  // register hdmiDisplay_frameBuffer_nextent2Enabled
  assign hdmiDisplay_frameBuffer_nextent2Enabled$D_IN =
	     !WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 ;
  assign hdmiDisplay_frameBuffer_nextent2Enabled$EN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent ;

  // register hdmiDisplay_frameBuffer_pixelCountReg
  assign hdmiDisplay_frameBuffer_pixelCountReg$D_IN =
	     hdmiDisplay_frameBuffer_nextFbc[25:14] ;
  assign hdmiDisplay_frameBuffer_pixelCountReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_pixelCountReg2
  assign hdmiDisplay_frameBuffer_pixelCountReg2$D_IN =
	     MUX_hdmiDisplay_frameBuffer_lineAddrReg$write_1__SEL_2 ?
	       12'd0 :
	       MUX_hdmiDisplay_frameBuffer_pixelCountReg2$write_1__VAL_2 ;
  assign hdmiDisplay_frameBuffer_pixelCountReg2$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg ||
	     EN_m_axi_read_readData ;

  // register hdmiDisplay_frameBuffer_readAddrReg
  always@(WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule or
	  MUX_hdmiDisplay_frameBuffer_lineAddrReg$write_1__SEL_2 or
	  lineAddr__h7862 or
	  EN_m_axi_read_readAddr or
	  MUX_hdmiDisplay_frameBuffer_readAddrReg$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule:
	hdmiDisplay_frameBuffer_readAddrReg$D_IN = 24'hFFFFFF;
    MUX_hdmiDisplay_frameBuffer_lineAddrReg$write_1__SEL_2:
	hdmiDisplay_frameBuffer_readAddrReg$D_IN = lineAddr__h7862;
    EN_m_axi_read_readAddr:
	hdmiDisplay_frameBuffer_readAddrReg$D_IN =
	    MUX_hdmiDisplay_frameBuffer_readAddrReg$write_1__VAL_3;
    default: hdmiDisplay_frameBuffer_readAddrReg$D_IN =
		 24'b101010101010101010101010 /* unspecified value */ ;
  endcase
  assign hdmiDisplay_frameBuffer_readAddrReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg ||
	     EN_m_axi_read_readAddr ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_readLimitReg
  assign hdmiDisplay_frameBuffer_readLimitReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ?
	       MUX_hdmiDisplay_frameBuffer_readLimitReg$write_1__VAL_1 :
	       readLimit__h7863 ;
  assign hdmiDisplay_frameBuffer_readLimitReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_readingReg
  always@(WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule or
	  MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_1 or
	  WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 or
	  MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_2 or
	  MUX_hdmiDisplay_frameBuffer_readingReg$write_1__SEL_3 or
	  MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule:
	hdmiDisplay_frameBuffer_readingReg$D_IN =
	    MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_1;
    WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2:
	hdmiDisplay_frameBuffer_readingReg$D_IN =
	    MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_2;
    MUX_hdmiDisplay_frameBuffer_readingReg$write_1__SEL_3:
	hdmiDisplay_frameBuffer_readingReg$D_IN =
	    MUX_hdmiDisplay_frameBuffer_readingReg$write_1__VAL_3;
    default: hdmiDisplay_frameBuffer_readingReg$D_IN =
		 97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign hdmiDisplay_frameBuffer_readingReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg &&
	     hdmiDisplay_frameBuffer_readAddrReg == 24'hFFFFFF ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_runningReg
  assign hdmiDisplay_frameBuffer_runningReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;
  assign hdmiDisplay_frameBuffer_runningReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg &&
	     lineCount__h7860 == 11'd0 ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_segmentLimitReg
  assign hdmiDisplay_frameBuffer_segmentLimitReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ?
	       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[63:40] :
	       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOA[63:40] ;
  assign hdmiDisplay_frameBuffer_segmentLimitReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_segmentOffsetReg
  assign hdmiDisplay_frameBuffer_segmentOffsetReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ?
	       segmentOffset__h2402 :
	       segmentOffset__h1961 ;
  assign hdmiDisplay_frameBuffer_segmentOffsetReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_sglistIndexReg
  assign hdmiDisplay_frameBuffer_sglistIndexReg$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ?
	       hdmiDisplay_frameBuffer_nextFbc[44:37] :
	       index__h1818 ;
  assign hdmiDisplay_frameBuffer_sglistIndexReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent2 ;

  // register hdmiDisplay_frameBuffer_startFrameEnabled
  assign hdmiDisplay_frameBuffer_startFrameEnabled$D_IN =
	     MUX_hdmiDisplay_frameBuffer_startFrameEnabled$write_1__SEL_1 ;
  assign hdmiDisplay_frameBuffer_startFrameEnabled$EN =
	     WILL_FIRE_RL_hdmiDisplay_vsync &&
	     hdmiDisplay_frameBufferEnabled ||
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule ;

  // register hdmiDisplay_frameBuffer_traceReadingReg
  assign hdmiDisplay_frameBuffer_traceReadingReg$D_IN =
	     WILL_FIRE_RL_handlestartFrameBufferrequest ;
  assign hdmiDisplay_frameBuffer_traceReadingReg$EN =
	     WILL_FIRE_RL_hdmiDisplay_hsync &&
	     hdmiDisplay_frameBuffer_runningReg &&
	     lineCount__h7860 == 11'd0 ||
	     WILL_FIRE_RL_handlestartFrameBufferrequest ;

  // register hdmiDisplay_frameCountReg
  assign hdmiDisplay_frameCountReg$D_IN = hdmiDisplay_frameCountReg + 32'd1 ;
  assign hdmiDisplay_frameCountReg$EN =
	     MUX_hdmiDisplay_frameBuffer_startFrameEnabled$write_1__SEL_1 ;

  // register hdmiDisplay_hdmiTpg_dataCount
  assign hdmiDisplay_hdmiTpg_dataCount$D_IN =
	     MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_1 ?
	       MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__VAL_1 :
	       MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__VAL_2 ;
  assign hdmiDisplay_hdmiTpg_dataCount$EN =
	     MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_1 ||
	     MUX_hdmiDisplay_hdmiTpg_dataCount$write_1__SEL_2 ;

  // register hdmiDisplay_hdmiTpg_deLineCountMaximum
  assign hdmiDisplay_hdmiTpg_deLineCountMaximum$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[26:16] ;
  assign hdmiDisplay_hdmiTpg_deLineCountMaximum$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd4 ;

  // register hdmiDisplay_hdmiTpg_deLineCountMinimum
  assign hdmiDisplay_hdmiTpg_deLineCountMinimum$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[10:0] ;
  assign hdmiDisplay_hdmiTpg_deLineCountMinimum$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd4 ;

  // register hdmiDisplay_hdmiTpg_dePixelCountMaximum
  assign hdmiDisplay_hdmiTpg_dePixelCountMaximum$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[27:16] ;
  assign hdmiDisplay_hdmiTpg_dePixelCountMaximum$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd5 ;

  // register hdmiDisplay_hdmiTpg_dePixelCountMinimum
  assign hdmiDisplay_hdmiTpg_dePixelCountMinimum$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[11:0] ;
  assign hdmiDisplay_hdmiTpg_dePixelCountMinimum$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd5 ;

  // register hdmiDisplay_hdmiTpg_evenOddPixelReg
  assign hdmiDisplay_hdmiTpg_evenOddPixelReg$D_IN =
	     !hdmiDisplay_hdmiTpg_evenOddPixelReg ;
  assign hdmiDisplay_hdmiTpg_evenOddPixelReg$EN =
	     hdmiDisplay_hdmiTpg_yuv444StageReg[24] ;

  // register hdmiDisplay_hdmiTpg_hsyncWidth
  assign hdmiDisplay_hdmiTpg_hsyncWidth$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[27:16] ;
  assign hdmiDisplay_hdmiTpg_hsyncWidth$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd0 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd1 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd2 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd3 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd4 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd5 ;

  // register hdmiDisplay_hdmiTpg_lineCount
  assign hdmiDisplay_hdmiTpg_lineCount$D_IN =
	     hdmiDisplay_hdmiTpg_pixelCount_8_EQ_hdmiDispla_ETC___d589 ?
	       IF_hdmiDisplay_hdmiTpg_lineCount_6_EQ_hdmiDisp_ETC___d111 :
	       hdmiDisplay_hdmiTpg_lineCount ;
  assign hdmiDisplay_hdmiTpg_lineCount$EN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data ;

  // register hdmiDisplay_hdmiTpg_lineMidpoint
  assign hdmiDisplay_hdmiTpg_lineMidpoint$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[10:0] +
	     hdmiDisplay_commandFifo$dD_OUT[26:16] >>
	     1 ;
  assign hdmiDisplay_hdmiTpg_lineMidpoint$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd4 ;

  // register hdmiDisplay_hdmiTpg_numberOfLines
  assign hdmiDisplay_hdmiTpg_numberOfLines$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[10:0] ;
  assign hdmiDisplay_hdmiTpg_numberOfLines$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd2 ;

  // register hdmiDisplay_hdmiTpg_numberOfPixels
  assign hdmiDisplay_hdmiTpg_numberOfPixels$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[27:16] ;
  assign hdmiDisplay_hdmiTpg_numberOfPixels$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd2 ;

  // register hdmiDisplay_hdmiTpg_patternReg0
  assign hdmiDisplay_hdmiTpg_patternReg0$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[31:0] ;
  assign hdmiDisplay_hdmiTpg_patternReg0$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd0 ;

  // register hdmiDisplay_hdmiTpg_patternRegs
  assign hdmiDisplay_hdmiTpg_patternRegs$D_IN =
	     hdmiDisplay_hdmiTpg_patternReg0 ;
  assign hdmiDisplay_hdmiTpg_patternRegs$EN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data &&
	     hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // register hdmiDisplay_hdmiTpg_patternRegs_1
  assign hdmiDisplay_hdmiTpg_patternRegs_1$D_IN = 32'h00FF0000 ;
  assign hdmiDisplay_hdmiTpg_patternRegs_1$EN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data &&
	     hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // register hdmiDisplay_hdmiTpg_patternRegs_2
  assign hdmiDisplay_hdmiTpg_patternRegs_2$D_IN = 32'h0000FF00 ;
  assign hdmiDisplay_hdmiTpg_patternRegs_2$EN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data &&
	     hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // register hdmiDisplay_hdmiTpg_patternRegs_3
  assign hdmiDisplay_hdmiTpg_patternRegs_3$D_IN = 32'h000000FF ;
  assign hdmiDisplay_hdmiTpg_patternRegs_3$EN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data &&
	     hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // register hdmiDisplay_hdmiTpg_pixelCount
  assign hdmiDisplay_hdmiTpg_pixelCount$D_IN =
	     hdmiDisplay_hdmiTpg_pixelCount_8_EQ_hdmiDispla_ETC___d589 ?
	       12'd0 :
	       newPixelCount__h6442 ;
  assign hdmiDisplay_hdmiTpg_pixelCount$EN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data ;

  // register hdmiDisplay_hdmiTpg_pixelMidpoint
  assign hdmiDisplay_hdmiTpg_pixelMidpoint$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[11:0] +
	     hdmiDisplay_commandFifo$dD_OUT[27:16] >>
	     1 ;
  assign hdmiDisplay_hdmiTpg_pixelMidpoint$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd5 ;

  // register hdmiDisplay_hdmiTpg_rgb888StageReg
  assign hdmiDisplay_hdmiTpg_rgb888StageReg$D_IN =
	     { hdmiDisplay_hdmiTpg_bramOutStageFifo$D_OUT[38:36],
	       IF_hdmiDisplay_hdmiTpg_testPatternEnabled_02_T_ETC___d175,
	       hdmiDisplay_hdmiTpg_bramOutStageFifo$D_OUT[11:0] } ;
  assign hdmiDisplay_hdmiTpg_rgb888StageReg$EN =
	     hdmiDisplay_hdmiTpg_bramOutStageFifo$EMPTY_N &&
	     hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DRA ;

  // register hdmiDisplay_hdmiTpg_shadowTestPatternEnabled
  assign hdmiDisplay_hdmiTpg_shadowTestPatternEnabled$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[0] ;
  assign hdmiDisplay_hdmiTpg_shadowTestPatternEnabled$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd1 ;

  // register hdmiDisplay_hdmiTpg_testPatternEnabled
  assign hdmiDisplay_hdmiTpg_testPatternEnabled$D_IN =
	     hdmiDisplay_hdmiTpg_shadowTestPatternEnabled ;
  assign hdmiDisplay_hdmiTpg_testPatternEnabled$EN =
	     _dor1hdmiDisplay_hdmiTpg_testPatternEnabled$EN_write &&
	     hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // register hdmiDisplay_hdmiTpg_vsyncWidth
  assign hdmiDisplay_hdmiTpg_vsyncWidth$D_IN =
	     hdmiDisplay_commandFifo$dD_OUT[10:0] ;
  assign hdmiDisplay_hdmiTpg_vsyncWidth$EN =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd0 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd1 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd2 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd3 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd4 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd5 ;

  // register hdmiDisplay_hdmiTpg_yuv422StageReg
  assign hdmiDisplay_hdmiTpg_yuv422StageReg$D_IN =
	     { hdmiDisplay_hdmiTpg_yuv444StageReg[26:24], data__h7484 } ;
  assign hdmiDisplay_hdmiTpg_yuv422StageReg$EN = 1'd1 ;

  // register hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg
  assign hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg$D_IN =
	     { hdmiDisplay_hdmiTpg_rgb888StageReg[38:36],
	       IF_hdmiDisplay_hdmiTpg_rgb888StageReg_78_BIT_3_ETC___d207 } ;
  assign hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg$EN = 1'd1 ;

  // register hdmiDisplay_hdmiTpg_yuv444StageReg
  assign hdmiDisplay_hdmiTpg_yuv444StageReg$D_IN =
	     { hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[146:144],
	       hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[144] ?
		 { x245_PLUS_hdmiDisplay_hdmiTpg_yuv444Intermedia_ETC__q1[15:8],
		   x308_PLUS_hdmiDisplay_hdmiTpg_yuv444Intermedia_ETC__q2[15:8],
		   x363_MINUS_hdmiDisplay_hdmiTpg_yuv444Intermedi_ETC__q3[15:8] } :
		 24'd0 } ;
  assign hdmiDisplay_hdmiTpg_yuv444StageReg$EN = 1'd1 ;

  // register hdmiDisplay_linesReg
  assign hdmiDisplay_linesReg$D_IN = requestFifo_fifo_wDataOut$wget[10:0] ;
  assign hdmiDisplay_linesReg$EN = WILL_FIRE_RL_handlehdmiLinesPixelsrequest ;

  // register hdmiDisplay_pixelsReg
  assign hdmiDisplay_pixelsReg$D_IN = requestFifo_fifo_wDataOut$wget[27:16] ;
  assign hdmiDisplay_pixelsReg$EN =
	     WILL_FIRE_RL_handlehdmiLinesPixelsrequest ;

  // register hdmiDisplay_segmentIndexReg
  assign hdmiDisplay_segmentIndexReg$D_IN =
	     WILL_FIRE_RL_handlebeginTranslationTablerequest ?
	       requestFifo_fifo_wDataOut$wget[7:0] :
	       MUX_hdmiDisplay_segmentIndexReg$write_1__VAL_2 ;
  assign hdmiDisplay_segmentIndexReg$EN =
	     WILL_FIRE_RL_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ;

  // register hdmiDisplay_segmentOffsetReg
  assign hdmiDisplay_segmentOffsetReg$D_IN =
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ?
	       x__h12850 :
	       24'd0 ;
  assign hdmiDisplay_segmentOffsetReg$EN =
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_handlebeginTranslationTablerequest ;

  // register hdmiDisplay_sendVsyncIndication
  assign hdmiDisplay_sendVsyncIndication$D_IN =
	     MUX_hdmiDisplay_sendVsyncIndication$write_1__SEL_1 ;
  assign hdmiDisplay_sendVsyncIndication$EN =
	     WILL_FIRE_RL_hdmiDisplay_vsync && hdmiDisplay_waitingForVsync ||
	     WILL_FIRE_RL_vsyncReceivedresponse ;

  // register hdmiDisplay_strideBytesReg
  assign hdmiDisplay_strideBytesReg$D_IN =
	     requestFifo_fifo_wDataOut$wget[13:0] ;
  assign hdmiDisplay_strideBytesReg$EN =
	     WILL_FIRE_RL_handlehdmiStrideBytesrequest ;

  // register hdmiDisplay_vsyncPulseCountReg
  assign hdmiDisplay_vsyncPulseCountReg$D_IN =
	     hdmiDisplay_vsyncPulseCountReg + 32'd1 ;
  assign hdmiDisplay_vsyncPulseCountReg$EN = WILL_FIRE_RL_hdmiDisplay_vsync ;

  // register hdmiDisplay_waitingForVsync
  assign hdmiDisplay_waitingForVsync$D_IN =
	     WILL_FIRE_RL_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_handlestartFrameBufferrequest ;
  assign hdmiDisplay_waitingForVsync$EN =
	     WILL_FIRE_RL_hdmiDisplay_vsync && hdmiDisplay_waitingForVsync ||
	     WILL_FIRE_RL_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_handlestartFrameBufferrequest ;

  // register interruptCleared
  assign interruptCleared$D_IN = !(!interrupted) ;
  assign interruptCleared$EN =
	     EN_ctrl_write_writeData && ctrlWriteAddrReg == 12'h0 &&
	     ctrl_write_writeData_data[0] &&
	     interrupted ||
	     !interrupted ;

  // register interruptEnableReg
  assign interruptEnableReg$D_IN = ctrl_write_writeData_data ;
  assign interruptEnableReg$EN =
	     EN_ctrl_write_writeData && ctrlWriteAddrReg == 12'h004 ;

  // register interrupted
  assign interrupted$D_IN =
	     !responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ;
  assign interrupted$EN = 1'd1 ;

  // register junkReqReg
  assign junkReqReg$D_IN = 32'h0 ;
  assign junkReqReg$EN = 1'b0 ;

  // register overflowCount
  assign overflowCount$D_IN = overflowCount + 32'd1 ;
  assign overflowCount$EN =
	     EN_fifo_write_writeData &&
	     requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN =
	     EN_fifo_write_writeData &&
	     !requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { fifo_write_writeData_data, requestFifo_buff[35:32] } :
	       newval__h16201 ;
  assign requestFifo_buff$EN =
	     EN_fifo_write_writeData &&
	     !requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h16302 ;
  assign requestFifo_count$EN =
	     EN_fifo_write_writeData &&
	     !requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ;

  // register requestFifo_fifo_rCache
  assign requestFifo_fifo_rCache$D_IN =
	     { 1'd1, requestFifo_fifo_rWrPtr, x__h9146 } ;
  assign requestFifo_fifo_rCache$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register requestFifo_fifo_rRdPtr
  assign requestFifo_fifo_rRdPtr$D_IN = x__h9247 ;
  assign requestFifo_fifo_rRdPtr$EN = requestFifo_fifo_pwDequeue$whas ;

  // register requestFifo_fifo_rWrPtr
  assign requestFifo_fifo_rWrPtr$D_IN = requestFifo_fifo_rWrPtr + 5'd1 ;
  assign requestFifo_fifo_rWrPtr$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register requestFired
  assign requestFired$D_IN = requestFired + 32'd1 ;
  assign requestFired$EN = requestFifo_fifo_pwDequeue$whas ;

  // register requestTimeLimitReg
  assign requestTimeLimitReg$D_IN = 16'h0 ;
  assign requestTimeLimitReg$EN = 1'b0 ;

  // register requestTimerReg
  assign requestTimerReg$D_IN =
	     (WILL_FIRE_RL_handleaddTranslationEntryrequest ||
	      WILL_FIRE_RL_handlebeginTranslationTablerequest ||
	      WILL_FIRE_RL_handlehdmiSyncWidthsrequest ||
	      WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest ||
	      WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest ||
	      WILL_FIRE_RL_handlehdmiStrideBytesrequest ||
	      WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest ||
	      WILL_FIRE_RL_handlehdmiLinesPixelsrequest ||
	      WILL_FIRE_RL_handlewaitForVsyncrequest ||
	      WILL_FIRE_RL_handlestartFrameBufferrequest ||
	      WILL_FIRE_RL_handlesetPatternRegrequest) ?
	       16'd0 :
	       MUX_requestTimerReg$write_1__VAL_12 ;
  assign requestTimerReg$EN =
	     !requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ||
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_handlehdmiSyncWidthsrequest ||
	     WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest ||
	     WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest ||
	     WILL_FIRE_RL_handlehdmiStrideBytesrequest ||
	     WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest ||
	     WILL_FIRE_RL_handlehdmiLinesPixelsrequest ||
	     WILL_FIRE_RL_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_handlesetPatternRegrequest ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     (responseFifo_count == 32'd3) ? 32'd0 : x__h15675 ;
  assign responseFifo_count$EN =
	     EN_fifo_read_readData &&
	     !responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ;

  // register responseFifo_fifo_rCache
  assign responseFifo_fifo_rCache$D_IN =
	     { 1'd1, responseFifo_fifo_rWrPtr, x__h10144 } ;
  assign responseFifo_fifo_rCache$EN = responseFifo_fifo_pwEnqueue$whas ;

  // register responseFifo_fifo_rRdPtr
  assign responseFifo_fifo_rRdPtr$D_IN = x__h10245 ;
  assign responseFifo_fifo_rRdPtr$EN = responseFifo_fifo_pwDequeue$whas ;

  // register responseFifo_fifo_rWrPtr
  assign responseFifo_fifo_rWrPtr$D_IN = responseFifo_fifo_rWrPtr + 5'd1 ;
  assign responseFifo_fifo_rWrPtr$EN = responseFifo_fifo_pwEnqueue$whas ;

  // register responseFired
  assign responseFired$D_IN = responseFired + 32'd1 ;
  assign responseFired$EN = responseFifo_fifo_pwEnqueue$whas ;

  // register responseTimeLimitReg
  assign responseTimeLimitReg$D_IN = 16'h0 ;
  assign responseTimeLimitReg$EN = 1'b0 ;

  // register responseTimerReg
  assign responseTimerReg$D_IN = responseTimerReg + 16'd1 ;
  assign responseTimerReg$EN =
	     responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585 ;

  // register underflowCount
  assign underflowCount$D_IN = underflowCount + 32'd1 ;
  assign underflowCount$EN =
	     EN_fifo_read_readData &&
	     responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ;

  // register word0Put
  assign word0Put$D_IN = word1Put ;
  assign word0Put$EN = EN_fifo_write_writeData ;

  // register word1Put
  assign word1Put$D_IN = fifo_write_writeData_data ;
  assign word1Put$EN = EN_fifo_write_writeData ;

  // submodule ctrlBrespFifo
  assign ctrlBrespFifo$D_IN = 2'd0 ;
  assign ctrlBrespFifo$ENQ = EN_ctrl_write_writeData ;
  assign ctrlBrespFifo$DEQ = EN_ctrl_write_writeResponse ;
  assign ctrlBrespFifo$CLR = 1'b0 ;

  // submodule fifoBrespFifo
  assign fifoBrespFifo$D_IN = 2'd0 ;
  assign fifoBrespFifo$ENQ = EN_fifo_write_writeData ;
  assign fifoBrespFifo$DEQ = EN_fifo_write_writeResponse ;
  assign fifoBrespFifo$CLR = 1'b0 ;

  // submodule hdmiDisplay_commandFifo
  always@(WILL_FIRE_RL_handlesetPatternRegrequest or
	  MUX_hdmiDisplay_commandFifo$enq_1__VAL_1 or
	  WILL_FIRE_RL_handlestartFrameBufferrequest or
	  WILL_FIRE_RL_handlehdmiLinesPixelsrequest or
	  MUX_hdmiDisplay_commandFifo$enq_1__VAL_3 or
	  WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest or
	  MUX_hdmiDisplay_commandFifo$enq_1__VAL_4 or
	  WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest or
	  MUX_hdmiDisplay_commandFifo$enq_1__VAL_5 or
	  WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest or
	  MUX_hdmiDisplay_commandFifo$enq_1__VAL_6 or
	  WILL_FIRE_RL_handlehdmiSyncWidthsrequest or
	  MUX_hdmiDisplay_commandFifo$enq_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_handlesetPatternRegrequest:
	  hdmiDisplay_commandFifo$sD_IN =
	      MUX_hdmiDisplay_commandFifo$enq_1__VAL_1;
      WILL_FIRE_RL_handlestartFrameBufferrequest:
	  hdmiDisplay_commandFifo$sD_IN = 35'h155555554;
      WILL_FIRE_RL_handlehdmiLinesPixelsrequest:
	  hdmiDisplay_commandFifo$sD_IN =
	      MUX_hdmiDisplay_commandFifo$enq_1__VAL_3;
      WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest:
	  hdmiDisplay_commandFifo$sD_IN =
	      MUX_hdmiDisplay_commandFifo$enq_1__VAL_4;
      WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest:
	  hdmiDisplay_commandFifo$sD_IN =
	      MUX_hdmiDisplay_commandFifo$enq_1__VAL_5;
      WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest:
	  hdmiDisplay_commandFifo$sD_IN =
	      MUX_hdmiDisplay_commandFifo$enq_1__VAL_6;
      WILL_FIRE_RL_handlehdmiSyncWidthsrequest:
	  hdmiDisplay_commandFifo$sD_IN =
	      MUX_hdmiDisplay_commandFifo$enq_1__VAL_7;
      default: hdmiDisplay_commandFifo$sD_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hdmiDisplay_commandFifo$sENQ =
	     WILL_FIRE_RL_handlesetPatternRegrequest ||
	     WILL_FIRE_RL_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_handlehdmiLinesPixelsrequest ||
	     WILL_FIRE_RL_handlehdmiBlankLinesPixelsrequest ||
	     WILL_FIRE_RL_handlehdmiLineCountMinMaxrequest ||
	     WILL_FIRE_RL_handlehdmiPixelCountMinMaxrequest ||
	     WILL_FIRE_RL_handlehdmiSyncWidthsrequest ;
  assign hdmiDisplay_commandFifo$dDEQ =
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd0 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd1 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd2 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd3 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd4 &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] != 3'd5 ||
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd5 ||
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd4 ||
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd3 ||
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd2 ||
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd1 ||
	     hdmiDisplay_commandFifo$dEMPTY_N &&
	     hdmiDisplay_commandFifo$dD_OUT[34:32] == 3'd0 ;

  // submodule hdmiDisplay_frameBuffer_sglist_syncBRAMBVI
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ADDRA =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent ?
	       index__h1818 :
	       hdmiDisplay_segmentIndexReg ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ADDRB =
	     hdmiDisplay_frameBuffer_nextFbc[44:37] ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DIA =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent ?
	       88'd0 :
	       MUX_hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$portAReq_3__VAL_2 ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DIB = 88'd0 ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$WEA =
	     !WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$WEB = 1'd0 ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ENA =
	     WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent ||
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ;
  assign hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$ENB =
	     MUX_hdmiDisplay_frameBuffer_startFrameEnabled$write_1__SEL_1 ;

  // submodule hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ADDRA =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule ?
	       MUX_hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$portAReq_2__VAL_1 :
	       12'd0 ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ADDRB =
	     hdmiDisplay_frameBuffer_pixelCountReg2 >> 1 ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DIA = 64'd0 ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DIB =
	     m_axi_read_readData_data ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$WEA = 1'd0 ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$WEB = 1'd1 ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ENA =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data ;
  assign hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$ENB =
	     EN_m_axi_read_readData ;

  // submodule hdmiDisplay_hdmiTpg_bramOutStageFifo
  assign hdmiDisplay_hdmiTpg_bramOutStageFifo$D_IN =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data ?
	       MUX_hdmiDisplay_hdmiTpg_bramOutStageFifo$enq_1__VAL_1 :
	       MUX_hdmiDisplay_hdmiTpg_bramOutStageFifo$enq_1__VAL_2 ;
  assign hdmiDisplay_hdmiTpg_bramOutStageFifo$ENQ =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data ||
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule ;
  assign hdmiDisplay_hdmiTpg_bramOutStageFifo$DEQ =
	     hdmiDisplay_hdmiTpg_bramOutStageFifo$EMPTY_N &&
	     hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DRA ;
  assign hdmiDisplay_hdmiTpg_bramOutStageFifo$CLR = 1'b0 ;

  // submodule hdmiDisplay_hsyncPulse
  assign hdmiDisplay_hsyncPulse$sEN =
	     hdmiDisplay_hsyncPulse$sRDY &&
	     NOT_hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDi_ETC___d95 &&
	     hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // submodule hdmiDisplay_translationEntryFifo
  assign hdmiDisplay_translationEntryFifo$D_IN =
	     { 12'd0,
	       requestFifo_fifo_wDataOut$wget[31:12],
	       8'd0,
	       hdmiDisplay_segmentOffsetReg,
	       20'd0,
	       requestFifo_fifo_wDataOut$wget[11:0] } ;
  assign hdmiDisplay_translationEntryFifo$ENQ =
	     WILL_FIRE_RL_handleaddTranslationEntryrequest ;
  assign hdmiDisplay_translationEntryFifo$DEQ =
	     WILL_FIRE_RL_translationTableEntryresponse ;
  assign hdmiDisplay_translationEntryFifo$CLR = 1'b0 ;

  // submodule hdmiDisplay_vsyncPulse
  assign hdmiDisplay_vsyncPulse$sEN =
	     hdmiDisplay_vsyncPulse$sRDY &&
	     hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	     hdmiDisplay_hdmiTpg_pixelCount == 12'd0 ;

  // submodule requestFifo_fifo_memory
  assign requestFifo_fifo_memory$ADDRA = requestFifo_fifo_rWrPtr[3:0] ;
  assign requestFifo_fifo_memory$ADDRB =
	     requestFifo_fifo_pwDequeue$whas ?
	       x__h9247[3:0] :
	       requestFifo_fifo_rRdPtr[3:0] ;
  assign requestFifo_fifo_memory$DIA = x__h9146 ;
  assign requestFifo_fifo_memory$DIB =
	     36'hAAAAAAAAA /* unspecified value */  ;
  assign requestFifo_fifo_memory$WEA = requestFifo_fifo_pwEnqueue$whas ;
  assign requestFifo_fifo_memory$WEB = 1'd0 ;
  assign requestFifo_fifo_memory$ENA = 1'd1 ;
  assign requestFifo_fifo_memory$ENB = 1'd1 ;

  // submodule responseFifo_fifo_memory
  assign responseFifo_fifo_memory$ADDRA = responseFifo_fifo_rWrPtr[3:0] ;
  assign responseFifo_fifo_memory$ADDRB =
	     responseFifo_fifo_pwDequeue$whas ?
	       x__h10245[3:0] :
	       responseFifo_fifo_rRdPtr[3:0] ;
  assign responseFifo_fifo_memory$DIA = x__h10144 ;
  assign responseFifo_fifo_memory$DIB =
	     98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign responseFifo_fifo_memory$WEA = responseFifo_fifo_pwEnqueue$whas ;
  assign responseFifo_fifo_memory$WEB = 1'd0 ;
  assign responseFifo_fifo_memory$ENA = 1'd1 ;
  assign responseFifo_fifo_memory$ENB = 1'd1 ;

  // remaining internal signals
  assign IF_hdmiDisplay_hdmiTpg_lineCount_6_EQ_hdmiDisp_ETC___d111 =
	     (hdmiDisplay_hdmiTpg_lineCount ==
	      hdmiDisplay_hdmiTpg_numberOfLines - 11'd1) ?
	       11'd0 :
	       newLineCount___1__h6411 ;
  assign IF_hdmiDisplay_hdmiTpg_rgb888StageReg_78_BIT_3_ETC___d207 =
	     hdmiDisplay_hdmiTpg_rgb888StageReg[36] ?
	       { _77_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d183[15:0],
		 _150_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Sta_ETC___d187[15:0],
		 _29_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d191[15:0],
		 _43_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d193[15:0],
		 _85_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d195[15:0],
		 1'd0,
		 hdmiDisplay_hdmiTpg_rgb888StageReg[35:28],
		 8'd0,
		 hdmiDisplay_hdmiTpg_rgb888StageReg[19:12],
		 7'd0,
		 _107_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Sta_ETC___d199[15:0],
		 _21_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d201[15:0] } :
	       144'd0 ;
  assign IF_hdmiDisplay_hdmiTpg_testPatternEnabled_02_T_ETC___d175 =
	     hdmiDisplay_hdmiTpg_testPatternEnabled ?
	       hdmiDisplay_hdmiTpg_bramOutStageFifo$D_OUT[35:12] :
	       (hdmiDisplay_hdmiTpg_bramOutStageFifo$D_OUT[0] ?
		  hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DOA[55:32] :
		  hdmiDisplay_frameBuffer_syncBRAM_syncBRAMBVI$DOA[23:0]) ;
  assign IF_interrupted_12_THEN_1_ELSE_0___d599 =
	     interrupted ? 32'd1 : 32'd0 ;
  assign IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598 =
	     responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585 ?
	       32'd0 :
	       32'h00000020 ;
  assign NOT_hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDi_ETC___d95 =
	     hdmiDisplay_hdmiTpg_lineCount >=
	     hdmiDisplay_hdmiTpg_deLineCountMinimum ;
  assign NOT_hdmiDisplay_hdmiTpg_pixelCount_8_ULT_hdmiD_ETC___d127 =
	     hdmiDisplay_hdmiTpg_pixelCount >=
	     hdmiDisplay_hdmiTpg_dePixelCountMinimum &&
	     hdmiDisplay_hdmiTpg_pixelCount <
	     hdmiDisplay_hdmiTpg_dePixelCountMaximum &&
	     NOT_hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDi_ETC___d95 ;
  assign _107_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Sta_ETC___d199 =
	     16'd107 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[27:20] } ;
  assign _150_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Sta_ETC___d187 =
	     16'd150 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[27:20] } ;
  assign _21_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d201 =
	     16'd21 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[35:28] } ;
  assign _29_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d191 =
	     16'd29 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[35:28] } ;
  assign _43_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d193 =
	     16'd43 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[19:12] } ;
  assign _77_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d183 =
	     16'd77 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[19:12] } ;
  assign _85_MUL_0_CONCAT_hdmiDisplay_hdmiTpg_rgb888Stag_ETC___d195 =
	     16'd85 * { 8'd0, hdmiDisplay_hdmiTpg_rgb888StageReg[27:20] } ;
  assign _dor1hdmiDisplay_hdmiTpg_testPatternEnabled$EN_write =
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data ;
  assign _theResult____h5984 =
	     (hdmiDisplay_hdmiTpg_pixelCount <
	      hdmiDisplay_hdmiTpg_pixelMidpoint) ?
	       2'd0 :
	       2'd1 ;
  assign data__h7484 =
	     { hdmiDisplay_hdmiTpg_evenOddPixelReg ?
		 hdmiDisplay_hdmiTpg_yuv444StageReg[15:8] :
		 hdmiDisplay_hdmiTpg_yuv444StageReg[7:0],
	       hdmiDisplay_hdmiTpg_yuv444StageReg[23:16] } ;
  assign hdmiDisplay_frameBuffer_readAddrReg_ULE_hdmiDi_ETC___d5 =
	     hdmiDisplay_frameBuffer_readAddrReg <=
	     hdmiDisplay_frameBuffer_segmentLimitReg ;
  assign hdmiDisplay_hdmiTpg_lineCount_6_ULT_hdmiDispla_ETC___d97 =
	     hdmiDisplay_hdmiTpg_lineCount <
	     hdmiDisplay_hdmiTpg_deLineCountMaximum ;
  assign hdmiDisplay_hdmiTpg_pixelCount_8_EQ_hdmiDispla_ETC___d589 =
	     hdmiDisplay_hdmiTpg_pixelCount ==
	     hdmiDisplay_hdmiTpg_numberOfPixels - 12'd1 ;
  assign index__h1818 = hdmiDisplay_frameBuffer_sglistIndexReg + 8'd1 ;
  assign length__h12730 = { 8'd0, requestFifo_fifo_wDataOut$wget[11:0] } ;
  assign lineAddr___1__h7900 =
	     hdmiDisplay_frameBuffer_lineAddrReg +
	     { 10'd0, hdmiDisplay_frameBuffer_fbc[13:0] } ;
  assign lineAddr__h7862 =
	     (hdmiDisplay_frameBuffer_readAddrReg == 24'hFFFFFF) ?
	       hdmiDisplay_frameBuffer_lineAddrReg :
	       lineAddr___1__h7900 ;
  assign lineCount___1__h7902 = hdmiDisplay_frameBuffer_lineCountReg - 11'd1 ;
  assign lineCount__h7860 =
	     (hdmiDisplay_frameBuffer_readAddrReg == 24'hFFFFFF) ?
	       hdmiDisplay_frameBuffer_lineCountReg :
	       lineCount___1__h7902 ;
  assign newLineCount___1__h6411 = hdmiDisplay_hdmiTpg_lineCount + 11'd1 ;
  assign newPixelCount__h6442 = hdmiDisplay_hdmiTpg_pixelCount + 12'd1 ;
  assign newval__h16201 =
	     { fifo_write_writeData_data, requestFifo_buff[35:32] } ;
  assign readLimit___1__h7901 =
	     hdmiDisplay_frameBuffer_readLimitReg +
	     { 10'd0, hdmiDisplay_frameBuffer_fbc[13:0] } ;
  assign readLimit__h7863 =
	     (hdmiDisplay_frameBuffer_readAddrReg == 24'hFFFFFF) ?
	       hdmiDisplay_frameBuffer_readLimitReg :
	       readLimit___1__h7901 ;
  assign requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 =
	     requestFifo_fifo_rRdPtr == requestFifo_fifo_rWrPtr ;
  assign requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 =
	     requestFifo_fifo_rRdPtr + 5'd8 == requestFifo_fifo_rWrPtr ;
  assign responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 =
	     responseFifo_fifo_rRdPtr == responseFifo_fifo_rWrPtr ;
  assign responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585 =
	     responseFifo_fifo_rRdPtr + 5'd8 == responseFifo_fifo_rWrPtr ;
  assign result__h14943 =
	     { IF_interrupted_12_THEN_1_ELSE_0___d599[31:17],
	       !responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_respo_ETC___d585,
	       IF_interrupted_12_THEN_1_ELSE_0___d599[15:0] } ;
  assign result__h6110 = { 1'd1, _theResult____h5984[0] } ;
  assign segmentOffset__h1961 =
	     { hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOA[39:20],
	       12'd0 } -
	     { 8'd0, hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOA[87:64] } ;
  assign segmentOffset__h2402 =
	     { hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[39:20],
	       12'd0 } -
	     { 8'd0, hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] } ;
  assign spliced_bits__h2042 =
	     { index__h1818,
	       hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOA[63:40] } ;
  assign spliced_bits__h2684 =
	     { 16'd0,
	       hdmiDisplay_frameBuffer_nextFbc[44:37],
	       hdmiDisplay_frameBuffer_nextFbc[44:37] } ;
  assign val__h15581 =
	     (responseFifo_fifo_rCache[103] &&
	      responseFifo_fifo_rCache[102:98] == responseFifo_fifo_rRdPtr) ?
	       responseFifo_fifo_rCache[97:0] :
	       responseFifo_fifo_memory$DOB ;
  assign x245_PLUS_hdmiDisplay_hdmiTpg_yuv444Intermedia_ETC__q1 =
	     x__h7245 +
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[111:96] ;
  assign x308_PLUS_hdmiDisplay_hdmiTpg_yuv444Intermedia_ETC__q2 =
	     x__h7308 +
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[63:48] ;
  assign x363_MINUS_hdmiDisplay_hdmiTpg_yuv444Intermedi_ETC__q3 =
	     x__h7363 -
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[15:0] ;
  assign x__h10144 =
	     responseFifo_fifo_wDataIn$whas ?
	       responseFifo_fifo_wDataIn$wget :
	       98'd0 ;
  assign x__h10245 = responseFifo_fifo_rRdPtr + 5'd1 ;
  assign x__h12850 =
	     hdmiDisplay_segmentOffsetReg +
	     { requestFifo_fifo_wDataOut$wget[11:0], 12'd0 } ;
  assign x__h14893 = x__h14895 | y__h14896 ;
  assign x__h14895 = x__h14897 | y__h14898 ;
  assign x__h14897 =
	     { IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598[31],
	       2'd3,
	       IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598[28],
	       1'd1,
	       IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598[26:23],
	       1'd1,
	       IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598[21:19],
	       3'd7,
	       IF_responseFifo_fifo_rRdPtr_09_PLUS_8_27_EQ_re_ETC___d598[15:0] } ;
  assign x__h15675 = responseFifo_count + 32'd1 ;
  assign x__h15819 = val__h15581 >> x__h15827 ;
  assign x__h15827 = { responseFifo_count[26:0], 5'd0 } ;
  assign x__h16302 = requestFifo_count + 32'd1 ;
  assign x__h6020 =
	     hdmiDisplay_hdmiTpg_lineCount < hdmiDisplay_hdmiTpg_vsyncWidth ;
  assign x__h6030 =
	     hdmiDisplay_hdmiTpg_pixelCount < hdmiDisplay_hdmiTpg_hsyncWidth ;
  assign x__h6096 =
	     (hdmiDisplay_hdmiTpg_lineCount <
	      hdmiDisplay_hdmiTpg_lineMidpoint) ?
	       _theResult____h5984 :
	       result__h6110 ;
  assign x__h6640 = hdmiDisplay_hdmiTpg_dataCount + 12'd1 ;
  assign x__h7245 =
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[143:128] +
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[127:112] ;
  assign x__h7308 =
	     x__h7310 -
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[79:64] ;
  assign x__h7310 =
	     16'd32768 -
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[95:80] ;
  assign x__h7363 =
	     x__h7365 -
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[31:16] ;
  assign x__h7365 =
	     16'd32768 +
	     hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg[47:32] ;
  assign x__h9146 =
	     requestFifo_fifo_pwEnqueue$whas ?
	       requestFifo_fifo_wDataIn$wget :
	       36'd0 ;
  assign x__h9247 = requestFifo_fifo_rRdPtr + 5'd1 ;
  assign y__h14894 =
	     requestFifo_fifo_rRdPtr_86_EQ_requestFifo_fifo_ETC___d331 ?
	       32'd0 :
	       32'h00000001 ;
  assign y__h14896 =
	     requestFifo_fifo_rRdPtr_86_PLUS_8_22_EQ_reques_ETC___d596 ?
	       32'd0 :
	       32'h00000002 ;
  assign y__h14898 =
	     responseFifo_fifo_rRdPtr_09_EQ_responseFifo_fi_ETC___d600 ?
	       32'd0 :
	       32'h00000010 ;
  assign y__h2506 = { 10'd0, hdmiDisplay_frameBuffer_nextFbc[13:0] } ;
  always@(x__h6096 or
	  hdmiDisplay_hdmiTpg_patternRegs_3 or
	  hdmiDisplay_hdmiTpg_patternRegs or
	  hdmiDisplay_hdmiTpg_patternRegs_1 or
	  hdmiDisplay_hdmiTpg_patternRegs_2)
  begin
    case (x__h6096)
      2'd0: data__h5985 = hdmiDisplay_hdmiTpg_patternRegs;
      2'd1: data__h5985 = hdmiDisplay_hdmiTpg_patternRegs_1;
      2'd2: data__h5985 = hdmiDisplay_hdmiTpg_patternRegs_2;
      2'd3: data__h5985 = hdmiDisplay_hdmiTpg_patternRegs_3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        blockedRequestsDiscardedReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	blockedResponsesDiscardedReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctrlReadAddrReg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctrlReadBurstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ctrlWriteAddrReg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctrlWriteBurstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	fifoReadAddrReg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fifoReadBurstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	fifoWriteAddrReg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fifoWriteBurstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_frameBufferEnabled <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hdmiDisplay_frameBuffer_fbc <= `BSV_ASSIGNMENT_DELAY 69'd0;
	hdmiDisplay_frameBuffer_lineAddrReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	hdmiDisplay_frameBuffer_lineCountReg <= `BSV_ASSIGNMENT_DELAY 11'd0;
	hdmiDisplay_frameBuffer_nextFbc <= `BSV_ASSIGNMENT_DELAY 69'd0;
	hdmiDisplay_frameBuffer_nextent2Enabled <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hdmiDisplay_frameBuffer_pixelCountReg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	hdmiDisplay_frameBuffer_pixelCountReg2 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	hdmiDisplay_frameBuffer_readAddrReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	hdmiDisplay_frameBuffer_readLimitReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	hdmiDisplay_frameBuffer_readingReg <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	hdmiDisplay_frameBuffer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hdmiDisplay_frameBuffer_segmentLimitReg <= `BSV_ASSIGNMENT_DELAY
	    24'd0;
	hdmiDisplay_frameBuffer_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	hdmiDisplay_frameBuffer_sglistIndexReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	hdmiDisplay_frameBuffer_startFrameEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	hdmiDisplay_frameBuffer_traceReadingReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hdmiDisplay_frameCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_linesReg <= `BSV_ASSIGNMENT_DELAY 11'd1080;
	hdmiDisplay_pixelsReg <= `BSV_ASSIGNMENT_DELAY 12'd1920;
	hdmiDisplay_segmentIndexReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	hdmiDisplay_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	hdmiDisplay_sendVsyncIndication <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hdmiDisplay_strideBytesReg <= `BSV_ASSIGNMENT_DELAY 14'd7680;
	hdmiDisplay_vsyncPulseCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_waitingForVsync <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interruptCleared <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interruptEnableReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	junkReqReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	overflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 36'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 42'h0AAAAAAAAAA;
	requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	requestTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	responseFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    104'h2AAAAAAAAAAAAAAAAAAAAAAAAA;
	responseFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	responseFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	responseTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	underflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	word0Put <= `BSV_ASSIGNMENT_DELAY 32'd0;
	word1Put <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (blockedRequestsDiscardedReg$EN)
	  blockedRequestsDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	      blockedRequestsDiscardedReg$D_IN;
	if (blockedResponsesDiscardedReg$EN)
	  blockedResponsesDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	      blockedResponsesDiscardedReg$D_IN;
	if (ctrlReadAddrReg$EN)
	  ctrlReadAddrReg <= `BSV_ASSIGNMENT_DELAY ctrlReadAddrReg$D_IN;
	if (ctrlReadBurstCountReg$EN)
	  ctrlReadBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      ctrlReadBurstCountReg$D_IN;
	if (ctrlWriteAddrReg$EN)
	  ctrlWriteAddrReg <= `BSV_ASSIGNMENT_DELAY ctrlWriteAddrReg$D_IN;
	if (ctrlWriteBurstCountReg$EN)
	  ctrlWriteBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      ctrlWriteBurstCountReg$D_IN;
	if (fifoReadAddrReg$EN)
	  fifoReadAddrReg <= `BSV_ASSIGNMENT_DELAY fifoReadAddrReg$D_IN;
	if (fifoReadBurstCountReg$EN)
	  fifoReadBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      fifoReadBurstCountReg$D_IN;
	if (fifoWriteAddrReg$EN)
	  fifoWriteAddrReg <= `BSV_ASSIGNMENT_DELAY fifoWriteAddrReg$D_IN;
	if (fifoWriteBurstCountReg$EN)
	  fifoWriteBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      fifoWriteBurstCountReg$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (hdmiDisplay_frameBufferEnabled$EN)
	  hdmiDisplay_frameBufferEnabled <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBufferEnabled$D_IN;
	if (hdmiDisplay_frameBuffer_fbc$EN)
	  hdmiDisplay_frameBuffer_fbc <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_fbc$D_IN;
	if (hdmiDisplay_frameBuffer_lineAddrReg$EN)
	  hdmiDisplay_frameBuffer_lineAddrReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_lineAddrReg$D_IN;
	if (hdmiDisplay_frameBuffer_lineCountReg$EN)
	  hdmiDisplay_frameBuffer_lineCountReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_lineCountReg$D_IN;
	if (hdmiDisplay_frameBuffer_nextFbc$EN)
	  hdmiDisplay_frameBuffer_nextFbc <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_nextFbc$D_IN;
	if (hdmiDisplay_frameBuffer_nextent2Enabled$EN)
	  hdmiDisplay_frameBuffer_nextent2Enabled <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_nextent2Enabled$D_IN;
	if (hdmiDisplay_frameBuffer_pixelCountReg$EN)
	  hdmiDisplay_frameBuffer_pixelCountReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_pixelCountReg$D_IN;
	if (hdmiDisplay_frameBuffer_pixelCountReg2$EN)
	  hdmiDisplay_frameBuffer_pixelCountReg2 <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_pixelCountReg2$D_IN;
	if (hdmiDisplay_frameBuffer_readAddrReg$EN)
	  hdmiDisplay_frameBuffer_readAddrReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_readAddrReg$D_IN;
	if (hdmiDisplay_frameBuffer_readLimitReg$EN)
	  hdmiDisplay_frameBuffer_readLimitReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_readLimitReg$D_IN;
	if (hdmiDisplay_frameBuffer_readingReg$EN)
	  hdmiDisplay_frameBuffer_readingReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_readingReg$D_IN;
	if (hdmiDisplay_frameBuffer_runningReg$EN)
	  hdmiDisplay_frameBuffer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_runningReg$D_IN;
	if (hdmiDisplay_frameBuffer_segmentLimitReg$EN)
	  hdmiDisplay_frameBuffer_segmentLimitReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_segmentLimitReg$D_IN;
	if (hdmiDisplay_frameBuffer_segmentOffsetReg$EN)
	  hdmiDisplay_frameBuffer_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_segmentOffsetReg$D_IN;
	if (hdmiDisplay_frameBuffer_sglistIndexReg$EN)
	  hdmiDisplay_frameBuffer_sglistIndexReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_sglistIndexReg$D_IN;
	if (hdmiDisplay_frameBuffer_startFrameEnabled$EN)
	  hdmiDisplay_frameBuffer_startFrameEnabled <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_startFrameEnabled$D_IN;
	if (hdmiDisplay_frameBuffer_traceReadingReg$EN)
	  hdmiDisplay_frameBuffer_traceReadingReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameBuffer_traceReadingReg$D_IN;
	if (hdmiDisplay_frameCountReg$EN)
	  hdmiDisplay_frameCountReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_frameCountReg$D_IN;
	if (hdmiDisplay_linesReg$EN)
	  hdmiDisplay_linesReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_linesReg$D_IN;
	if (hdmiDisplay_pixelsReg$EN)
	  hdmiDisplay_pixelsReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_pixelsReg$D_IN;
	if (hdmiDisplay_segmentIndexReg$EN)
	  hdmiDisplay_segmentIndexReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_segmentIndexReg$D_IN;
	if (hdmiDisplay_segmentOffsetReg$EN)
	  hdmiDisplay_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_segmentOffsetReg$D_IN;
	if (hdmiDisplay_sendVsyncIndication$EN)
	  hdmiDisplay_sendVsyncIndication <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_sendVsyncIndication$D_IN;
	if (hdmiDisplay_strideBytesReg$EN)
	  hdmiDisplay_strideBytesReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_strideBytesReg$D_IN;
	if (hdmiDisplay_vsyncPulseCountReg$EN)
	  hdmiDisplay_vsyncPulseCountReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_vsyncPulseCountReg$D_IN;
	if (hdmiDisplay_waitingForVsync$EN)
	  hdmiDisplay_waitingForVsync <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_waitingForVsync$D_IN;
	if (interruptCleared$EN)
	  interruptCleared <= `BSV_ASSIGNMENT_DELAY interruptCleared$D_IN;
	if (interruptEnableReg$EN)
	  interruptEnableReg <= `BSV_ASSIGNMENT_DELAY interruptEnableReg$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (junkReqReg$EN)
	  junkReqReg <= `BSV_ASSIGNMENT_DELAY junkReqReg$D_IN;
	if (overflowCount$EN)
	  overflowCount <= `BSV_ASSIGNMENT_DELAY overflowCount$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (requestFifo_fifo_rCache$EN)
	  requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rCache$D_IN;
	if (requestFifo_fifo_rRdPtr$EN)
	  requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rRdPtr$D_IN;
	if (requestFifo_fifo_rWrPtr$EN)
	  requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rWrPtr$D_IN;
	if (requestFired$EN)
	  requestFired <= `BSV_ASSIGNMENT_DELAY requestFired$D_IN;
	if (requestTimeLimitReg$EN)
	  requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      requestTimeLimitReg$D_IN;
	if (requestTimerReg$EN)
	  requestTimerReg <= `BSV_ASSIGNMENT_DELAY requestTimerReg$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
	if (responseFifo_fifo_rCache$EN)
	  responseFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      responseFifo_fifo_rCache$D_IN;
	if (responseFifo_fifo_rRdPtr$EN)
	  responseFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      responseFifo_fifo_rRdPtr$D_IN;
	if (responseFifo_fifo_rWrPtr$EN)
	  responseFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      responseFifo_fifo_rWrPtr$D_IN;
	if (responseFired$EN)
	  responseFired <= `BSV_ASSIGNMENT_DELAY responseFired$D_IN;
	if (responseTimeLimitReg$EN)
	  responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      responseTimeLimitReg$D_IN;
	if (responseTimerReg$EN)
	  responseTimerReg <= `BSV_ASSIGNMENT_DELAY responseTimerReg$D_IN;
	if (underflowCount$EN)
	  underflowCount <= `BSV_ASSIGNMENT_DELAY underflowCount$D_IN;
	if (word0Put$EN) word0Put <= `BSV_ASSIGNMENT_DELAY word0Put$D_IN;
	if (word1Put$EN) word1Put <= `BSV_ASSIGNMENT_DELAY word1Put$D_IN;
      end
  end

  always@(posedge CLK_hdmi_clk)
  begin
    if (hdmiDisplay_hdmi_reset$OUT_RST == `BSV_RESET_VALUE)
      begin
        hdmiDisplay_hdmiTpg_dataCount <= `BSV_ASSIGNMENT_DELAY 12'd0;
	hdmiDisplay_hdmiTpg_deLineCountMaximum <= `BSV_ASSIGNMENT_DELAY
	    11'd1121;
	hdmiDisplay_hdmiTpg_deLineCountMinimum <= `BSV_ASSIGNMENT_DELAY
	    11'd41;
	hdmiDisplay_hdmiTpg_dePixelCountMaximum <= `BSV_ASSIGNMENT_DELAY
	    12'd2112;
	hdmiDisplay_hdmiTpg_dePixelCountMinimum <= `BSV_ASSIGNMENT_DELAY
	    12'd192;
	hdmiDisplay_hdmiTpg_evenOddPixelReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hdmiDisplay_hdmiTpg_hsyncWidth <= `BSV_ASSIGNMENT_DELAY 12'd44;
	hdmiDisplay_hdmiTpg_lineCount <= `BSV_ASSIGNMENT_DELAY 11'd0;
	hdmiDisplay_hdmiTpg_lineMidpoint <= `BSV_ASSIGNMENT_DELAY 11'd581;
	hdmiDisplay_hdmiTpg_numberOfLines <= `BSV_ASSIGNMENT_DELAY 11'd1125;
	hdmiDisplay_hdmiTpg_numberOfPixels <= `BSV_ASSIGNMENT_DELAY 12'd2200;
	hdmiDisplay_hdmiTpg_patternReg0 <= `BSV_ASSIGNMENT_DELAY 32'h00FFFFFF;
	hdmiDisplay_hdmiTpg_patternRegs <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_hdmiTpg_patternRegs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_hdmiTpg_patternRegs_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_hdmiTpg_patternRegs_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hdmiDisplay_hdmiTpg_pixelCount <= `BSV_ASSIGNMENT_DELAY 12'd0;
	hdmiDisplay_hdmiTpg_pixelMidpoint <= `BSV_ASSIGNMENT_DELAY 12'd1152;
	hdmiDisplay_hdmiTpg_rgb888StageReg <= `BSV_ASSIGNMENT_DELAY 39'd0;
	hdmiDisplay_hdmiTpg_shadowTestPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	hdmiDisplay_hdmiTpg_testPatternEnabled <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hdmiDisplay_hdmiTpg_vsyncWidth <= `BSV_ASSIGNMENT_DELAY 11'd5;
	hdmiDisplay_hdmiTpg_yuv422StageReg <= `BSV_ASSIGNMENT_DELAY 19'd0;
	hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg <= `BSV_ASSIGNMENT_DELAY
	    147'd0;
	hdmiDisplay_hdmiTpg_yuv444StageReg <= `BSV_ASSIGNMENT_DELAY 27'd0;
      end
    else
      begin
        if (hdmiDisplay_hdmiTpg_dataCount$EN)
	  hdmiDisplay_hdmiTpg_dataCount <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_dataCount$D_IN;
	if (hdmiDisplay_hdmiTpg_deLineCountMaximum$EN)
	  hdmiDisplay_hdmiTpg_deLineCountMaximum <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_deLineCountMaximum$D_IN;
	if (hdmiDisplay_hdmiTpg_deLineCountMinimum$EN)
	  hdmiDisplay_hdmiTpg_deLineCountMinimum <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_deLineCountMinimum$D_IN;
	if (hdmiDisplay_hdmiTpg_dePixelCountMaximum$EN)
	  hdmiDisplay_hdmiTpg_dePixelCountMaximum <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_dePixelCountMaximum$D_IN;
	if (hdmiDisplay_hdmiTpg_dePixelCountMinimum$EN)
	  hdmiDisplay_hdmiTpg_dePixelCountMinimum <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_dePixelCountMinimum$D_IN;
	if (hdmiDisplay_hdmiTpg_evenOddPixelReg$EN)
	  hdmiDisplay_hdmiTpg_evenOddPixelReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_evenOddPixelReg$D_IN;
	if (hdmiDisplay_hdmiTpg_hsyncWidth$EN)
	  hdmiDisplay_hdmiTpg_hsyncWidth <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_hsyncWidth$D_IN;
	if (hdmiDisplay_hdmiTpg_lineCount$EN)
	  hdmiDisplay_hdmiTpg_lineCount <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_lineCount$D_IN;
	if (hdmiDisplay_hdmiTpg_lineMidpoint$EN)
	  hdmiDisplay_hdmiTpg_lineMidpoint <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_lineMidpoint$D_IN;
	if (hdmiDisplay_hdmiTpg_numberOfLines$EN)
	  hdmiDisplay_hdmiTpg_numberOfLines <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_numberOfLines$D_IN;
	if (hdmiDisplay_hdmiTpg_numberOfPixels$EN)
	  hdmiDisplay_hdmiTpg_numberOfPixels <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_numberOfPixels$D_IN;
	if (hdmiDisplay_hdmiTpg_patternReg0$EN)
	  hdmiDisplay_hdmiTpg_patternReg0 <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_patternReg0$D_IN;
	if (hdmiDisplay_hdmiTpg_patternRegs$EN)
	  hdmiDisplay_hdmiTpg_patternRegs <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_patternRegs$D_IN;
	if (hdmiDisplay_hdmiTpg_patternRegs_1$EN)
	  hdmiDisplay_hdmiTpg_patternRegs_1 <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_patternRegs_1$D_IN;
	if (hdmiDisplay_hdmiTpg_patternRegs_2$EN)
	  hdmiDisplay_hdmiTpg_patternRegs_2 <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_patternRegs_2$D_IN;
	if (hdmiDisplay_hdmiTpg_patternRegs_3$EN)
	  hdmiDisplay_hdmiTpg_patternRegs_3 <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_patternRegs_3$D_IN;
	if (hdmiDisplay_hdmiTpg_pixelCount$EN)
	  hdmiDisplay_hdmiTpg_pixelCount <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_pixelCount$D_IN;
	if (hdmiDisplay_hdmiTpg_pixelMidpoint$EN)
	  hdmiDisplay_hdmiTpg_pixelMidpoint <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_pixelMidpoint$D_IN;
	if (hdmiDisplay_hdmiTpg_rgb888StageReg$EN)
	  hdmiDisplay_hdmiTpg_rgb888StageReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_rgb888StageReg$D_IN;
	if (hdmiDisplay_hdmiTpg_shadowTestPatternEnabled$EN)
	  hdmiDisplay_hdmiTpg_shadowTestPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_shadowTestPatternEnabled$D_IN;
	if (hdmiDisplay_hdmiTpg_testPatternEnabled$EN)
	  hdmiDisplay_hdmiTpg_testPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_testPatternEnabled$D_IN;
	if (hdmiDisplay_hdmiTpg_vsyncWidth$EN)
	  hdmiDisplay_hdmiTpg_vsyncWidth <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_vsyncWidth$D_IN;
	if (hdmiDisplay_hdmiTpg_yuv422StageReg$EN)
	  hdmiDisplay_hdmiTpg_yuv422StageReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_yuv422StageReg$D_IN;
	if (hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg$EN)
	  hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg$D_IN;
	if (hdmiDisplay_hdmiTpg_yuv444StageReg$EN)
	  hdmiDisplay_hdmiTpg_yuv444StageReg <= `BSV_ASSIGNMENT_DELAY
	      hdmiDisplay_hdmiTpg_yuv444StageReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    blockedRequestsDiscardedReg = 32'hAAAAAAAA;
    blockedResponsesDiscardedReg = 32'hAAAAAAAA;
    ctrlReadAddrReg = 12'hAAA;
    ctrlReadBurstCountReg = 8'hAA;
    ctrlWriteAddrReg = 12'hAAA;
    ctrlWriteBurstCountReg = 8'hAA;
    fifoReadAddrReg = 12'hAAA;
    fifoReadBurstCountReg = 8'hAA;
    fifoWriteAddrReg = 12'hAAA;
    fifoWriteBurstCountReg = 8'hAA;
    getWordCount = 32'hAAAAAAAA;
    hdmiDisplay_frameBufferEnabled = 1'h0;
    hdmiDisplay_frameBuffer_fbc = 69'h0AAAAAAAAAAAAAAAAA;
    hdmiDisplay_frameBuffer_lineAddrReg = 24'hAAAAAA;
    hdmiDisplay_frameBuffer_lineCountReg = 11'h2AA;
    hdmiDisplay_frameBuffer_nextFbc = 69'h0AAAAAAAAAAAAAAAAA;
    hdmiDisplay_frameBuffer_nextent2Enabled = 1'h0;
    hdmiDisplay_frameBuffer_pixelCountReg = 12'hAAA;
    hdmiDisplay_frameBuffer_pixelCountReg2 = 12'hAAA;
    hdmiDisplay_frameBuffer_readAddrReg = 24'hAAAAAA;
    hdmiDisplay_frameBuffer_readLimitReg = 24'hAAAAAA;
    hdmiDisplay_frameBuffer_readingReg = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    hdmiDisplay_frameBuffer_runningReg = 1'h0;
    hdmiDisplay_frameBuffer_segmentLimitReg = 24'hAAAAAA;
    hdmiDisplay_frameBuffer_segmentOffsetReg = 32'hAAAAAAAA;
    hdmiDisplay_frameBuffer_sglistIndexReg = 8'hAA;
    hdmiDisplay_frameBuffer_startFrameEnabled = 1'h0;
    hdmiDisplay_frameBuffer_traceReadingReg = 1'h0;
    hdmiDisplay_frameCountReg = 32'hAAAAAAAA;
    hdmiDisplay_hdmiTpg_dataCount = 12'hAAA;
    hdmiDisplay_hdmiTpg_deLineCountMaximum = 11'h2AA;
    hdmiDisplay_hdmiTpg_deLineCountMinimum = 11'h2AA;
    hdmiDisplay_hdmiTpg_dePixelCountMaximum = 12'hAAA;
    hdmiDisplay_hdmiTpg_dePixelCountMinimum = 12'hAAA;
    hdmiDisplay_hdmiTpg_evenOddPixelReg = 1'h0;
    hdmiDisplay_hdmiTpg_hsyncWidth = 12'hAAA;
    hdmiDisplay_hdmiTpg_lineCount = 11'h2AA;
    hdmiDisplay_hdmiTpg_lineMidpoint = 11'h2AA;
    hdmiDisplay_hdmiTpg_numberOfLines = 11'h2AA;
    hdmiDisplay_hdmiTpg_numberOfPixels = 12'hAAA;
    hdmiDisplay_hdmiTpg_patternReg0 = 32'hAAAAAAAA;
    hdmiDisplay_hdmiTpg_patternRegs = 32'hAAAAAAAA;
    hdmiDisplay_hdmiTpg_patternRegs_1 = 32'hAAAAAAAA;
    hdmiDisplay_hdmiTpg_patternRegs_2 = 32'hAAAAAAAA;
    hdmiDisplay_hdmiTpg_patternRegs_3 = 32'hAAAAAAAA;
    hdmiDisplay_hdmiTpg_pixelCount = 12'hAAA;
    hdmiDisplay_hdmiTpg_pixelMidpoint = 12'hAAA;
    hdmiDisplay_hdmiTpg_rgb888StageReg = 39'h2AAAAAAAAA;
    hdmiDisplay_hdmiTpg_shadowTestPatternEnabled = 1'h0;
    hdmiDisplay_hdmiTpg_testPatternEnabled = 1'h0;
    hdmiDisplay_hdmiTpg_vsyncWidth = 11'h2AA;
    hdmiDisplay_hdmiTpg_yuv422StageReg = 19'h2AAAA;
    hdmiDisplay_hdmiTpg_yuv444IntermediatesStageReg =
	147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    hdmiDisplay_hdmiTpg_yuv444StageReg = 27'h2AAAAAA;
    hdmiDisplay_linesReg = 11'h2AA;
    hdmiDisplay_pixelsReg = 12'hAAA;
    hdmiDisplay_segmentIndexReg = 8'hAA;
    hdmiDisplay_segmentOffsetReg = 24'hAAAAAA;
    hdmiDisplay_sendVsyncIndication = 1'h0;
    hdmiDisplay_strideBytesReg = 14'h2AAA;
    hdmiDisplay_vsyncPulseCountReg = 32'hAAAAAAAA;
    hdmiDisplay_waitingForVsync = 1'h0;
    interruptCleared = 1'h0;
    interruptEnableReg = 32'hAAAAAAAA;
    interrupted = 1'h0;
    junkReqReg = 32'hAAAAAAAA;
    overflowCount = 32'hAAAAAAAA;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 36'hAAAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    requestFifo_fifo_rCache = 42'h2AAAAAAAAAA;
    requestFifo_fifo_rRdPtr = 5'h0A;
    requestFifo_fifo_rWrPtr = 5'h0A;
    requestFired = 32'hAAAAAAAA;
    requestTimeLimitReg = 16'hAAAA;
    requestTimerReg = 16'hAAAA;
    responseFifo_count = 32'hAAAAAAAA;
    responseFifo_fifo_rCache = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
    responseFifo_fifo_rRdPtr = 5'h0A;
    responseFifo_fifo_rWrPtr = 5'h0A;
    responseFired = 32'hAAAAAAAA;
    responseTimeLimitReg = 16'hAAAA;
    responseTimerReg = 16'hAAAA;
    underflowCount = 32'hAAAAAAAA;
    word0Put = 32'hAAAAAAAA;
    word1Put = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_vsync)
	$display("vsync pulse received %h", hdmiDisplay_frameBufferEnabled);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_vsync && hdmiDisplay_frameBufferEnabled)
	$display("frame started");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_frameBuffer_nextent)
	$display("nextent readAddrReg %h segmentLimitReg %h",
		 hdmiDisplay_frameBuffer_readAddrReg,
		 hdmiDisplay_frameBuffer_segmentLimitReg);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_hsync &&
	  hdmiDisplay_frameBuffer_runningReg)
	$display("startLine readAddr %h readLimit %h stridebytes %h",
		 lineAddr__h7862,
		 readLimit__h7863,
		 hdmiDisplay_frameBuffer_fbc[13:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_frameBuffer_startFrameRule)
	$display("startFrame address %h startingOffset %h segmentOffset %h readLimit %h",
		 { hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[39:20],
		   12'd0 },
		 hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[87:64],
		 segmentOffset__h2402,
		 hdmiDisplay_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] +
		 y__h2506);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handlestartFrameBufferrequest)
	$display("startFrameBuffer %h", requestFifo_fifo_wDataOut$wget[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handlestartFrameBufferrequest)
	$display("startFrameBuffer lines %d pixels %d bytesperpixel %d stridebytes %d",
		 hdmiDisplay_linesReg,
		 hdmiDisplay_pixelsReg,
		 $signed(32'd4),
		 hdmiDisplay_strideBytesReg);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handleaddTranslationEntryrequest)
	$display("setSgEntry startingOffset %d address %d length %h limitOffset %h",
		 hdmiDisplay_segmentOffsetReg,
		 requestFifo_fifo_wDataOut$wget[31:12],
		 length__h12730,
		 hdmiDisplay_segmentOffsetReg + { length__h12730, 4'd0 });
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_hdmi_clk)
  begin
    #0;
    if (hdmiDisplay_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (hdmiDisplay_vsyncPulse$sRDY &&
	  hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	  hdmiDisplay_hdmiTpg_pixelCount == 12'd0)
	$display("vsync pulse sent");
    if (hdmiDisplay_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_hdmiTpg_data &&
	  hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	  hdmiDisplay_hdmiTpg_pixelCount == 12'd0)
	$display("testPatternEnabled %d",
		 hdmiDisplay_hdmiTpg_shadowTestPatternEnabled);
    if (hdmiDisplay_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hdmiDisplay_hdmiTpg_fbRule &&
	  hdmiDisplay_hdmiTpg_lineCount == 11'd0 &&
	  hdmiDisplay_hdmiTpg_pixelCount == 12'd0)
	$display("testPatternEnabled %d",
		 hdmiDisplay_hdmiTpg_shadowTestPatternEnabled);
  end
  // synopsys translate_on
endmodule  // mkHdmiDisplayWrapper

