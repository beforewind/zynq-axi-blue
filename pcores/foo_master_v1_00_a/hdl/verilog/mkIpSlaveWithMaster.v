//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Wed Dec  5 12:29:24 EST 2012
//
// Method conflict info:
// Method: put
// Conflict-free: error,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
// Sequenced after: get, interrupt
// Conflicts: put
//
// Method: get
// Conflict-free: error,
// 	       interrupt,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat
// Sequenced before: put
// Sequenced before (restricted): axi_writeAddr, axi_writeData, axi_writeResponse
// Conflicts: get
//
// Method: error
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
//
// Method: interrupt
// Conflict-free: get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
// Sequenced before: put
//
// Method: axi_writeAddr
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
// Sequenced before: axi_writeData
// Sequenced after (restricted): get
// Conflicts: axi_writeAddr
//
// Method: axi_writeBurstLen
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
// Sequenced before: axi_writeData
//
// Method: axi_writeBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
//
// Method: axi_writeBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
//
// Method: axi_writeBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
//
// Method: axi_writeBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
//
// Method: axi_writeData
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeResponse
// Sequenced after: axi_writeAddr, axi_writeBurstLen, axi_writeLastDataBeat
// Sequenced after (restricted): get
// Conflicts: axi_writeData
//
// Method: axi_writeDataByteEnable
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
//
// Method: axi_writeLastDataBeat
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat,
// 	       axi_writeResponse
// Sequenced before: axi_writeData
//
// Method: axi_writeResponse
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axi_writeAddr,
// 	       axi_writeBurstLen,
// 	       axi_writeBurstWidth,
// 	       axi_writeBurstType,
// 	       axi_writeBurstProt,
// 	       axi_writeBurstCache,
// 	       axi_writeData,
// 	       axi_writeDataByteEnable,
// 	       axi_writeLastDataBeat
// Sequenced after (restricted): get
// Conflicts: axi_writeResponse
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1 reg
// get                            O    32
// RDY_get                        O     1 const
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// axi_writeAddr                  O    32 reg
// RDY_axi_writeAddr              O     1 reg
// axi_writeBurstLen              O     8
// RDY_axi_writeBurstLen          O     1 const
// axi_writeBurstWidth            O     3 const
// RDY_axi_writeBurstWidth        O     1 const
// axi_writeBurstType             O     2 const
// RDY_axi_writeBurstType         O     1 const
// axi_writeBurstProt             O     3 const
// RDY_axi_writeBurstProt         O     1 const
// axi_writeBurstCache            O     4 const
// RDY_axi_writeBurstCache        O     1 const
// axi_writeData                  O    32 reg
// RDY_axi_writeData              O     1
// axi_writeDataByteEnable        O     4 const
// RDY_axi_writeDataByteEnable    O     1 const
// axi_writeLastDataBeat          O     1
// RDY_axi_writeLastDataBeat      O     1 const
// RDY_axi_writeResponse          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_addr                       I    12
// put_v                          I    32
// get_addr                       I    12
// axi_writeResponse_responseCode  I     2 reg
// EN_put                         I     1
// EN_axi_writeResponse           I     1
// EN_get                         I     1
// EN_axi_writeAddr               I     1
// EN_axi_writeData               I     1
//
// Combinational paths from inputs to outputs:
//   get_addr -> get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIpSlaveWithMaster(CLK,
			   RST_N,

			   put_addr,
			   put_v,
			   EN_put,
			   RDY_put,

			   get_addr,
			   EN_get,
			   get,
			   RDY_get,

			   error,
			   RDY_error,

			   interrupt,
			   RDY_interrupt,

			   EN_axi_writeAddr,
			   axi_writeAddr,
			   RDY_axi_writeAddr,

			   axi_writeBurstLen,
			   RDY_axi_writeBurstLen,

			   axi_writeBurstWidth,
			   RDY_axi_writeBurstWidth,

			   axi_writeBurstType,
			   RDY_axi_writeBurstType,

			   axi_writeBurstProt,
			   RDY_axi_writeBurstProt,

			   axi_writeBurstCache,
			   RDY_axi_writeBurstCache,

			   EN_axi_writeData,
			   axi_writeData,
			   RDY_axi_writeData,

			   axi_writeDataByteEnable,
			   RDY_axi_writeDataByteEnable,

			   axi_writeLastDataBeat,
			   RDY_axi_writeLastDataBeat,

			   axi_writeResponse_responseCode,
			   EN_axi_writeResponse,
			   RDY_axi_writeResponse);
  input  CLK;
  input  RST_N;

  // action method put
  input  [11 : 0] put_addr;
  input  [31 : 0] put_v;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  [11 : 0] get_addr;
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // actionvalue method axi_writeAddr
  input  EN_axi_writeAddr;
  output [31 : 0] axi_writeAddr;
  output RDY_axi_writeAddr;

  // value method axi_writeBurstLen
  output [7 : 0] axi_writeBurstLen;
  output RDY_axi_writeBurstLen;

  // value method axi_writeBurstWidth
  output [2 : 0] axi_writeBurstWidth;
  output RDY_axi_writeBurstWidth;

  // value method axi_writeBurstType
  output [1 : 0] axi_writeBurstType;
  output RDY_axi_writeBurstType;

  // value method axi_writeBurstProt
  output [2 : 0] axi_writeBurstProt;
  output RDY_axi_writeBurstProt;

  // value method axi_writeBurstCache
  output [3 : 0] axi_writeBurstCache;
  output RDY_axi_writeBurstCache;

  // actionvalue method axi_writeData
  input  EN_axi_writeData;
  output [31 : 0] axi_writeData;
  output RDY_axi_writeData;

  // value method axi_writeDataByteEnable
  output [3 : 0] axi_writeDataByteEnable;
  output RDY_axi_writeDataByteEnable;

  // value method axi_writeLastDataBeat
  output axi_writeLastDataBeat;
  output RDY_axi_writeLastDataBeat;

  // action method axi_writeResponse
  input  [1 : 0] axi_writeResponse_responseCode;
  input  EN_axi_writeResponse;
  output RDY_axi_writeResponse;

  // signals for module outputs
  wire [31 : 0] axi_writeAddr, axi_writeData, get;
  wire [7 : 0] axi_writeBurstLen;
  wire [3 : 0] axi_writeBurstCache, axi_writeDataByteEnable;
  wire [2 : 0] axi_writeBurstProt, axi_writeBurstWidth;
  wire [1 : 0] axi_writeBurstType;
  wire RDY_axi_writeAddr,
       RDY_axi_writeBurstCache,
       RDY_axi_writeBurstLen,
       RDY_axi_writeBurstProt,
       RDY_axi_writeBurstType,
       RDY_axi_writeBurstWidth,
       RDY_axi_writeData,
       RDY_axi_writeDataByteEnable,
       RDY_axi_writeLastDataBeat,
       RDY_axi_writeResponse,
       RDY_error,
       RDY_get,
       RDY_interrupt,
       RDY_put,
       axi_writeLastDataBeat,
       error,
       interrupt;

  // register dutWrapper_dut_fifoToAxi_addrsWrittenCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_addrsWrittenCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_addrsWrittenCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_addrsWrittenCount$EN;

  // register dutWrapper_dut_fifoToAxi_baseReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_baseReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_baseReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_baseReg$EN;

  // register dutWrapper_dut_fifoToAxi_boundsReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_boundsReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_boundsReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_boundsReg$EN;

  // register dutWrapper_dut_fifoToAxi_burstCountReg
  reg [7 : 0] dutWrapper_dut_fifoToAxi_burstCountReg;
  wire [7 : 0] dutWrapper_dut_fifoToAxi_burstCountReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_burstCountReg$EN;

  // register dutWrapper_dut_fifoToAxi_enabledReg
  reg dutWrapper_dut_fifoToAxi_enabledReg;
  wire dutWrapper_dut_fifoToAxi_enabledReg$D_IN,
       dutWrapper_dut_fifoToAxi_enabledReg$EN;

  // register dutWrapper_dut_fifoToAxi_lastDataBeatCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_lastDataBeatCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_lastDataBeatCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_lastDataBeatCount$EN;

  // register dutWrapper_dut_fifoToAxi_operationInProgress
  reg dutWrapper_dut_fifoToAxi_operationInProgress;
  wire dutWrapper_dut_fifoToAxi_operationInProgress$D_IN,
       dutWrapper_dut_fifoToAxi_operationInProgress$EN;

  // register dutWrapper_dut_fifoToAxi_ptrReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_ptrReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_ptrReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_ptrReg$EN;

  // register dutWrapper_dut_fifoToAxi_thresholdReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_thresholdReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_thresholdReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_thresholdReg$EN;

  // register dutWrapper_dut_fifoToAxi_wordsEnqCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_wordsEnqCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_wordsEnqCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_wordsEnqCount$EN;

  // register dutWrapper_dut_fifoToAxi_wordsWrittenCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_wordsWrittenCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_wordsWrittenCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_wordsWrittenCount$EN;

  // register dutWrapper_dut_result2Reg
  reg [32 : 0] dutWrapper_dut_result2Reg;
  wire [32 : 0] dutWrapper_dut_result2Reg$D_IN;
  wire dutWrapper_dut_result2Reg$EN;

  // register dutWrapper_dut_resultReg
  reg [32 : 0] dutWrapper_dut_resultReg;
  wire [32 : 0] dutWrapper_dut_resultReg$D_IN;
  wire dutWrapper_dut_resultReg$EN;

  // register dutWrapper_requestFired
  reg [31 : 0] dutWrapper_requestFired;
  wire [31 : 0] dutWrapper_requestFired$D_IN;
  wire dutWrapper_requestFired$EN;

  // register dutWrapper_responseFired
  reg [31 : 0] dutWrapper_responseFired;
  wire [31 : 0] dutWrapper_responseFired$D_IN;
  wire dutWrapper_responseFired$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register interruptCleared
  reg interruptCleared;
  wire interruptCleared$D_IN, interruptCleared$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [34 : 0] requestFifo_buff;
  wire [34 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // register underflowCount
  reg [31 : 0] underflowCount;
  wire [31 : 0] underflowCount$D_IN;
  wire underflowCount$EN;

  // ports of submodule dutWrapper_dut_fifoStatusFifo
  reg [31 : 0] dutWrapper_dut_fifoStatusFifo$D_IN;
  wire [31 : 0] dutWrapper_dut_fifoStatusFifo$D_OUT;
  wire dutWrapper_dut_fifoStatusFifo$CLR,
       dutWrapper_dut_fifoStatusFifo$DEQ,
       dutWrapper_dut_fifoStatusFifo$EMPTY_N,
       dutWrapper_dut_fifoStatusFifo$ENQ,
       dutWrapper_dut_fifoStatusFifo$FULL_N;

  // ports of submodule dutWrapper_dut_fifoToAxi_axiBrespFifo
  wire [1 : 0] dutWrapper_dut_fifoToAxi_axiBrespFifo$D_IN,
	       dutWrapper_dut_fifoToAxi_axiBrespFifo$D_OUT;
  wire dutWrapper_dut_fifoToAxi_axiBrespFifo$CLR,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$DEQ,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$ENQ,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N;

  // ports of submodule dutWrapper_dut_fifoToAxi_dfifo
  wire [31 : 0] dutWrapper_dut_fifoToAxi_dfifo$D_IN,
		dutWrapper_dut_fifoToAxi_dfifo$D_OUT;
  wire dutWrapper_dut_fifoToAxi_dfifo$CLR,
       dutWrapper_dut_fifoToAxi_dfifo$DEQ,
       dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N,
       dutWrapper_dut_fifoToAxi_dfifo$ENQ,
       dutWrapper_dut_fifoToAxi_dfifo$FULL_N;

  // ports of submodule requestFifo_fifo
  wire [34 : 0] requestFifo_fifo$D_IN, requestFifo_fifo$D_OUT;
  wire requestFifo_fifo$CLR,
       requestFifo_fifo$DEQ,
       requestFifo_fifo$EMPTY_N,
       requestFifo_fifo$ENQ,
       requestFifo_fifo$FULL_N;

  // ports of submodule responseFifo_fifo
  wire [33 : 0] responseFifo_fifo$D_IN, responseFifo_fifo$D_OUT;
  wire responseFifo_fifo$CLR,
       responseFifo_fifo$DEQ,
       responseFifo_fifo$EMPTY_N,
       responseFifo_fifo$ENQ,
       responseFifo_fifo$FULL_N;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2;
  wire [11 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_dutWrapper_axiResponseresponse,
       WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount,
       WILL_FIRE_RL_dutWrapper_fifoStatusresponse,
       WILL_FIRE_RL_dutWrapper_handleenqrequest,
       WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest,
       WILL_FIRE_RL_dutWrapper_handlesetBaserequest,
       WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest,
       WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest,
       WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest;

  // inputs to muxes for submodule ports
  wire [33 : 0] MUX_responseFifo_fifo$enq_1__VAL_1,
		MUX_responseFifo_fifo$enq_1__VAL_2;
  wire [31 : 0] MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__VAL_2;
  wire [7 : 0] MUX_dutWrapper_dut_fifoToAxi_burstCountReg$write_1__VAL_1;
  wire MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1;
  wire [34 : 0] newval__h3641;
  wire [33 : 0] x__h4104;
  wire [31 : 0] result__h4219,
		v___1__h2119,
		v___1__h2125,
		v___1__h3844,
		v___1__h3858,
		x__h3742,
		x__h3962,
		x__h4108;
  wire [7 : 0] spliced_bits__h2476;
  wire [3 : 0] spliced_bits__h2133,
	       spliced_bits__h2166,
	       spliced_bits__h2289,
	       spliced_bits__h2322;
  wire get_addr_ULT_0x100___d179, put_addr_ULT_0x100___d102;

  // action method put
  assign RDY_put = requestFifo_fifo$FULL_N ;

  // actionvalue method get
  assign get =
	     get_addr_ULT_0x100___d179 ?
	       CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 :
	       v___1__h3844 ;
  assign RDY_get = 1'd1 ;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = rf$D_OUT_1[0] && !interruptCleared && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // actionvalue method axi_writeAddr
  assign axi_writeAddr = dutWrapper_dut_fifoToAxi_ptrReg ;
  assign RDY_axi_writeAddr = dutWrapper_dut_fifoToAxi_operationInProgress ;

  // value method axi_writeBurstLen
  assign axi_writeBurstLen = dutWrapper_dut_fifoToAxi_burstCountReg - 8'd1 ;
  assign RDY_axi_writeBurstLen = 1'd1 ;

  // value method axi_writeBurstWidth
  assign axi_writeBurstWidth = 3'b010 ;
  assign RDY_axi_writeBurstWidth = 1'd1 ;

  // value method axi_writeBurstType
  assign axi_writeBurstType = 2'b01 ;
  assign RDY_axi_writeBurstType = 1'd1 ;

  // value method axi_writeBurstProt
  assign axi_writeBurstProt = 3'b0 ;
  assign RDY_axi_writeBurstProt = 1'd1 ;

  // value method axi_writeBurstCache
  assign axi_writeBurstCache = 4'b0011 ;
  assign RDY_axi_writeBurstCache = 1'd1 ;

  // actionvalue method axi_writeData
  assign axi_writeData = dutWrapper_dut_fifoToAxi_dfifo$D_OUT ;
  assign RDY_axi_writeData =
	     dutWrapper_dut_fifoToAxi_operationInProgress &&
	     dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N ;

  // value method axi_writeDataByteEnable
  assign axi_writeDataByteEnable = 4'b1111 ;
  assign RDY_axi_writeDataByteEnable = 1'd1 ;

  // value method axi_writeLastDataBeat
  assign axi_writeLastDataBeat =
	     dutWrapper_dut_fifoToAxi_burstCountReg == 8'd1 ;
  assign RDY_axi_writeLastDataBeat = 1'd1 ;

  // action method axi_writeResponse
  assign RDY_axi_writeResponse =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N ;

  // submodule dutWrapper_dut_fifoStatusFifo
  SizedFIFO #( /*p1width*/ 32'd32,
	       /*p2depth*/ 32'd16,
	       /*p3cntr_width*/ 32'd4,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoStatusFifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(dutWrapper_dut_fifoStatusFifo$D_IN),
								.ENQ(dutWrapper_dut_fifoStatusFifo$ENQ),
								.DEQ(dutWrapper_dut_fifoStatusFifo$DEQ),
								.CLR(dutWrapper_dut_fifoStatusFifo$CLR),
								.D_OUT(dutWrapper_dut_fifoStatusFifo$D_OUT),
								.FULL_N(dutWrapper_dut_fifoStatusFifo$FULL_N),
								.EMPTY_N(dutWrapper_dut_fifoStatusFifo$EMPTY_N));

  // submodule dutWrapper_dut_fifoToAxi_axiBrespFifo
  SizedFIFO #( /*p1width*/ 32'd2,
	       /*p2depth*/ 32'd32,
	       /*p3cntr_width*/ 32'd5,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoToAxi_axiBrespFifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(dutWrapper_dut_fifoToAxi_axiBrespFifo$D_IN),
									.ENQ(dutWrapper_dut_fifoToAxi_axiBrespFifo$ENQ),
									.DEQ(dutWrapper_dut_fifoToAxi_axiBrespFifo$DEQ),
									.CLR(dutWrapper_dut_fifoToAxi_axiBrespFifo$CLR),
									.D_OUT(dutWrapper_dut_fifoToAxi_axiBrespFifo$D_OUT),
									.FULL_N(dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N),
									.EMPTY_N(dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N));

  // submodule dutWrapper_dut_fifoToAxi_dfifo
  SizedFIFO #( /*p1width*/ 32'd32,
	       /*p2depth*/ 32'd8,
	       /*p3cntr_width*/ 32'd3,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoToAxi_dfifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(dutWrapper_dut_fifoToAxi_dfifo$D_IN),
								 .ENQ(dutWrapper_dut_fifoToAxi_dfifo$ENQ),
								 .DEQ(dutWrapper_dut_fifoToAxi_dfifo$DEQ),
								 .CLR(dutWrapper_dut_fifoToAxi_dfifo$CLR),
								 .D_OUT(dutWrapper_dut_fifoToAxi_dfifo$D_OUT),
								 .FULL_N(dutWrapper_dut_fifoToAxi_dfifo$FULL_N),
								 .EMPTY_N(dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N));

  // submodule requestFifo_fifo
  FIFO2 #( /*width*/ 32'd35,  /*guarded*/ 32'd0) requestFifo_fifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(requestFifo_fifo$D_IN),
								  .ENQ(requestFifo_fifo$ENQ),
								  .DEQ(requestFifo_fifo$DEQ),
								  .CLR(requestFifo_fifo$CLR),
								  .D_OUT(requestFifo_fifo$D_OUT),
								  .FULL_N(requestFifo_fifo$FULL_N),
								  .EMPTY_N(requestFifo_fifo$EMPTY_N));

  // submodule responseFifo_fifo
  FIFO2 #( /*width*/ 32'd34,
	   /*guarded*/ 32'd0) responseFifo_fifo(.RST(RST_N),
						.CLK(CLK),
						.D_IN(responseFifo_fifo$D_IN),
						.ENQ(responseFifo_fifo$ENQ),
						.DEQ(responseFifo_fifo$DEQ),
						.CLR(responseFifo_fifo$CLR),
						.D_OUT(responseFifo_fifo$D_OUT),
						.FULL_N(responseFifo_fifo$FULL_N),
						.EMPTY_N(responseFifo_fifo$EMPTY_N));

  // submodule rf
  RegFile #( /*addr_width*/ 32'd12,
	     /*data_width*/ 32'd32,
	     /*lo*/ 12'd0,
	     /*hi*/ 12'hFFF) rf(.CLK(CLK),
				.ADDR_1(rf$ADDR_1),
				.ADDR_2(rf$ADDR_2),
				.ADDR_3(rf$ADDR_3),
				.ADDR_4(rf$ADDR_4),
				.ADDR_5(rf$ADDR_5),
				.ADDR_IN(rf$ADDR_IN),
				.D_IN(rf$D_IN),
				.WE(rf$WE),
				.D_OUT_1(rf$D_OUT_1),
				.D_OUT_2(rf$D_OUT_2),
				.D_OUT_3(),
				.D_OUT_4(),
				.D_OUT_5());

  // rule RL_dutWrapper_handlesetBaserequest
  assign WILL_FIRE_RL_dutWrapper_handlesetBaserequest =
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[34:32] == 3'd0 ;

  // rule RL_dutWrapper_handlesetBoundsrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest =
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[34:32] == 3'd1 ;

  // rule RL_dutWrapper_handlesetThresholdrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest =
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[34:32] == 3'd2 ;

  // rule RL_dutWrapper_fifoStatusresponse
  assign WILL_FIRE_RL_dutWrapper_fifoStatusresponse =
	     dutWrapper_dut_fifoStatusFifo$EMPTY_N &&
	     responseFifo_fifo$FULL_N ;

  // rule RL_dutWrapper_handlereadFifoStatusrequest
  assign WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest =
	     requestFifo_fifo$EMPTY_N &&
	     dutWrapper_dut_fifoStatusFifo$FULL_N &&
	     requestFifo_fifo$D_OUT[34:32] == 3'd5 ;

  // rule RL_dutWrapper_handleenqrequest
  assign WILL_FIRE_RL_dutWrapper_handleenqrequest =
	     requestFifo_fifo$EMPTY_N &&
	     dutWrapper_dut_fifoToAxi_dfifo$FULL_N &&
	     requestFifo_fifo$D_OUT[34:32] == 3'd4 ;

  // rule RL_dutWrapper_axiResponseresponse
  assign WILL_FIRE_RL_dutWrapper_axiResponseresponse =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N &&
	     responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse &&
	     !EN_axi_writeResponse ;

  // rule RL_dutWrapper_dut_fifoToAxi_updateBurstCount
  assign WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount =
	     !dutWrapper_dut_fifoToAxi_dfifo$FULL_N &&
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     dutWrapper_dut_fifoToAxi_enabledReg ;

  // rule RL_dutWrapper_handlesetEnabledrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest =
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[34:32] == 3'd3 ;

  // inputs to muxes for submodule ports
  assign MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1 =
	     EN_axi_writeData &&
	     (dutWrapper_dut_fifoToAxi_burstCountReg == 8'd1 ||
	      dutWrapper_dut_fifoToAxi_burstCountReg == 8'd0) ;
  assign MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ;
  assign MUX_dutWrapper_dut_fifoToAxi_burstCountReg$write_1__VAL_1 =
	     dutWrapper_dut_fifoToAxi_burstCountReg - 8'd1 ;
  assign MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__VAL_2 =
	     dutWrapper_dut_fifoToAxi_ptrReg + 32'd4 ;
  assign MUX_responseFifo_fifo$enq_1__VAL_1 =
	     { 2'd0, dutWrapper_dut_fifoStatusFifo$D_OUT } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_2 =
	     { 32'd1073741824, dutWrapper_dut_fifoToAxi_axiBrespFifo$D_OUT } ;

  // register dutWrapper_dut_fifoToAxi_addrsWrittenCount
  assign dutWrapper_dut_fifoToAxi_addrsWrittenCount$D_IN =
	     dutWrapper_dut_fifoToAxi_addrsWrittenCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_addrsWrittenCount$EN = EN_axi_writeAddr ;

  // register dutWrapper_dut_fifoToAxi_baseReg
  assign dutWrapper_dut_fifoToAxi_baseReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_baseReg$EN =
	     MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1 ;

  // register dutWrapper_dut_fifoToAxi_boundsReg
  assign dutWrapper_dut_fifoToAxi_boundsReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_boundsReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ;

  // register dutWrapper_dut_fifoToAxi_burstCountReg
  assign dutWrapper_dut_fifoToAxi_burstCountReg$D_IN =
	     EN_axi_writeData ?
	       MUX_dutWrapper_dut_fifoToAxi_burstCountReg$write_1__VAL_1 :
	       8'd8 ;
  assign dutWrapper_dut_fifoToAxi_burstCountReg$EN =
	     EN_axi_writeData ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoToAxi_enabledReg
  assign dutWrapper_dut_fifoToAxi_enabledReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] != 32'd0 ;
  assign dutWrapper_dut_fifoToAxi_enabledReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ;

  // register dutWrapper_dut_fifoToAxi_lastDataBeatCount
  assign dutWrapper_dut_fifoToAxi_lastDataBeatCount$D_IN =
	     dutWrapper_dut_fifoToAxi_lastDataBeatCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_lastDataBeatCount$EN =
	     MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1 ;

  // register dutWrapper_dut_fifoToAxi_operationInProgress
  assign dutWrapper_dut_fifoToAxi_operationInProgress$D_IN =
	     !MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1 ;
  assign dutWrapper_dut_fifoToAxi_operationInProgress$EN =
	     EN_axi_writeData &&
	     (dutWrapper_dut_fifoToAxi_burstCountReg == 8'd1 ||
	      dutWrapper_dut_fifoToAxi_burstCountReg == 8'd0) ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoToAxi_ptrReg
  assign dutWrapper_dut_fifoToAxi_ptrReg$D_IN =
	     MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1 ?
	       requestFifo_fifo$D_OUT[31:0] :
	       MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__VAL_2 ;
  assign dutWrapper_dut_fifoToAxi_ptrReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ||
	     EN_axi_writeData ;

  // register dutWrapper_dut_fifoToAxi_thresholdReg
  assign dutWrapper_dut_fifoToAxi_thresholdReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_thresholdReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ;

  // register dutWrapper_dut_fifoToAxi_wordsEnqCount
  assign dutWrapper_dut_fifoToAxi_wordsEnqCount$D_IN =
	     dutWrapper_dut_fifoToAxi_wordsEnqCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_wordsEnqCount$EN =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ;

  // register dutWrapper_dut_fifoToAxi_wordsWrittenCount
  assign dutWrapper_dut_fifoToAxi_wordsWrittenCount$D_IN =
	     dutWrapper_dut_fifoToAxi_wordsWrittenCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_wordsWrittenCount$EN = EN_axi_writeData ;

  // register dutWrapper_dut_result2Reg
  assign dutWrapper_dut_result2Reg$D_IN = 33'h0 ;
  assign dutWrapper_dut_result2Reg$EN = 1'b0 ;

  // register dutWrapper_dut_resultReg
  assign dutWrapper_dut_resultReg$D_IN = 33'h0 ;
  assign dutWrapper_dut_resultReg$EN = 1'b0 ;

  // register dutWrapper_requestFired
  assign dutWrapper_requestFired$D_IN = dutWrapper_requestFired + 32'd1 ;
  assign dutWrapper_requestFired$EN =
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // register dutWrapper_responseFired
  assign dutWrapper_responseFired$D_IN = dutWrapper_responseFired + 32'd1 ;
  assign dutWrapper_responseFired$EN =
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ||
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN =
	     EN_get && !get_addr_ULT_0x100___d179 &&
	     responseFifo_fifo$EMPTY_N ;

  // register interruptCleared
  assign interruptCleared$D_IN = !(!interrupted) ;
  assign interruptCleared$EN =
	     EN_put && put_addr == 12'h0 && put_v[0] && interrupted ||
	     !interrupted ;

  // register interrupted
  assign interrupted$D_IN = responseFifo_fifo$EMPTY_N ;
  assign interrupted$EN = 1'd1 ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN = EN_put && !put_addr_ULT_0x100___d102 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { put_v, requestFifo_buff[34:32] } :
	       newval__h3641 ;
  assign requestFifo_buff$EN = EN_put && !put_addr_ULT_0x100___d102 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h3742 ;
  assign requestFifo_count$EN = EN_put && !put_addr_ULT_0x100___d102 ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     (responseFifo_count == 32'd1) ? 32'd0 : x__h3962 ;
  assign responseFifo_count$EN =
	     EN_get && !get_addr_ULT_0x100___d179 &&
	     responseFifo_fifo$EMPTY_N ;

  // register underflowCount
  assign underflowCount$D_IN = underflowCount + 32'd1 ;
  assign underflowCount$EN =
	     EN_get && !get_addr_ULT_0x100___d179 &&
	     !responseFifo_fifo$EMPTY_N ;

  // submodule dutWrapper_dut_fifoStatusFifo
  always@(requestFifo_fifo$D_OUT or
	  dutWrapper_dut_fifoToAxi_baseReg or
	  dutWrapper_dut_fifoToAxi_boundsReg or
	  dutWrapper_dut_fifoToAxi_ptrReg or
	  v___1__h2119 or
	  v___1__h2125 or
	  spliced_bits__h2133 or
	  spliced_bits__h2166 or
	  spliced_bits__h2289 or
	  spliced_bits__h2322 or
	  spliced_bits__h2476 or
	  dutWrapper_dut_fifoToAxi_burstCountReg or
	  dutWrapper_dut_fifoToAxi_wordsEnqCount or
	  dutWrapper_dut_fifoToAxi_addrsWrittenCount or
	  dutWrapper_dut_fifoToAxi_wordsWrittenCount or
	  dutWrapper_dut_fifoToAxi_lastDataBeatCount)
  begin
    case (requestFifo_fifo$D_OUT[11:0])
      12'h0:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_baseReg;
      12'h004:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_boundsReg;
      12'h008:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_ptrReg;
      12'h00C: dutWrapper_dut_fifoStatusFifo$D_IN = v___1__h2119;
      12'h010: dutWrapper_dut_fifoStatusFifo$D_IN = v___1__h2125;
      12'h014:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      { 16'd0, spliced_bits__h2133, 8'd0, spliced_bits__h2166 };
      12'h018:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      { 16'd0, spliced_bits__h2289, 8'd0, spliced_bits__h2322 };
      12'h01C:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      { 8'd187,
		spliced_bits__h2476,
		8'd0,
		dutWrapper_dut_fifoToAxi_burstCountReg };
      12'h020:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_wordsEnqCount;
      12'h024:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_addrsWrittenCount;
      12'h028:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_wordsWrittenCount;
      12'h02C:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_lastDataBeatCount;
      default: dutWrapper_dut_fifoStatusFifo$D_IN = 32'h02142042;
    endcase
  end
  assign dutWrapper_dut_fifoStatusFifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ;
  assign dutWrapper_dut_fifoStatusFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;
  assign dutWrapper_dut_fifoStatusFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fifoToAxi_axiBrespFifo
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$D_IN =
	     axi_writeResponse_responseCode ;
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$ENQ = EN_axi_writeResponse ;
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ;
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fifoToAxi_dfifo
  assign dutWrapper_dut_fifoToAxi_dfifo$D_IN = requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_dfifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ;
  assign dutWrapper_dut_fifoToAxi_dfifo$DEQ = EN_axi_writeData ;
  assign dutWrapper_dut_fifoToAxi_dfifo$CLR = 1'b0 ;

  // submodule requestFifo_fifo
  assign requestFifo_fifo$D_IN = { put_v[2:0], requestFifo_buff[34:3] } ;
  assign requestFifo_fifo$ENQ =
	     EN_put && !put_addr_ULT_0x100___d102 &&
	     requestFifo_count == 32'd1 ;
  assign requestFifo_fifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;
  assign requestFifo_fifo$CLR = 1'b0 ;

  // submodule responseFifo_fifo
  assign responseFifo_fifo$D_IN =
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ?
	       MUX_responseFifo_fifo$enq_1__VAL_1 :
	       MUX_responseFifo_fifo$enq_1__VAL_2 ;
  assign responseFifo_fifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ||
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ;
  assign responseFifo_fifo$DEQ =
	     EN_get && !get_addr_ULT_0x100___d179 &&
	     responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd1 ;
  assign responseFifo_fifo$CLR = 1'b0 ;

  // submodule rf
  assign rf$ADDR_1 = 12'h004 ;
  assign rf$ADDR_2 = get_addr ;
  assign rf$ADDR_3 = 12'h0 ;
  assign rf$ADDR_4 = 12'h0 ;
  assign rf$ADDR_5 = 12'h0 ;
  assign rf$ADDR_IN = put_addr ;
  assign rf$D_IN = put_v ;
  assign rf$WE = EN_put && put_addr_ULT_0x100___d102 ;

  // remaining internal signals
  assign get_addr_ULT_0x100___d179 = get_addr < 12'h100 ;
  assign newval__h3641 = { put_v, requestFifo_buff[34:32] } ;
  assign put_addr_ULT_0x100___d102 = put_addr < 12'h100 ;
  assign result__h4219 = { rf$D_OUT_2[31:1], interrupted } ;
  assign spliced_bits__h2133 =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N ? 4'h0 : 4'hF ;
  assign spliced_bits__h2166 =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N ? 4'h1 : 4'hE ;
  assign spliced_bits__h2289 =
	     dutWrapper_dut_fifoToAxi_dfifo$FULL_N ? 4'h0 : 4'hF ;
  assign spliced_bits__h2322 =
	     dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N ? 4'h1 : 4'hE ;
  assign spliced_bits__h2476 =
	     dutWrapper_dut_fifoToAxi_operationInProgress ? 8'hAA : 8'h11 ;
  assign v___1__h2119 = { 24'd0, dutWrapper_dut_fifoToAxi_burstCountReg } ;
  assign v___1__h2125 =
	     dutWrapper_dut_fifoToAxi_enabledReg ?
	       32'hEEEEEEEE :
	       32'hDDDDDDDD ;
  assign v___1__h3844 =
	     responseFifo_fifo$EMPTY_N ? v___1__h3858 : 32'h050A050A ;
  assign v___1__h3858 =
	     responseFifo_fifo$EMPTY_N ? x__h4104[31:0] : 32'h050A050A ;
  assign x__h3742 = requestFifo_count + 32'd1 ;
  assign x__h3962 = responseFifo_count + 32'd1 ;
  assign x__h4104 = responseFifo_fifo$D_OUT >> x__h4108 ;
  assign x__h4108 = { responseFifo_count[26:0], 5'd0 } ;
  always@(get_addr or
	  rf$D_OUT_2 or
	  result__h4219 or
	  dutWrapper_requestFired or
	  dutWrapper_responseFired or
	  underflowCount or putWordCount or getWordCount)
  begin
    case (get_addr)
      12'h0:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      result__h4219;
      12'h008:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      32'h02142011;
      12'h010:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      dutWrapper_requestFired;
      12'h014:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      dutWrapper_responseFired;
      12'h018:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      underflowCount;
      12'h020:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      putWordCount;
      12'h024:
	  CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
	      getWordCount;
      default: CASE_get_addr_rfD_OUT_2_0x0_result219_0x8_0x2_ETC__q1 =
		   rf$D_OUT_2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dutWrapper_dut_fifoToAxi_addrsWrittenCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoToAxi_baseReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_boundsReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_burstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dutWrapper_dut_fifoToAxi_enabledReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_fifoToAxi_lastDataBeatCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoToAxi_operationInProgress <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoToAxi_ptrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_thresholdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_wordsEnqCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_wordsWrittenCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_result2Reg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interruptCleared <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 35'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	underflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dutWrapper_dut_fifoToAxi_addrsWrittenCount$EN)
	  dutWrapper_dut_fifoToAxi_addrsWrittenCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_addrsWrittenCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_baseReg$EN)
	  dutWrapper_dut_fifoToAxi_baseReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_baseReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_boundsReg$EN)
	  dutWrapper_dut_fifoToAxi_boundsReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_boundsReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_burstCountReg$EN)
	  dutWrapper_dut_fifoToAxi_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_burstCountReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_enabledReg$EN)
	  dutWrapper_dut_fifoToAxi_enabledReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_enabledReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_lastDataBeatCount$EN)
	  dutWrapper_dut_fifoToAxi_lastDataBeatCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_lastDataBeatCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_operationInProgress$EN)
	  dutWrapper_dut_fifoToAxi_operationInProgress <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_operationInProgress$D_IN;
	if (dutWrapper_dut_fifoToAxi_ptrReg$EN)
	  dutWrapper_dut_fifoToAxi_ptrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_ptrReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_thresholdReg$EN)
	  dutWrapper_dut_fifoToAxi_thresholdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_thresholdReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_wordsEnqCount$EN)
	  dutWrapper_dut_fifoToAxi_wordsEnqCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_wordsEnqCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_wordsWrittenCount$EN)
	  dutWrapper_dut_fifoToAxi_wordsWrittenCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_wordsWrittenCount$D_IN;
	if (dutWrapper_dut_result2Reg$EN)
	  dutWrapper_dut_result2Reg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_result2Reg$D_IN;
	if (dutWrapper_dut_resultReg$EN)
	  dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_resultReg$D_IN;
	if (dutWrapper_requestFired$EN)
	  dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestFired$D_IN;
	if (dutWrapper_responseFired$EN)
	  dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseFired$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (interruptCleared$EN)
	  interruptCleared <= `BSV_ASSIGNMENT_DELAY interruptCleared$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
	if (underflowCount$EN)
	  underflowCount <= `BSV_ASSIGNMENT_DELAY underflowCount$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dutWrapper_dut_fifoToAxi_addrsWrittenCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_baseReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_boundsReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_burstCountReg = 8'hAA;
    dutWrapper_dut_fifoToAxi_enabledReg = 1'h0;
    dutWrapper_dut_fifoToAxi_lastDataBeatCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_operationInProgress = 1'h0;
    dutWrapper_dut_fifoToAxi_ptrReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_thresholdReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_wordsEnqCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_wordsWrittenCount = 32'hAAAAAAAA;
    dutWrapper_dut_result2Reg = 33'h0AAAAAAAA;
    dutWrapper_dut_resultReg = 33'h0AAAAAAAA;
    dutWrapper_requestFired = 32'hAAAAAAAA;
    dutWrapper_responseFired = 32'hAAAAAAAA;
    getWordCount = 32'hAAAAAAAA;
    interruptCleared = 1'h0;
    interrupted = 1'h0;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 35'h2AAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    responseFifo_count = 32'hAAAAAAAA;
    underflowCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkIpSlaveWithMaster

