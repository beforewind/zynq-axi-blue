//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Fri Jan 18 16:58:14 EST 2013
//
// Method conflict info:
// Method: error
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: interrupt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: ctrl_put
//
// Method: ctrl_put
// Conflict-free: error,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: interrupt, ctrl_get
// Conflicts: ctrl_put
//
// Method: ctrl_get
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: ctrl_put, fifo_put, fifo_get
// Sequenced before (restricted): axi0r_readAddr, axi0r_readBurstLen
//
// Method: fifo_put
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: ctrl_get
// Conflicts: fifo_put
//
// Method: fifo_get
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       fifo_put,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: ctrl_get
// Conflicts: fifo_get
//
// Method: axi0w_writeAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi0w_writeData
// Sequenced after: axi0w_writeId
// Conflicts: axi0w_writeAddr
//
// Method: axi0w_writeBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi0w_writeData
//
// Method: axi0w_writeBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0w_writeBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0w_writeBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0w_writeBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0w_writeId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi0w_writeAddr
//
// Method: axi0w_writeData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: axi0w_writeAddr, axi0w_writeBurstLen, axi0w_writeLastDataBeat
// Conflicts: axi0w_writeData
//
// Method: axi0w_writeDataByteEnable
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0w_writeLastDataBeat
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi0w_writeData
//
// Method: axi0w_writeResponse
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Conflicts: axi0w_writeResponse
//
// Method: axi0r_readAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: axi0r_readBurstLen, axi0r_readId
// Sequenced after (restricted): ctrl_get
// Conflicts: axi0r_readAddr
//
// Method: axi0r_readBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi0r_readAddr
// Sequenced after (restricted): ctrl_get
//
// Method: axi0r_readBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0r_readBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0r_readBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0r_readBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi0r_readId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi0r_readAddr
//
// Method: axi0r_readData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Conflicts: axi0r_readData
//
// Method: axi1w_writeAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi1w_writeData
// Sequenced after: axi1w_writeId
// Conflicts: axi1w_writeAddr
//
// Method: axi1w_writeBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi1w_writeData
//
// Method: axi1w_writeBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1w_writeBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1w_writeBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1w_writeBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1w_writeId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi1w_writeAddr
//
// Method: axi1w_writeData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: axi1w_writeAddr, axi1w_writeBurstLen, axi1w_writeLastDataBeat
// Conflicts: axi1w_writeData
//
// Method: axi1w_writeDataByteEnable
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1w_writeLastDataBeat
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi1w_writeData
//
// Method: axi1w_writeResponse
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Conflicts: axi1w_writeResponse
//
// Method: axi1r_readAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: axi1r_readBurstLen, axi1r_readId
// Conflicts: axi1r_readAddr
//
// Method: axi1r_readBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi1r_readAddr
//
// Method: axi1r_readBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1r_readBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1r_readBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1r_readBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi1r_readId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi1r_readAddr
//
// Method: axi1r_readData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Conflicts: axi1r_readData
//
// Method: axi2w_writeAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi2w_writeData
// Sequenced after: axi2w_writeId
// Conflicts: axi2w_writeAddr
//
// Method: axi2w_writeBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi2w_writeData
//
// Method: axi2w_writeBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2w_writeBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2w_writeBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2w_writeBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2w_writeId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi2w_writeAddr
//
// Method: axi2w_writeData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced after: axi2w_writeAddr, axi2w_writeBurstLen, axi2w_writeLastDataBeat
// Conflicts: axi2w_writeData
//
// Method: axi2w_writeDataByteEnable
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2w_writeLastDataBeat
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi2w_writeData
//
// Method: axi2w_writeResponse
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Conflicts: axi2w_writeResponse
//
// Method: axi2r_readAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readData
// Sequenced after: axi2r_readBurstLen, axi2r_readId
// Conflicts: axi2r_readAddr
//
// Method: axi2r_readBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi2r_readAddr
//
// Method: axi2r_readBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2r_readBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2r_readBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2r_readBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
//
// Method: axi2r_readId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId,
// 	       axi2r_readData
// Sequenced before: axi2r_readAddr
//
// Method: axi2r_readData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axi0w_writeAddr,
// 	       axi0w_writeBurstLen,
// 	       axi0w_writeBurstWidth,
// 	       axi0w_writeBurstType,
// 	       axi0w_writeBurstProt,
// 	       axi0w_writeBurstCache,
// 	       axi0w_writeId,
// 	       axi0w_writeData,
// 	       axi0w_writeDataByteEnable,
// 	       axi0w_writeLastDataBeat,
// 	       axi0w_writeResponse,
// 	       axi0r_readAddr,
// 	       axi0r_readBurstLen,
// 	       axi0r_readBurstWidth,
// 	       axi0r_readBurstType,
// 	       axi0r_readBurstProt,
// 	       axi0r_readBurstCache,
// 	       axi0r_readId,
// 	       axi0r_readData,
// 	       axi1w_writeAddr,
// 	       axi1w_writeBurstLen,
// 	       axi1w_writeBurstWidth,
// 	       axi1w_writeBurstType,
// 	       axi1w_writeBurstProt,
// 	       axi1w_writeBurstCache,
// 	       axi1w_writeId,
// 	       axi1w_writeData,
// 	       axi1w_writeDataByteEnable,
// 	       axi1w_writeLastDataBeat,
// 	       axi1w_writeResponse,
// 	       axi1r_readAddr,
// 	       axi1r_readBurstLen,
// 	       axi1r_readBurstWidth,
// 	       axi1r_readBurstType,
// 	       axi1r_readBurstProt,
// 	       axi1r_readBurstCache,
// 	       axi1r_readId,
// 	       axi1r_readData,
// 	       axi2w_writeAddr,
// 	       axi2w_writeBurstLen,
// 	       axi2w_writeBurstWidth,
// 	       axi2w_writeBurstType,
// 	       axi2w_writeBurstProt,
// 	       axi2w_writeBurstCache,
// 	       axi2w_writeId,
// 	       axi2w_writeData,
// 	       axi2w_writeDataByteEnable,
// 	       axi2w_writeLastDataBeat,
// 	       axi2w_writeResponse,
// 	       axi2r_readAddr,
// 	       axi2r_readBurstLen,
// 	       axi2r_readBurstWidth,
// 	       axi2r_readBurstType,
// 	       axi2r_readBurstProt,
// 	       axi2r_readBurstCache,
// 	       axi2r_readId
// Conflicts: axi2r_readData
//
//
// Ports:
// Name                         I/O  size props
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// RDY_ctrl_put                   O     1 const
// ctrl_get                       O    32
// RDY_ctrl_get                   O     1 const
// RDY_fifo_put                   O     1
// fifo_get                       O    32
// RDY_fifo_get                   O     1 const
// axi0w_writeAddr                O    32 reg
// RDY_axi0w_writeAddr            O     1
// axi0w_writeBurstLen            O     8
// RDY_axi0w_writeBurstLen        O     1 const
// axi0w_writeBurstWidth          O     3 const
// RDY_axi0w_writeBurstWidth      O     1 const
// axi0w_writeBurstType           O     2 const
// RDY_axi0w_writeBurstType       O     1 const
// axi0w_writeBurstProt           O     3 const
// RDY_axi0w_writeBurstProt       O     1 const
// axi0w_writeBurstCache          O     4 const
// RDY_axi0w_writeBurstCache      O     1 const
// axi0w_writeId                  O     1 reg
// RDY_axi0w_writeId              O     1 const
// axi0w_writeData                O    64
// RDY_axi0w_writeData            O     1
// axi0w_writeDataByteEnable      O     8 const
// RDY_axi0w_writeDataByteEnable  O     1 const
// axi0w_writeLastDataBeat        O     1
// RDY_axi0w_writeLastDataBeat    O     1 const
// RDY_axi0w_writeResponse        O     1
// axi0r_readAddr                 O    32
// RDY_axi0r_readAddr             O     1
// axi0r_readBurstLen             O     8
// RDY_axi0r_readBurstLen         O     1
// axi0r_readBurstWidth           O     3 const
// RDY_axi0r_readBurstWidth       O     1 const
// axi0r_readBurstType            O     2 const
// RDY_axi0r_readBurstType        O     1 const
// axi0r_readBurstProt            O     3 const
// RDY_axi0r_readBurstProt        O     1 const
// axi0r_readBurstCache           O     4 const
// RDY_axi0r_readBurstCache       O     1 const
// axi0r_readId                   O     1 reg
// RDY_axi0r_readId               O     1 const
// RDY_axi0r_readData             O     1
// axi1w_writeAddr                O    32 reg
// RDY_axi1w_writeAddr            O     1
// axi1w_writeBurstLen            O     8
// RDY_axi1w_writeBurstLen        O     1 const
// axi1w_writeBurstWidth          O     3 const
// RDY_axi1w_writeBurstWidth      O     1 const
// axi1w_writeBurstType           O     2 const
// RDY_axi1w_writeBurstType       O     1 const
// axi1w_writeBurstProt           O     3 const
// RDY_axi1w_writeBurstProt       O     1 const
// axi1w_writeBurstCache          O     4 const
// RDY_axi1w_writeBurstCache      O     1 const
// axi1w_writeId                  O     1 reg
// RDY_axi1w_writeId              O     1 const
// axi1w_writeData                O    64
// RDY_axi1w_writeData            O     1
// axi1w_writeDataByteEnable      O     8 const
// RDY_axi1w_writeDataByteEnable  O     1 const
// axi1w_writeLastDataBeat        O     1
// RDY_axi1w_writeLastDataBeat    O     1 const
// RDY_axi1w_writeResponse        O     1
// axi1r_readAddr                 O    32
// RDY_axi1r_readAddr             O     1
// axi1r_readBurstLen             O     8
// RDY_axi1r_readBurstLen         O     1
// axi1r_readBurstWidth           O     3 const
// RDY_axi1r_readBurstWidth       O     1 const
// axi1r_readBurstType            O     2 const
// RDY_axi1r_readBurstType        O     1 const
// axi1r_readBurstProt            O     3 const
// RDY_axi1r_readBurstProt        O     1 const
// axi1r_readBurstCache           O     4 const
// RDY_axi1r_readBurstCache       O     1 const
// axi1r_readId                   O     1 reg
// RDY_axi1r_readId               O     1 const
// RDY_axi1r_readData             O     1
// axi2w_writeAddr                O    32 reg
// RDY_axi2w_writeAddr            O     1
// axi2w_writeBurstLen            O     8
// RDY_axi2w_writeBurstLen        O     1 const
// axi2w_writeBurstWidth          O     3 const
// RDY_axi2w_writeBurstWidth      O     1 const
// axi2w_writeBurstType           O     2 const
// RDY_axi2w_writeBurstType       O     1 const
// axi2w_writeBurstProt           O     3 const
// RDY_axi2w_writeBurstProt       O     1 const
// axi2w_writeBurstCache          O     4 const
// RDY_axi2w_writeBurstCache      O     1 const
// axi2w_writeId                  O     1 reg
// RDY_axi2w_writeId              O     1 const
// axi2w_writeData                O    64
// RDY_axi2w_writeData            O     1
// axi2w_writeDataByteEnable      O     8 const
// RDY_axi2w_writeDataByteEnable  O     1 const
// axi2w_writeLastDataBeat        O     1
// RDY_axi2w_writeLastDataBeat    O     1 const
// RDY_axi2w_writeResponse        O     1
// axi2r_readAddr                 O    32
// RDY_axi2r_readAddr             O     1
// axi2r_readBurstLen             O     8
// RDY_axi2r_readBurstLen         O     1
// axi2r_readBurstWidth           O     3 const
// RDY_axi2r_readBurstWidth       O     1 const
// axi2r_readBurstType            O     2 const
// RDY_axi2r_readBurstType        O     1 const
// axi2r_readBurstProt            O     3 const
// RDY_axi2r_readBurstProt        O     1 const
// axi2r_readBurstCache           O     4 const
// RDY_axi2r_readBurstCache       O     1 const
// axi2r_readId                   O     1 reg
// RDY_axi2r_readId               O     1 const
// RDY_axi2r_readData             O     1
// CLK_axi_clk                    I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ctrl_put_addr                  I    12
// ctrl_put_v                     I    32
// ctrl_get_addr                  I    12
// fifo_put_addr                  I    12 unused
// fifo_put_v                     I    32
// fifo_get_addr                  I    12 unused
// axi0w_writeResponse_responseCode  I     2
// axi0w_writeResponse_id         I     1 unused
// axi0r_readData_data            I    64
// axi0r_readData_resp            I     2 unused
// axi0r_readData_last            I     1 unused
// axi0r_readData_id              I     1 unused
// axi1w_writeResponse_responseCode  I     2
// axi1w_writeResponse_id         I     1 unused
// axi1r_readData_data            I    64
// axi1r_readData_resp            I     2 unused
// axi1r_readData_last            I     1 unused
// axi1r_readData_id              I     1 unused
// axi2w_writeResponse_responseCode  I     2
// axi2w_writeResponse_id         I     1 unused
// axi2r_readData_data            I    64
// axi2r_readData_resp            I     2 unused
// axi2r_readData_last            I     1 unused
// axi2r_readData_id              I     1 unused
// EN_ctrl_put                    I     1
// EN_fifo_put                    I     1
// EN_axi0w_writeResponse         I     1
// EN_axi0r_readData              I     1
// EN_axi1w_writeResponse         I     1
// EN_axi1r_readData              I     1
// EN_axi2w_writeResponse         I     1
// EN_axi2r_readData              I     1
// EN_ctrl_get                    I     1 unused
// EN_fifo_get                    I     1
// EN_axi0w_writeAddr             I     1
// EN_axi0w_writeData             I     1
// EN_axi0r_readAddr              I     1
// EN_axi1w_writeAddr             I     1
// EN_axi1w_writeData             I     1
// EN_axi1r_readAddr              I     1
// EN_axi2w_writeAddr             I     1
// EN_axi2w_writeData             I     1
// EN_axi2r_readAddr              I     1
//
// Combinational paths from inputs to outputs:
//   ctrl_get_addr -> ctrl_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFoo(CLK_axi_clk,
			   CLK,
			   RST_N,

			   error,
			   RDY_error,

			   interrupt,
			   RDY_interrupt,

			   ctrl_put_addr,
			   ctrl_put_v,
			   EN_ctrl_put,
			   RDY_ctrl_put,

			   ctrl_get_addr,
			   EN_ctrl_get,
			   ctrl_get,
			   RDY_ctrl_get,

			   fifo_put_addr,
			   fifo_put_v,
			   EN_fifo_put,
			   RDY_fifo_put,

			   fifo_get_addr,
			   EN_fifo_get,
			   fifo_get,
			   RDY_fifo_get,

			   EN_axi0w_writeAddr,
			   axi0w_writeAddr,
			   RDY_axi0w_writeAddr,

			   axi0w_writeBurstLen,
			   RDY_axi0w_writeBurstLen,

			   axi0w_writeBurstWidth,
			   RDY_axi0w_writeBurstWidth,

			   axi0w_writeBurstType,
			   RDY_axi0w_writeBurstType,

			   axi0w_writeBurstProt,
			   RDY_axi0w_writeBurstProt,

			   axi0w_writeBurstCache,
			   RDY_axi0w_writeBurstCache,

			   axi0w_writeId,
			   RDY_axi0w_writeId,

			   EN_axi0w_writeData,
			   axi0w_writeData,
			   RDY_axi0w_writeData,

			   axi0w_writeDataByteEnable,
			   RDY_axi0w_writeDataByteEnable,

			   axi0w_writeLastDataBeat,
			   RDY_axi0w_writeLastDataBeat,

			   axi0w_writeResponse_responseCode,
			   axi0w_writeResponse_id,
			   EN_axi0w_writeResponse,
			   RDY_axi0w_writeResponse,

			   EN_axi0r_readAddr,
			   axi0r_readAddr,
			   RDY_axi0r_readAddr,

			   axi0r_readBurstLen,
			   RDY_axi0r_readBurstLen,

			   axi0r_readBurstWidth,
			   RDY_axi0r_readBurstWidth,

			   axi0r_readBurstType,
			   RDY_axi0r_readBurstType,

			   axi0r_readBurstProt,
			   RDY_axi0r_readBurstProt,

			   axi0r_readBurstCache,
			   RDY_axi0r_readBurstCache,

			   axi0r_readId,
			   RDY_axi0r_readId,

			   axi0r_readData_data,
			   axi0r_readData_resp,
			   axi0r_readData_last,
			   axi0r_readData_id,
			   EN_axi0r_readData,
			   RDY_axi0r_readData,

			   EN_axi1w_writeAddr,
			   axi1w_writeAddr,
			   RDY_axi1w_writeAddr,

			   axi1w_writeBurstLen,
			   RDY_axi1w_writeBurstLen,

			   axi1w_writeBurstWidth,
			   RDY_axi1w_writeBurstWidth,

			   axi1w_writeBurstType,
			   RDY_axi1w_writeBurstType,

			   axi1w_writeBurstProt,
			   RDY_axi1w_writeBurstProt,

			   axi1w_writeBurstCache,
			   RDY_axi1w_writeBurstCache,

			   axi1w_writeId,
			   RDY_axi1w_writeId,

			   EN_axi1w_writeData,
			   axi1w_writeData,
			   RDY_axi1w_writeData,

			   axi1w_writeDataByteEnable,
			   RDY_axi1w_writeDataByteEnable,

			   axi1w_writeLastDataBeat,
			   RDY_axi1w_writeLastDataBeat,

			   axi1w_writeResponse_responseCode,
			   axi1w_writeResponse_id,
			   EN_axi1w_writeResponse,
			   RDY_axi1w_writeResponse,

			   EN_axi1r_readAddr,
			   axi1r_readAddr,
			   RDY_axi1r_readAddr,

			   axi1r_readBurstLen,
			   RDY_axi1r_readBurstLen,

			   axi1r_readBurstWidth,
			   RDY_axi1r_readBurstWidth,

			   axi1r_readBurstType,
			   RDY_axi1r_readBurstType,

			   axi1r_readBurstProt,
			   RDY_axi1r_readBurstProt,

			   axi1r_readBurstCache,
			   RDY_axi1r_readBurstCache,

			   axi1r_readId,
			   RDY_axi1r_readId,

			   axi1r_readData_data,
			   axi1r_readData_resp,
			   axi1r_readData_last,
			   axi1r_readData_id,
			   EN_axi1r_readData,
			   RDY_axi1r_readData,

			   EN_axi2w_writeAddr,
			   axi2w_writeAddr,
			   RDY_axi2w_writeAddr,

			   axi2w_writeBurstLen,
			   RDY_axi2w_writeBurstLen,

			   axi2w_writeBurstWidth,
			   RDY_axi2w_writeBurstWidth,

			   axi2w_writeBurstType,
			   RDY_axi2w_writeBurstType,

			   axi2w_writeBurstProt,
			   RDY_axi2w_writeBurstProt,

			   axi2w_writeBurstCache,
			   RDY_axi2w_writeBurstCache,

			   axi2w_writeId,
			   RDY_axi2w_writeId,

			   EN_axi2w_writeData,
			   axi2w_writeData,
			   RDY_axi2w_writeData,

			   axi2w_writeDataByteEnable,
			   RDY_axi2w_writeDataByteEnable,

			   axi2w_writeLastDataBeat,
			   RDY_axi2w_writeLastDataBeat,

			   axi2w_writeResponse_responseCode,
			   axi2w_writeResponse_id,
			   EN_axi2w_writeResponse,
			   RDY_axi2w_writeResponse,

			   EN_axi2r_readAddr,
			   axi2r_readAddr,
			   RDY_axi2r_readAddr,

			   axi2r_readBurstLen,
			   RDY_axi2r_readBurstLen,

			   axi2r_readBurstWidth,
			   RDY_axi2r_readBurstWidth,

			   axi2r_readBurstType,
			   RDY_axi2r_readBurstType,

			   axi2r_readBurstProt,
			   RDY_axi2r_readBurstProt,

			   axi2r_readBurstCache,
			   RDY_axi2r_readBurstCache,

			   axi2r_readId,
			   RDY_axi2r_readId,

			   axi2r_readData_data,
			   axi2r_readData_resp,
			   axi2r_readData_last,
			   axi2r_readData_id,
			   EN_axi2r_readData,
			   RDY_axi2r_readData);
  input  CLK_axi_clk;
  input  CLK;
  input  RST_N;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // action method ctrl_put
  input  [11 : 0] ctrl_put_addr;
  input  [31 : 0] ctrl_put_v;
  input  EN_ctrl_put;
  output RDY_ctrl_put;

  // actionvalue method ctrl_get
  input  [11 : 0] ctrl_get_addr;
  input  EN_ctrl_get;
  output [31 : 0] ctrl_get;
  output RDY_ctrl_get;

  // action method fifo_put
  input  [11 : 0] fifo_put_addr;
  input  [31 : 0] fifo_put_v;
  input  EN_fifo_put;
  output RDY_fifo_put;

  // actionvalue method fifo_get
  input  [11 : 0] fifo_get_addr;
  input  EN_fifo_get;
  output [31 : 0] fifo_get;
  output RDY_fifo_get;

  // actionvalue method axi0w_writeAddr
  input  EN_axi0w_writeAddr;
  output [31 : 0] axi0w_writeAddr;
  output RDY_axi0w_writeAddr;

  // value method axi0w_writeBurstLen
  output [7 : 0] axi0w_writeBurstLen;
  output RDY_axi0w_writeBurstLen;

  // value method axi0w_writeBurstWidth
  output [2 : 0] axi0w_writeBurstWidth;
  output RDY_axi0w_writeBurstWidth;

  // value method axi0w_writeBurstType
  output [1 : 0] axi0w_writeBurstType;
  output RDY_axi0w_writeBurstType;

  // value method axi0w_writeBurstProt
  output [2 : 0] axi0w_writeBurstProt;
  output RDY_axi0w_writeBurstProt;

  // value method axi0w_writeBurstCache
  output [3 : 0] axi0w_writeBurstCache;
  output RDY_axi0w_writeBurstCache;

  // value method axi0w_writeId
  output axi0w_writeId;
  output RDY_axi0w_writeId;

  // actionvalue method axi0w_writeData
  input  EN_axi0w_writeData;
  output [63 : 0] axi0w_writeData;
  output RDY_axi0w_writeData;

  // value method axi0w_writeDataByteEnable
  output [7 : 0] axi0w_writeDataByteEnable;
  output RDY_axi0w_writeDataByteEnable;

  // value method axi0w_writeLastDataBeat
  output axi0w_writeLastDataBeat;
  output RDY_axi0w_writeLastDataBeat;

  // action method axi0w_writeResponse
  input  [1 : 0] axi0w_writeResponse_responseCode;
  input  axi0w_writeResponse_id;
  input  EN_axi0w_writeResponse;
  output RDY_axi0w_writeResponse;

  // actionvalue method axi0r_readAddr
  input  EN_axi0r_readAddr;
  output [31 : 0] axi0r_readAddr;
  output RDY_axi0r_readAddr;

  // value method axi0r_readBurstLen
  output [7 : 0] axi0r_readBurstLen;
  output RDY_axi0r_readBurstLen;

  // value method axi0r_readBurstWidth
  output [2 : 0] axi0r_readBurstWidth;
  output RDY_axi0r_readBurstWidth;

  // value method axi0r_readBurstType
  output [1 : 0] axi0r_readBurstType;
  output RDY_axi0r_readBurstType;

  // value method axi0r_readBurstProt
  output [2 : 0] axi0r_readBurstProt;
  output RDY_axi0r_readBurstProt;

  // value method axi0r_readBurstCache
  output [3 : 0] axi0r_readBurstCache;
  output RDY_axi0r_readBurstCache;

  // value method axi0r_readId
  output axi0r_readId;
  output RDY_axi0r_readId;

  // action method axi0r_readData
  input  [63 : 0] axi0r_readData_data;
  input  [1 : 0] axi0r_readData_resp;
  input  axi0r_readData_last;
  input  axi0r_readData_id;
  input  EN_axi0r_readData;
  output RDY_axi0r_readData;

  // actionvalue method axi1w_writeAddr
  input  EN_axi1w_writeAddr;
  output [31 : 0] axi1w_writeAddr;
  output RDY_axi1w_writeAddr;

  // value method axi1w_writeBurstLen
  output [7 : 0] axi1w_writeBurstLen;
  output RDY_axi1w_writeBurstLen;

  // value method axi1w_writeBurstWidth
  output [2 : 0] axi1w_writeBurstWidth;
  output RDY_axi1w_writeBurstWidth;

  // value method axi1w_writeBurstType
  output [1 : 0] axi1w_writeBurstType;
  output RDY_axi1w_writeBurstType;

  // value method axi1w_writeBurstProt
  output [2 : 0] axi1w_writeBurstProt;
  output RDY_axi1w_writeBurstProt;

  // value method axi1w_writeBurstCache
  output [3 : 0] axi1w_writeBurstCache;
  output RDY_axi1w_writeBurstCache;

  // value method axi1w_writeId
  output axi1w_writeId;
  output RDY_axi1w_writeId;

  // actionvalue method axi1w_writeData
  input  EN_axi1w_writeData;
  output [63 : 0] axi1w_writeData;
  output RDY_axi1w_writeData;

  // value method axi1w_writeDataByteEnable
  output [7 : 0] axi1w_writeDataByteEnable;
  output RDY_axi1w_writeDataByteEnable;

  // value method axi1w_writeLastDataBeat
  output axi1w_writeLastDataBeat;
  output RDY_axi1w_writeLastDataBeat;

  // action method axi1w_writeResponse
  input  [1 : 0] axi1w_writeResponse_responseCode;
  input  axi1w_writeResponse_id;
  input  EN_axi1w_writeResponse;
  output RDY_axi1w_writeResponse;

  // actionvalue method axi1r_readAddr
  input  EN_axi1r_readAddr;
  output [31 : 0] axi1r_readAddr;
  output RDY_axi1r_readAddr;

  // value method axi1r_readBurstLen
  output [7 : 0] axi1r_readBurstLen;
  output RDY_axi1r_readBurstLen;

  // value method axi1r_readBurstWidth
  output [2 : 0] axi1r_readBurstWidth;
  output RDY_axi1r_readBurstWidth;

  // value method axi1r_readBurstType
  output [1 : 0] axi1r_readBurstType;
  output RDY_axi1r_readBurstType;

  // value method axi1r_readBurstProt
  output [2 : 0] axi1r_readBurstProt;
  output RDY_axi1r_readBurstProt;

  // value method axi1r_readBurstCache
  output [3 : 0] axi1r_readBurstCache;
  output RDY_axi1r_readBurstCache;

  // value method axi1r_readId
  output axi1r_readId;
  output RDY_axi1r_readId;

  // action method axi1r_readData
  input  [63 : 0] axi1r_readData_data;
  input  [1 : 0] axi1r_readData_resp;
  input  axi1r_readData_last;
  input  axi1r_readData_id;
  input  EN_axi1r_readData;
  output RDY_axi1r_readData;

  // actionvalue method axi2w_writeAddr
  input  EN_axi2w_writeAddr;
  output [31 : 0] axi2w_writeAddr;
  output RDY_axi2w_writeAddr;

  // value method axi2w_writeBurstLen
  output [7 : 0] axi2w_writeBurstLen;
  output RDY_axi2w_writeBurstLen;

  // value method axi2w_writeBurstWidth
  output [2 : 0] axi2w_writeBurstWidth;
  output RDY_axi2w_writeBurstWidth;

  // value method axi2w_writeBurstType
  output [1 : 0] axi2w_writeBurstType;
  output RDY_axi2w_writeBurstType;

  // value method axi2w_writeBurstProt
  output [2 : 0] axi2w_writeBurstProt;
  output RDY_axi2w_writeBurstProt;

  // value method axi2w_writeBurstCache
  output [3 : 0] axi2w_writeBurstCache;
  output RDY_axi2w_writeBurstCache;

  // value method axi2w_writeId
  output axi2w_writeId;
  output RDY_axi2w_writeId;

  // actionvalue method axi2w_writeData
  input  EN_axi2w_writeData;
  output [63 : 0] axi2w_writeData;
  output RDY_axi2w_writeData;

  // value method axi2w_writeDataByteEnable
  output [7 : 0] axi2w_writeDataByteEnable;
  output RDY_axi2w_writeDataByteEnable;

  // value method axi2w_writeLastDataBeat
  output axi2w_writeLastDataBeat;
  output RDY_axi2w_writeLastDataBeat;

  // action method axi2w_writeResponse
  input  [1 : 0] axi2w_writeResponse_responseCode;
  input  axi2w_writeResponse_id;
  input  EN_axi2w_writeResponse;
  output RDY_axi2w_writeResponse;

  // actionvalue method axi2r_readAddr
  input  EN_axi2r_readAddr;
  output [31 : 0] axi2r_readAddr;
  output RDY_axi2r_readAddr;

  // value method axi2r_readBurstLen
  output [7 : 0] axi2r_readBurstLen;
  output RDY_axi2r_readBurstLen;

  // value method axi2r_readBurstWidth
  output [2 : 0] axi2r_readBurstWidth;
  output RDY_axi2r_readBurstWidth;

  // value method axi2r_readBurstType
  output [1 : 0] axi2r_readBurstType;
  output RDY_axi2r_readBurstType;

  // value method axi2r_readBurstProt
  output [2 : 0] axi2r_readBurstProt;
  output RDY_axi2r_readBurstProt;

  // value method axi2r_readBurstCache
  output [3 : 0] axi2r_readBurstCache;
  output RDY_axi2r_readBurstCache;

  // value method axi2r_readId
  output axi2r_readId;
  output RDY_axi2r_readId;

  // action method axi2r_readData
  input  [63 : 0] axi2r_readData_data;
  input  [1 : 0] axi2r_readData_resp;
  input  axi2r_readData_last;
  input  axi2r_readData_id;
  input  EN_axi2r_readData;
  output RDY_axi2r_readData;

  // signals for module outputs
  reg [31 : 0] ctrl_get;
  wire [63 : 0] axi0w_writeData, axi1w_writeData, axi2w_writeData;
  wire [31 : 0] axi0r_readAddr,
		axi0w_writeAddr,
		axi1r_readAddr,
		axi1w_writeAddr,
		axi2r_readAddr,
		axi2w_writeAddr,
		fifo_get;
  wire [7 : 0] axi0r_readBurstLen,
	       axi0w_writeBurstLen,
	       axi0w_writeDataByteEnable,
	       axi1r_readBurstLen,
	       axi1w_writeBurstLen,
	       axi1w_writeDataByteEnable,
	       axi2r_readBurstLen,
	       axi2w_writeBurstLen,
	       axi2w_writeDataByteEnable;
  wire [3 : 0] axi0r_readBurstCache,
	       axi0w_writeBurstCache,
	       axi1r_readBurstCache,
	       axi1w_writeBurstCache,
	       axi2r_readBurstCache,
	       axi2w_writeBurstCache;
  wire [2 : 0] axi0r_readBurstProt,
	       axi0r_readBurstWidth,
	       axi0w_writeBurstProt,
	       axi0w_writeBurstWidth,
	       axi1r_readBurstProt,
	       axi1r_readBurstWidth,
	       axi1w_writeBurstProt,
	       axi1w_writeBurstWidth,
	       axi2r_readBurstProt,
	       axi2r_readBurstWidth,
	       axi2w_writeBurstProt,
	       axi2w_writeBurstWidth;
  wire [1 : 0] axi0r_readBurstType,
	       axi0w_writeBurstType,
	       axi1r_readBurstType,
	       axi1w_writeBurstType,
	       axi2r_readBurstType,
	       axi2w_writeBurstType;
  wire RDY_axi0r_readAddr,
       RDY_axi0r_readBurstCache,
       RDY_axi0r_readBurstLen,
       RDY_axi0r_readBurstProt,
       RDY_axi0r_readBurstType,
       RDY_axi0r_readBurstWidth,
       RDY_axi0r_readData,
       RDY_axi0r_readId,
       RDY_axi0w_writeAddr,
       RDY_axi0w_writeBurstCache,
       RDY_axi0w_writeBurstLen,
       RDY_axi0w_writeBurstProt,
       RDY_axi0w_writeBurstType,
       RDY_axi0w_writeBurstWidth,
       RDY_axi0w_writeData,
       RDY_axi0w_writeDataByteEnable,
       RDY_axi0w_writeId,
       RDY_axi0w_writeLastDataBeat,
       RDY_axi0w_writeResponse,
       RDY_axi1r_readAddr,
       RDY_axi1r_readBurstCache,
       RDY_axi1r_readBurstLen,
       RDY_axi1r_readBurstProt,
       RDY_axi1r_readBurstType,
       RDY_axi1r_readBurstWidth,
       RDY_axi1r_readData,
       RDY_axi1r_readId,
       RDY_axi1w_writeAddr,
       RDY_axi1w_writeBurstCache,
       RDY_axi1w_writeBurstLen,
       RDY_axi1w_writeBurstProt,
       RDY_axi1w_writeBurstType,
       RDY_axi1w_writeBurstWidth,
       RDY_axi1w_writeData,
       RDY_axi1w_writeDataByteEnable,
       RDY_axi1w_writeId,
       RDY_axi1w_writeLastDataBeat,
       RDY_axi1w_writeResponse,
       RDY_axi2r_readAddr,
       RDY_axi2r_readBurstCache,
       RDY_axi2r_readBurstLen,
       RDY_axi2r_readBurstProt,
       RDY_axi2r_readBurstType,
       RDY_axi2r_readBurstWidth,
       RDY_axi2r_readData,
       RDY_axi2r_readId,
       RDY_axi2w_writeAddr,
       RDY_axi2w_writeBurstCache,
       RDY_axi2w_writeBurstLen,
       RDY_axi2w_writeBurstProt,
       RDY_axi2w_writeBurstType,
       RDY_axi2w_writeBurstWidth,
       RDY_axi2w_writeData,
       RDY_axi2w_writeDataByteEnable,
       RDY_axi2w_writeId,
       RDY_axi2w_writeLastDataBeat,
       RDY_axi2w_writeResponse,
       RDY_ctrl_get,
       RDY_ctrl_put,
       RDY_error,
       RDY_fifo_get,
       RDY_fifo_put,
       RDY_interrupt,
       axi0r_readId,
       axi0w_writeId,
       axi0w_writeLastDataBeat,
       axi1r_readId,
       axi1w_writeId,
       axi1w_writeLastDataBeat,
       axi2r_readId,
       axi2w_writeId,
       axi2w_writeLastDataBeat,
       error,
       interrupt;

  // inlined wires
  wire [39 : 0] fooWrapper_foo_axiMaster0_raddrFifo_enqw$wget;
  wire [33 : 0] requestFifo_fifo_wDataIn$wget, requestFifo_fifo_wDataOut$wget;
  wire fooWrapper_foo_axiMaster0_bfifo_pwEnqueue$whas,
       fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas,
       fooWrapper_foo_axiMaster1_bfifo_pwEnqueue$whas,
       fooWrapper_foo_axiMaster2_bfifo_pwEnqueue$whas,
       requestFifo_fifo_pwDequeue$whas,
       requestFifo_fifo_pwEnqueue$whas;

  // register fooWrapper_blockedRequestsDiscardedReg
  reg [31 : 0] fooWrapper_blockedRequestsDiscardedReg;
  wire [31 : 0] fooWrapper_blockedRequestsDiscardedReg$D_IN;
  wire fooWrapper_blockedRequestsDiscardedReg$EN;

  // register fooWrapper_blockedResponsesDiscardedReg
  reg [31 : 0] fooWrapper_blockedResponsesDiscardedReg;
  wire [31 : 0] fooWrapper_blockedResponsesDiscardedReg$D_IN;
  wire fooWrapper_blockedResponsesDiscardedReg$EN;

  // register fooWrapper_foo_axiMaster0_bfifo_rCache
  reg [9 : 0] fooWrapper_foo_axiMaster0_bfifo_rCache;
  wire [9 : 0] fooWrapper_foo_axiMaster0_bfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster0_bfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster0_bfifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_axiMaster0_bfifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster0_bfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster0_bfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster0_bfifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_axiMaster0_bfifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster0_bfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster0_bfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster0_readIdReg
  reg fooWrapper_foo_axiMaster0_readIdReg;
  wire fooWrapper_foo_axiMaster0_readIdReg$D_IN,
       fooWrapper_foo_axiMaster0_readIdReg$EN;

  // register fooWrapper_foo_axiMaster0_rfifoWordsAvail
  reg [10 : 0] fooWrapper_foo_axiMaster0_rfifoWordsAvail;
  wire [10 : 0] fooWrapper_foo_axiMaster0_rfifoWordsAvail$D_IN;
  wire fooWrapper_foo_axiMaster0_rfifoWordsAvail$EN;

  // register fooWrapper_foo_axiMaster0_rfifo_rCache
  reg [76 : 0] fooWrapper_foo_axiMaster0_rfifo_rCache;
  wire [76 : 0] fooWrapper_foo_axiMaster0_rfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster0_rfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster0_rfifo_rRdPtr
  reg [11 : 0] fooWrapper_foo_axiMaster0_rfifo_rRdPtr;
  wire [11 : 0] fooWrapper_foo_axiMaster0_rfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster0_rfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster0_rfifo_rWrPtr
  reg [11 : 0] fooWrapper_foo_axiMaster0_rfifo_rWrPtr;
  wire [11 : 0] fooWrapper_foo_axiMaster0_rfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster0_rfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster0_wAddrReg
  reg [31 : 0] fooWrapper_foo_axiMaster0_wAddrReg;
  wire [31 : 0] fooWrapper_foo_axiMaster0_wAddrReg$D_IN;
  wire fooWrapper_foo_axiMaster0_wAddrReg$EN;

  // register fooWrapper_foo_axiMaster0_wAddressPresented
  reg fooWrapper_foo_axiMaster0_wAddressPresented;
  wire fooWrapper_foo_axiMaster0_wAddressPresented$D_IN,
       fooWrapper_foo_axiMaster0_wAddressPresented$EN;

  // register fooWrapper_foo_axiMaster0_wBurstCountReg
  reg [7 : 0] fooWrapper_foo_axiMaster0_wBurstCountReg;
  wire [7 : 0] fooWrapper_foo_axiMaster0_wBurstCountReg$D_IN;
  wire fooWrapper_foo_axiMaster0_wBurstCountReg$EN;

  // register fooWrapper_foo_axiMaster0_wfifo_rCache
  reg [71 : 0] fooWrapper_foo_axiMaster0_wfifo_rCache;
  wire [71 : 0] fooWrapper_foo_axiMaster0_wfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster0_wfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster0_wfifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_axiMaster0_wfifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster0_wfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster0_wfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster0_wfifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_axiMaster0_wfifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster0_wfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster0_wfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster0_writeIdReg
  reg fooWrapper_foo_axiMaster0_writeIdReg;
  wire fooWrapper_foo_axiMaster0_writeIdReg$D_IN,
       fooWrapper_foo_axiMaster0_writeIdReg$EN;

  // register fooWrapper_foo_axiMaster1_bfifo_rCache
  reg [9 : 0] fooWrapper_foo_axiMaster1_bfifo_rCache;
  wire [9 : 0] fooWrapper_foo_axiMaster1_bfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster1_bfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster1_bfifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_axiMaster1_bfifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster1_bfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster1_bfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster1_bfifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_axiMaster1_bfifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster1_bfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster1_bfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster1_readIdReg
  reg fooWrapper_foo_axiMaster1_readIdReg;
  wire fooWrapper_foo_axiMaster1_readIdReg$D_IN,
       fooWrapper_foo_axiMaster1_readIdReg$EN;

  // register fooWrapper_foo_axiMaster1_rfifoWordsAvail
  reg [10 : 0] fooWrapper_foo_axiMaster1_rfifoWordsAvail;
  wire [10 : 0] fooWrapper_foo_axiMaster1_rfifoWordsAvail$D_IN;
  wire fooWrapper_foo_axiMaster1_rfifoWordsAvail$EN;

  // register fooWrapper_foo_axiMaster1_rfifo_rCache
  reg [76 : 0] fooWrapper_foo_axiMaster1_rfifo_rCache;
  wire [76 : 0] fooWrapper_foo_axiMaster1_rfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster1_rfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster1_rfifo_rRdPtr
  reg [11 : 0] fooWrapper_foo_axiMaster1_rfifo_rRdPtr;
  wire [11 : 0] fooWrapper_foo_axiMaster1_rfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster1_rfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster1_rfifo_rWrPtr
  reg [11 : 0] fooWrapper_foo_axiMaster1_rfifo_rWrPtr;
  wire [11 : 0] fooWrapper_foo_axiMaster1_rfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster1_rfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster1_wAddrReg
  reg [31 : 0] fooWrapper_foo_axiMaster1_wAddrReg;
  wire [31 : 0] fooWrapper_foo_axiMaster1_wAddrReg$D_IN;
  wire fooWrapper_foo_axiMaster1_wAddrReg$EN;

  // register fooWrapper_foo_axiMaster1_wAddressPresented
  reg fooWrapper_foo_axiMaster1_wAddressPresented;
  wire fooWrapper_foo_axiMaster1_wAddressPresented$D_IN,
       fooWrapper_foo_axiMaster1_wAddressPresented$EN;

  // register fooWrapper_foo_axiMaster1_wBurstCountReg
  reg [7 : 0] fooWrapper_foo_axiMaster1_wBurstCountReg;
  wire [7 : 0] fooWrapper_foo_axiMaster1_wBurstCountReg$D_IN;
  wire fooWrapper_foo_axiMaster1_wBurstCountReg$EN;

  // register fooWrapper_foo_axiMaster1_wfifo_rCache
  reg [71 : 0] fooWrapper_foo_axiMaster1_wfifo_rCache;
  wire [71 : 0] fooWrapper_foo_axiMaster1_wfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster1_wfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster1_wfifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_axiMaster1_wfifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster1_wfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster1_wfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster1_wfifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_axiMaster1_wfifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster1_wfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster1_wfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster1_writeIdReg
  reg fooWrapper_foo_axiMaster1_writeIdReg;
  wire fooWrapper_foo_axiMaster1_writeIdReg$D_IN,
       fooWrapper_foo_axiMaster1_writeIdReg$EN;

  // register fooWrapper_foo_axiMaster2_bfifo_rCache
  reg [9 : 0] fooWrapper_foo_axiMaster2_bfifo_rCache;
  wire [9 : 0] fooWrapper_foo_axiMaster2_bfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster2_bfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster2_bfifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_axiMaster2_bfifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster2_bfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster2_bfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster2_bfifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_axiMaster2_bfifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster2_bfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster2_bfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster2_readIdReg
  reg fooWrapper_foo_axiMaster2_readIdReg;
  wire fooWrapper_foo_axiMaster2_readIdReg$D_IN,
       fooWrapper_foo_axiMaster2_readIdReg$EN;

  // register fooWrapper_foo_axiMaster2_rfifoWordsAvail
  reg [10 : 0] fooWrapper_foo_axiMaster2_rfifoWordsAvail;
  wire [10 : 0] fooWrapper_foo_axiMaster2_rfifoWordsAvail$D_IN;
  wire fooWrapper_foo_axiMaster2_rfifoWordsAvail$EN;

  // register fooWrapper_foo_axiMaster2_rfifo_rCache
  reg [76 : 0] fooWrapper_foo_axiMaster2_rfifo_rCache;
  wire [76 : 0] fooWrapper_foo_axiMaster2_rfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster2_rfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster2_rfifo_rRdPtr
  reg [11 : 0] fooWrapper_foo_axiMaster2_rfifo_rRdPtr;
  wire [11 : 0] fooWrapper_foo_axiMaster2_rfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster2_rfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster2_rfifo_rWrPtr
  reg [11 : 0] fooWrapper_foo_axiMaster2_rfifo_rWrPtr;
  wire [11 : 0] fooWrapper_foo_axiMaster2_rfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster2_rfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster2_wAddrReg
  reg [31 : 0] fooWrapper_foo_axiMaster2_wAddrReg;
  wire [31 : 0] fooWrapper_foo_axiMaster2_wAddrReg$D_IN;
  wire fooWrapper_foo_axiMaster2_wAddrReg$EN;

  // register fooWrapper_foo_axiMaster2_wAddressPresented
  reg fooWrapper_foo_axiMaster2_wAddressPresented;
  wire fooWrapper_foo_axiMaster2_wAddressPresented$D_IN,
       fooWrapper_foo_axiMaster2_wAddressPresented$EN;

  // register fooWrapper_foo_axiMaster2_wBurstCountReg
  reg [7 : 0] fooWrapper_foo_axiMaster2_wBurstCountReg;
  wire [7 : 0] fooWrapper_foo_axiMaster2_wBurstCountReg$D_IN;
  wire fooWrapper_foo_axiMaster2_wBurstCountReg$EN;

  // register fooWrapper_foo_axiMaster2_wfifo_rCache
  reg [71 : 0] fooWrapper_foo_axiMaster2_wfifo_rCache;
  wire [71 : 0] fooWrapper_foo_axiMaster2_wfifo_rCache$D_IN;
  wire fooWrapper_foo_axiMaster2_wfifo_rCache$EN;

  // register fooWrapper_foo_axiMaster2_wfifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_axiMaster2_wfifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster2_wfifo_rRdPtr$D_IN;
  wire fooWrapper_foo_axiMaster2_wfifo_rRdPtr$EN;

  // register fooWrapper_foo_axiMaster2_wfifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_axiMaster2_wfifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_axiMaster2_wfifo_rWrPtr$D_IN;
  wire fooWrapper_foo_axiMaster2_wfifo_rWrPtr$EN;

  // register fooWrapper_foo_axiMaster2_writeIdReg
  reg fooWrapper_foo_axiMaster2_writeIdReg;
  wire fooWrapper_foo_axiMaster2_writeIdReg$D_IN,
       fooWrapper_foo_axiMaster2_writeIdReg$EN;

  // register fooWrapper_foo_readFifo_rCache
  reg [39 : 0] fooWrapper_foo_readFifo_rCache;
  wire [39 : 0] fooWrapper_foo_readFifo_rCache$D_IN;
  wire fooWrapper_foo_readFifo_rCache$EN;

  // register fooWrapper_foo_readFifo_rRdPtr
  reg [6 : 0] fooWrapper_foo_readFifo_rRdPtr;
  wire [6 : 0] fooWrapper_foo_readFifo_rRdPtr$D_IN;
  wire fooWrapper_foo_readFifo_rRdPtr$EN;

  // register fooWrapper_foo_readFifo_rWrPtr
  reg [6 : 0] fooWrapper_foo_readFifo_rWrPtr;
  wire [6 : 0] fooWrapper_foo_readFifo_rWrPtr$D_IN;
  wire fooWrapper_foo_readFifo_rWrPtr$EN;

  // register fooWrapper_foo_segmentIndexReg
  reg [5 : 0] fooWrapper_foo_segmentIndexReg;
  wire [5 : 0] fooWrapper_foo_segmentIndexReg$D_IN;
  wire fooWrapper_foo_segmentIndexReg$EN;

  // register fooWrapper_foo_segmentOffsetReg
  reg [23 : 0] fooWrapper_foo_segmentOffsetReg;
  wire [23 : 0] fooWrapper_foo_segmentOffsetReg$D_IN;
  wire fooWrapper_foo_segmentOffsetReg$EN;

  // register fooWrapper_junkReqReg
  reg [31 : 0] fooWrapper_junkReqReg;
  wire [31 : 0] fooWrapper_junkReqReg$D_IN;
  wire fooWrapper_junkReqReg$EN;

  // register fooWrapper_requestFired
  reg [31 : 0] fooWrapper_requestFired;
  wire [31 : 0] fooWrapper_requestFired$D_IN;
  wire fooWrapper_requestFired$EN;

  // register fooWrapper_requestTimeLimitReg
  reg [15 : 0] fooWrapper_requestTimeLimitReg;
  wire [15 : 0] fooWrapper_requestTimeLimitReg$D_IN;
  wire fooWrapper_requestTimeLimitReg$EN;

  // register fooWrapper_requestTimerReg
  reg [15 : 0] fooWrapper_requestTimerReg;
  wire [15 : 0] fooWrapper_requestTimerReg$D_IN;
  wire fooWrapper_requestTimerReg$EN;

  // register fooWrapper_responseFired
  reg [31 : 0] fooWrapper_responseFired;
  wire [31 : 0] fooWrapper_responseFired$D_IN;
  wire fooWrapper_responseFired$EN;

  // register fooWrapper_responseTimeLimitReg
  reg [15 : 0] fooWrapper_responseTimeLimitReg;
  wire [15 : 0] fooWrapper_responseTimeLimitReg$D_IN;
  wire fooWrapper_responseTimeLimitReg$EN;

  // register fooWrapper_responseTimerReg
  reg [15 : 0] fooWrapper_responseTimerReg;
  wire [15 : 0] fooWrapper_responseTimerReg$D_IN;
  wire fooWrapper_responseTimerReg$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register interruptCleared
  reg interruptCleared;
  wire interruptCleared$D_IN, interruptCleared$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register overflowCount
  reg [31 : 0] overflowCount;
  wire [31 : 0] overflowCount$D_IN;
  wire overflowCount$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [33 : 0] requestFifo_buff;
  wire [33 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register requestFifo_fifo_rCache
  reg [39 : 0] requestFifo_fifo_rCache;
  wire [39 : 0] requestFifo_fifo_rCache$D_IN;
  wire requestFifo_fifo_rCache$EN;

  // register requestFifo_fifo_rRdPtr
  reg [4 : 0] requestFifo_fifo_rRdPtr;
  wire [4 : 0] requestFifo_fifo_rRdPtr$D_IN;
  wire requestFifo_fifo_rRdPtr$EN;

  // register requestFifo_fifo_rWrPtr
  reg [4 : 0] requestFifo_fifo_rWrPtr;
  wire [4 : 0] requestFifo_fifo_rWrPtr$D_IN;
  wire requestFifo_fifo_rWrPtr$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // register underflowCount
  reg [31 : 0] underflowCount;
  wire [31 : 0] underflowCount$D_IN;
  wire underflowCount$EN;

  // register word0Put
  reg [31 : 0] word0Put;
  wire [31 : 0] word0Put$D_IN;
  wire word0Put$EN;

  // register word1Put
  reg [31 : 0] word1Put;
  wire [31 : 0] word1Put$D_IN;
  wire word1Put$EN;

  // ports of submodule fooWrapper_foo_axiMaster0_bfifo_memory
  wire [5 : 0] fooWrapper_foo_axiMaster0_bfifo_memory$ADDRA,
	       fooWrapper_foo_axiMaster0_bfifo_memory$ADDRB;
  wire [1 : 0] fooWrapper_foo_axiMaster0_bfifo_memory$DIA,
	       fooWrapper_foo_axiMaster0_bfifo_memory$DIB;
  wire fooWrapper_foo_axiMaster0_bfifo_memory$ENA,
       fooWrapper_foo_axiMaster0_bfifo_memory$ENB,
       fooWrapper_foo_axiMaster0_bfifo_memory$WEA,
       fooWrapper_foo_axiMaster0_bfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster0_raddrFifo_ff
  wire [39 : 0] fooWrapper_foo_axiMaster0_raddrFifo_ff$D_IN,
		fooWrapper_foo_axiMaster0_raddrFifo_ff$D_OUT;
  wire fooWrapper_foo_axiMaster0_raddrFifo_ff$CLR,
       fooWrapper_foo_axiMaster0_raddrFifo_ff$DEQ,
       fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N,
       fooWrapper_foo_axiMaster0_raddrFifo_ff$ENQ,
       fooWrapper_foo_axiMaster0_raddrFifo_ff$FULL_N;

  // ports of submodule fooWrapper_foo_axiMaster0_raddrFifo_firstValid
  wire fooWrapper_foo_axiMaster0_raddrFifo_firstValid$D_IN,
       fooWrapper_foo_axiMaster0_raddrFifo_firstValid$EN,
       fooWrapper_foo_axiMaster0_raddrFifo_firstValid$Q_OUT;

  // ports of submodule fooWrapper_foo_axiMaster0_rfifo_memory
  wire [63 : 0] fooWrapper_foo_axiMaster0_rfifo_memory$DIA,
		fooWrapper_foo_axiMaster0_rfifo_memory$DIB,
		fooWrapper_foo_axiMaster0_rfifo_memory$DOB;
  wire [10 : 0] fooWrapper_foo_axiMaster0_rfifo_memory$ADDRA,
		fooWrapper_foo_axiMaster0_rfifo_memory$ADDRB;
  wire fooWrapper_foo_axiMaster0_rfifo_memory$ENA,
       fooWrapper_foo_axiMaster0_rfifo_memory$ENB,
       fooWrapper_foo_axiMaster0_rfifo_memory$WEA,
       fooWrapper_foo_axiMaster0_rfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster0_wfifo_memory
  wire [63 : 0] fooWrapper_foo_axiMaster0_wfifo_memory$DIA,
		fooWrapper_foo_axiMaster0_wfifo_memory$DIB,
		fooWrapper_foo_axiMaster0_wfifo_memory$DOB;
  wire [5 : 0] fooWrapper_foo_axiMaster0_wfifo_memory$ADDRA,
	       fooWrapper_foo_axiMaster0_wfifo_memory$ADDRB;
  wire fooWrapper_foo_axiMaster0_wfifo_memory$ENA,
       fooWrapper_foo_axiMaster0_wfifo_memory$ENB,
       fooWrapper_foo_axiMaster0_wfifo_memory$WEA,
       fooWrapper_foo_axiMaster0_wfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster1_bfifo_memory
  wire [5 : 0] fooWrapper_foo_axiMaster1_bfifo_memory$ADDRA,
	       fooWrapper_foo_axiMaster1_bfifo_memory$ADDRB;
  wire [1 : 0] fooWrapper_foo_axiMaster1_bfifo_memory$DIA,
	       fooWrapper_foo_axiMaster1_bfifo_memory$DIB;
  wire fooWrapper_foo_axiMaster1_bfifo_memory$ENA,
       fooWrapper_foo_axiMaster1_bfifo_memory$ENB,
       fooWrapper_foo_axiMaster1_bfifo_memory$WEA,
       fooWrapper_foo_axiMaster1_bfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster1_raddrFifo_ff
  wire [39 : 0] fooWrapper_foo_axiMaster1_raddrFifo_ff$D_IN,
		fooWrapper_foo_axiMaster1_raddrFifo_ff$D_OUT;
  wire fooWrapper_foo_axiMaster1_raddrFifo_ff$CLR,
       fooWrapper_foo_axiMaster1_raddrFifo_ff$DEQ,
       fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N,
       fooWrapper_foo_axiMaster1_raddrFifo_ff$ENQ;

  // ports of submodule fooWrapper_foo_axiMaster1_raddrFifo_firstValid
  wire fooWrapper_foo_axiMaster1_raddrFifo_firstValid$D_IN,
       fooWrapper_foo_axiMaster1_raddrFifo_firstValid$EN,
       fooWrapper_foo_axiMaster1_raddrFifo_firstValid$Q_OUT;

  // ports of submodule fooWrapper_foo_axiMaster1_rfifo_memory
  wire [63 : 0] fooWrapper_foo_axiMaster1_rfifo_memory$DIA,
		fooWrapper_foo_axiMaster1_rfifo_memory$DIB;
  wire [10 : 0] fooWrapper_foo_axiMaster1_rfifo_memory$ADDRA,
		fooWrapper_foo_axiMaster1_rfifo_memory$ADDRB;
  wire fooWrapper_foo_axiMaster1_rfifo_memory$ENA,
       fooWrapper_foo_axiMaster1_rfifo_memory$ENB,
       fooWrapper_foo_axiMaster1_rfifo_memory$WEA,
       fooWrapper_foo_axiMaster1_rfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster1_wfifo_memory
  wire [63 : 0] fooWrapper_foo_axiMaster1_wfifo_memory$DIA,
		fooWrapper_foo_axiMaster1_wfifo_memory$DIB,
		fooWrapper_foo_axiMaster1_wfifo_memory$DOB;
  wire [5 : 0] fooWrapper_foo_axiMaster1_wfifo_memory$ADDRA,
	       fooWrapper_foo_axiMaster1_wfifo_memory$ADDRB;
  wire fooWrapper_foo_axiMaster1_wfifo_memory$ENA,
       fooWrapper_foo_axiMaster1_wfifo_memory$ENB,
       fooWrapper_foo_axiMaster1_wfifo_memory$WEA,
       fooWrapper_foo_axiMaster1_wfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster2_bfifo_memory
  wire [5 : 0] fooWrapper_foo_axiMaster2_bfifo_memory$ADDRA,
	       fooWrapper_foo_axiMaster2_bfifo_memory$ADDRB;
  wire [1 : 0] fooWrapper_foo_axiMaster2_bfifo_memory$DIA,
	       fooWrapper_foo_axiMaster2_bfifo_memory$DIB;
  wire fooWrapper_foo_axiMaster2_bfifo_memory$ENA,
       fooWrapper_foo_axiMaster2_bfifo_memory$ENB,
       fooWrapper_foo_axiMaster2_bfifo_memory$WEA,
       fooWrapper_foo_axiMaster2_bfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster2_raddrFifo_ff
  wire [39 : 0] fooWrapper_foo_axiMaster2_raddrFifo_ff$D_IN,
		fooWrapper_foo_axiMaster2_raddrFifo_ff$D_OUT;
  wire fooWrapper_foo_axiMaster2_raddrFifo_ff$CLR,
       fooWrapper_foo_axiMaster2_raddrFifo_ff$DEQ,
       fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N,
       fooWrapper_foo_axiMaster2_raddrFifo_ff$ENQ;

  // ports of submodule fooWrapper_foo_axiMaster2_raddrFifo_firstValid
  wire fooWrapper_foo_axiMaster2_raddrFifo_firstValid$D_IN,
       fooWrapper_foo_axiMaster2_raddrFifo_firstValid$EN,
       fooWrapper_foo_axiMaster2_raddrFifo_firstValid$Q_OUT;

  // ports of submodule fooWrapper_foo_axiMaster2_rfifo_memory
  wire [63 : 0] fooWrapper_foo_axiMaster2_rfifo_memory$DIA,
		fooWrapper_foo_axiMaster2_rfifo_memory$DIB;
  wire [10 : 0] fooWrapper_foo_axiMaster2_rfifo_memory$ADDRA,
		fooWrapper_foo_axiMaster2_rfifo_memory$ADDRB;
  wire fooWrapper_foo_axiMaster2_rfifo_memory$ENA,
       fooWrapper_foo_axiMaster2_rfifo_memory$ENB,
       fooWrapper_foo_axiMaster2_rfifo_memory$WEA,
       fooWrapper_foo_axiMaster2_rfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_axiMaster2_wfifo_memory
  wire [63 : 0] fooWrapper_foo_axiMaster2_wfifo_memory$DIA,
		fooWrapper_foo_axiMaster2_wfifo_memory$DIB,
		fooWrapper_foo_axiMaster2_wfifo_memory$DOB;
  wire [5 : 0] fooWrapper_foo_axiMaster2_wfifo_memory$ADDRA,
	       fooWrapper_foo_axiMaster2_wfifo_memory$ADDRB;
  wire fooWrapper_foo_axiMaster2_wfifo_memory$ENA,
       fooWrapper_foo_axiMaster2_wfifo_memory$ENB,
       fooWrapper_foo_axiMaster2_wfifo_memory$WEA,
       fooWrapper_foo_axiMaster2_wfifo_memory$WEB;

  // ports of submodule fooWrapper_foo_readFifo_memory
  wire [31 : 0] fooWrapper_foo_readFifo_memory$DIA,
		fooWrapper_foo_readFifo_memory$DIB,
		fooWrapper_foo_readFifo_memory$DOB;
  wire [5 : 0] fooWrapper_foo_readFifo_memory$ADDRA,
	       fooWrapper_foo_readFifo_memory$ADDRB;
  wire fooWrapper_foo_readFifo_memory$ENA,
       fooWrapper_foo_readFifo_memory$ENB,
       fooWrapper_foo_readFifo_memory$WEA,
       fooWrapper_foo_readFifo_memory$WEB;

  // ports of submodule requestFifo_fifo_memory
  wire [33 : 0] requestFifo_fifo_memory$DIA,
		requestFifo_fifo_memory$DIB,
		requestFifo_fifo_memory$DOB;
  wire [3 : 0] requestFifo_fifo_memory$ADDRA, requestFifo_fifo_memory$ADDRB;
  wire requestFifo_fifo_memory$ENA,
       requestFifo_fifo_memory$ENB,
       requestFifo_fifo_memory$WEA,
       requestFifo_fifo_memory$WEB;

  // ports of submodule responseFifo_fifo
  wire [97 : 0] responseFifo_fifo$D_IN, responseFifo_fifo$D_OUT;
  wire responseFifo_fifo$CLR,
       responseFifo_fifo$DEQ,
       responseFifo_fifo$EMPTY_N,
       responseFifo_fifo$ENQ,
       responseFifo_fifo$FULL_N;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2;
  wire [11 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_fooWrapper_discardBlockedRequests,
       WILL_FIRE_RL_fooWrapper_discardBlockedResponses,
       WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest,
       WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest,
       WILL_FIRE_RL_fooWrapper_handlereadRangerequest,
       WILL_FIRE_RL_fooWrapper_readValueresponse;

  // inputs to muxes for submodule ports
  wire [97 : 0] MUX_responseFifo_fifo$enq_1__VAL_1;
  wire [23 : 0] MUX_fooWrapper_foo_segmentOffsetReg$write_1__VAL_1;
  wire [15 : 0] MUX_fooWrapper_requestTimerReg$write_1__VAL_5,
		MUX_fooWrapper_responseTimerReg$write_1__VAL_1;
  wire [5 : 0] MUX_fooWrapper_foo_segmentIndexReg$write_1__VAL_2;

  // remaining internal signals
  wire [97 : 0] x__h16175;
  wire [63 : 0] v__h12813, x__h11299, x__h4263, x__h7781;
  wire [33 : 0] newval__h15773, x__h710;
  wire [31 : 0] IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631,
		result__h15547,
		v___1__h16018,
		v__h14045,
		x__h12441,
		x__h13830,
		x__h15508,
		x__h15510,
		x__h15512,
		x__h15874,
		x__h16179,
		y__h15509,
		y__h15511,
		y__h15513;
  wire [11 : 0] x__h4364;
  wire [10 : 0] _theResult____h11727,
		_theResult____h4691,
		_theResult____h8209,
		avail___1__h11738,
		avail___1__h4702,
		avail___1__h8220,
		avail__h4699;
  wire [7 : 0] x__h11742, x__h16520, x__h17026, x__h17532, x__h4706, x__h8224;
  wire [6 : 0] x__h12542, x__h2141, x__h5659, x__h9177;
  wire [4 : 0] x__h811;
  wire [1 : 0] x__h2924, x__h6442, x__h9960;
  wire _dor1responseFifo_count$EN_write,
       _dor1responseFifo_fifo$EN_deq,
       fooWrapper_foo_axiMaster0_raddrFifo_ff_i_notEm_ETC___d506,
       requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326,
       requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = rf$D_OUT_1[0] && !interruptCleared && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // action method ctrl_put
  assign RDY_ctrl_put = 1'd1 ;

  // actionvalue method ctrl_get
  always@(ctrl_get_addr or
	  rf$D_OUT_2 or
	  result__h15547 or
	  fooWrapper_requestFired or
	  fooWrapper_responseFired or
	  underflowCount or
	  overflowCount or
	  x__h15508 or
	  y__h15509 or
	  putWordCount or
	  getWordCount or
	  word0Put or
	  word1Put or
	  fooWrapper_junkReqReg or
	  fooWrapper_blockedRequestsDiscardedReg or
	  fooWrapper_blockedResponsesDiscardedReg)
  begin
    case (ctrl_get_addr)
      12'h0: ctrl_get = result__h15547;
      12'h004: ctrl_get = 32'h02142011;
      12'h008: ctrl_get = 32'd34;
      12'h00C: ctrl_get = 32'd98;
      12'h010: ctrl_get = fooWrapper_requestFired;
      12'h014: ctrl_get = fooWrapper_responseFired;
      12'h018: ctrl_get = underflowCount;
      12'h01C: ctrl_get = overflowCount;
      12'h020: ctrl_get = x__h15508 | y__h15509;
      12'h024: ctrl_get = putWordCount;
      12'h028: ctrl_get = getWordCount;
      12'h02C: ctrl_get = word0Put;
      12'h030: ctrl_get = word1Put;
      12'h034: ctrl_get = fooWrapper_junkReqReg;
      12'h038: ctrl_get = fooWrapper_blockedRequestsDiscardedReg;
      12'h03C: ctrl_get = fooWrapper_blockedResponsesDiscardedReg;
      default: ctrl_get = rf$D_OUT_2;
    endcase
  end
  assign RDY_ctrl_get = 1'd1 ;

  // action method fifo_put
  assign RDY_fifo_put =
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ;

  // actionvalue method fifo_get
  assign fifo_get = responseFifo_fifo$EMPTY_N ? v___1__h16018 : 32'h050A050A ;
  assign RDY_fifo_get = 1'd1 ;

  // actionvalue method axi0w_writeAddr
  assign axi0w_writeAddr = fooWrapper_foo_axiMaster0_wAddrReg ;
  assign RDY_axi0w_writeAddr =
	     fooWrapper_foo_axiMaster0_wBurstCountReg != 8'd0 &&
	     !fooWrapper_foo_axiMaster0_wAddressPresented ;

  // value method axi0w_writeBurstLen
  assign axi0w_writeBurstLen =
	     fooWrapper_foo_axiMaster0_wBurstCountReg - 8'd1 ;
  assign RDY_axi0w_writeBurstLen = 1'd1 ;

  // value method axi0w_writeBurstWidth
  assign axi0w_writeBurstWidth = 3'b011 ;
  assign RDY_axi0w_writeBurstWidth = 1'd1 ;

  // value method axi0w_writeBurstType
  assign axi0w_writeBurstType = 2'b01 ;
  assign RDY_axi0w_writeBurstType = 1'd1 ;

  // value method axi0w_writeBurstProt
  assign axi0w_writeBurstProt = 3'b0 ;
  assign RDY_axi0w_writeBurstProt = 1'd1 ;

  // value method axi0w_writeBurstCache
  assign axi0w_writeBurstCache = 4'b0011 ;
  assign RDY_axi0w_writeBurstCache = 1'd1 ;

  // value method axi0w_writeId
  assign axi0w_writeId = fooWrapper_foo_axiMaster0_writeIdReg ;
  assign RDY_axi0w_writeId = 1'd1 ;

  // actionvalue method axi0w_writeData
  assign axi0w_writeData =
	     (fooWrapper_foo_axiMaster0_wfifo_rCache[71] &&
	      fooWrapper_foo_axiMaster0_wfifo_rCache[70:64] ==
	      fooWrapper_foo_axiMaster0_wfifo_rRdPtr) ?
	       fooWrapper_foo_axiMaster0_wfifo_rCache[63:0] :
	       fooWrapper_foo_axiMaster0_wfifo_memory$DOB ;
  assign RDY_axi0w_writeData =
	     fooWrapper_foo_axiMaster0_wfifo_rRdPtr !=
	     fooWrapper_foo_axiMaster0_wfifo_rWrPtr &&
	     fooWrapper_foo_axiMaster0_wBurstCountReg != 8'd0 ;

  // value method axi0w_writeDataByteEnable
  assign axi0w_writeDataByteEnable = 8'd255 ;
  assign RDY_axi0w_writeDataByteEnable = 1'd1 ;

  // value method axi0w_writeLastDataBeat
  assign axi0w_writeLastDataBeat =
	     fooWrapper_foo_axiMaster0_wBurstCountReg == 8'd1 ;
  assign RDY_axi0w_writeLastDataBeat = 1'd1 ;

  // action method axi0w_writeResponse
  assign RDY_axi0w_writeResponse =
	     fooWrapper_foo_axiMaster0_bfifo_rRdPtr + 7'd32 !=
	     fooWrapper_foo_axiMaster0_bfifo_rWrPtr ;

  // actionvalue method axi0r_readAddr
  assign axi0r_readAddr =
	     fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N ?
	       fooWrapper_foo_axiMaster0_raddrFifo_ff$D_OUT[39:8] :
	       fooWrapper_foo_axiMaster0_raddrFifo_enqw$wget[39:8] ;
  assign RDY_axi0r_readAddr =
	     fooWrapper_foo_axiMaster0_raddrFifo_ff_i_notEm_ETC___d506 &&
	     fooWrapper_foo_axiMaster0_raddrFifo_firstValid$Q_OUT ;

  // value method axi0r_readBurstLen
  assign axi0r_readBurstLen = x__h16520 - 8'd1 ;
  assign RDY_axi0r_readBurstLen =
	     fooWrapper_foo_axiMaster0_raddrFifo_firstValid$Q_OUT &&
	     (fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N ||
	      WILL_FIRE_RL_fooWrapper_handlereadRangerequest) ;

  // value method axi0r_readBurstWidth
  assign axi0r_readBurstWidth = 3'b011 ;
  assign RDY_axi0r_readBurstWidth = 1'd1 ;

  // value method axi0r_readBurstType
  assign axi0r_readBurstType = 2'b01 ;
  assign RDY_axi0r_readBurstType = 1'd1 ;

  // value method axi0r_readBurstProt
  assign axi0r_readBurstProt = 3'b0 ;
  assign RDY_axi0r_readBurstProt = 1'd1 ;

  // value method axi0r_readBurstCache
  assign axi0r_readBurstCache = 4'b0011 ;
  assign RDY_axi0r_readBurstCache = 1'd1 ;

  // value method axi0r_readId
  assign axi0r_readId = fooWrapper_foo_axiMaster0_readIdReg ;
  assign RDY_axi0r_readId = 1'd1 ;

  // action method axi0r_readData
  assign RDY_axi0r_readData =
	     fooWrapper_foo_axiMaster0_rfifo_rRdPtr + 12'd1024 !=
	     fooWrapper_foo_axiMaster0_rfifo_rWrPtr ;

  // actionvalue method axi1w_writeAddr
  assign axi1w_writeAddr = fooWrapper_foo_axiMaster1_wAddrReg ;
  assign RDY_axi1w_writeAddr =
	     fooWrapper_foo_axiMaster1_wBurstCountReg != 8'd0 &&
	     !fooWrapper_foo_axiMaster1_wAddressPresented ;

  // value method axi1w_writeBurstLen
  assign axi1w_writeBurstLen =
	     fooWrapper_foo_axiMaster1_wBurstCountReg - 8'd1 ;
  assign RDY_axi1w_writeBurstLen = 1'd1 ;

  // value method axi1w_writeBurstWidth
  assign axi1w_writeBurstWidth = 3'b011 ;
  assign RDY_axi1w_writeBurstWidth = 1'd1 ;

  // value method axi1w_writeBurstType
  assign axi1w_writeBurstType = 2'b01 ;
  assign RDY_axi1w_writeBurstType = 1'd1 ;

  // value method axi1w_writeBurstProt
  assign axi1w_writeBurstProt = 3'b0 ;
  assign RDY_axi1w_writeBurstProt = 1'd1 ;

  // value method axi1w_writeBurstCache
  assign axi1w_writeBurstCache = 4'b0011 ;
  assign RDY_axi1w_writeBurstCache = 1'd1 ;

  // value method axi1w_writeId
  assign axi1w_writeId = fooWrapper_foo_axiMaster1_writeIdReg ;
  assign RDY_axi1w_writeId = 1'd1 ;

  // actionvalue method axi1w_writeData
  assign axi1w_writeData =
	     (fooWrapper_foo_axiMaster1_wfifo_rCache[71] &&
	      fooWrapper_foo_axiMaster1_wfifo_rCache[70:64] ==
	      fooWrapper_foo_axiMaster1_wfifo_rRdPtr) ?
	       fooWrapper_foo_axiMaster1_wfifo_rCache[63:0] :
	       fooWrapper_foo_axiMaster1_wfifo_memory$DOB ;
  assign RDY_axi1w_writeData =
	     fooWrapper_foo_axiMaster1_wfifo_rRdPtr !=
	     fooWrapper_foo_axiMaster1_wfifo_rWrPtr &&
	     fooWrapper_foo_axiMaster1_wBurstCountReg != 8'd0 ;

  // value method axi1w_writeDataByteEnable
  assign axi1w_writeDataByteEnable = 8'd255 ;
  assign RDY_axi1w_writeDataByteEnable = 1'd1 ;

  // value method axi1w_writeLastDataBeat
  assign axi1w_writeLastDataBeat =
	     fooWrapper_foo_axiMaster1_wBurstCountReg == 8'd1 ;
  assign RDY_axi1w_writeLastDataBeat = 1'd1 ;

  // action method axi1w_writeResponse
  assign RDY_axi1w_writeResponse =
	     fooWrapper_foo_axiMaster1_bfifo_rRdPtr + 7'd32 !=
	     fooWrapper_foo_axiMaster1_bfifo_rWrPtr ;

  // actionvalue method axi1r_readAddr
  assign axi1r_readAddr =
	     fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N ?
	       fooWrapper_foo_axiMaster1_raddrFifo_ff$D_OUT[39:8] :
	       32'b0 ;
  assign RDY_axi1r_readAddr =
	     fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N &&
	     { 3'd0, x__h17026 } <=
	     fooWrapper_foo_axiMaster1_rfifoWordsAvail &&
	     fooWrapper_foo_axiMaster1_raddrFifo_firstValid$Q_OUT ;

  // value method axi1r_readBurstLen
  assign axi1r_readBurstLen = x__h17026 - 8'd1 ;
  assign RDY_axi1r_readBurstLen =
	     fooWrapper_foo_axiMaster1_raddrFifo_firstValid$Q_OUT &&
	     fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N ;

  // value method axi1r_readBurstWidth
  assign axi1r_readBurstWidth = 3'b011 ;
  assign RDY_axi1r_readBurstWidth = 1'd1 ;

  // value method axi1r_readBurstType
  assign axi1r_readBurstType = 2'b01 ;
  assign RDY_axi1r_readBurstType = 1'd1 ;

  // value method axi1r_readBurstProt
  assign axi1r_readBurstProt = 3'b0 ;
  assign RDY_axi1r_readBurstProt = 1'd1 ;

  // value method axi1r_readBurstCache
  assign axi1r_readBurstCache = 4'b0011 ;
  assign RDY_axi1r_readBurstCache = 1'd1 ;

  // value method axi1r_readId
  assign axi1r_readId = fooWrapper_foo_axiMaster1_readIdReg ;
  assign RDY_axi1r_readId = 1'd1 ;

  // action method axi1r_readData
  assign RDY_axi1r_readData =
	     fooWrapper_foo_axiMaster1_rfifo_rRdPtr + 12'd1024 !=
	     fooWrapper_foo_axiMaster1_rfifo_rWrPtr ;

  // actionvalue method axi2w_writeAddr
  assign axi2w_writeAddr = fooWrapper_foo_axiMaster2_wAddrReg ;
  assign RDY_axi2w_writeAddr =
	     fooWrapper_foo_axiMaster2_wBurstCountReg != 8'd0 &&
	     !fooWrapper_foo_axiMaster2_wAddressPresented ;

  // value method axi2w_writeBurstLen
  assign axi2w_writeBurstLen =
	     fooWrapper_foo_axiMaster2_wBurstCountReg - 8'd1 ;
  assign RDY_axi2w_writeBurstLen = 1'd1 ;

  // value method axi2w_writeBurstWidth
  assign axi2w_writeBurstWidth = 3'b011 ;
  assign RDY_axi2w_writeBurstWidth = 1'd1 ;

  // value method axi2w_writeBurstType
  assign axi2w_writeBurstType = 2'b01 ;
  assign RDY_axi2w_writeBurstType = 1'd1 ;

  // value method axi2w_writeBurstProt
  assign axi2w_writeBurstProt = 3'b0 ;
  assign RDY_axi2w_writeBurstProt = 1'd1 ;

  // value method axi2w_writeBurstCache
  assign axi2w_writeBurstCache = 4'b0011 ;
  assign RDY_axi2w_writeBurstCache = 1'd1 ;

  // value method axi2w_writeId
  assign axi2w_writeId = fooWrapper_foo_axiMaster2_writeIdReg ;
  assign RDY_axi2w_writeId = 1'd1 ;

  // actionvalue method axi2w_writeData
  assign axi2w_writeData =
	     (fooWrapper_foo_axiMaster2_wfifo_rCache[71] &&
	      fooWrapper_foo_axiMaster2_wfifo_rCache[70:64] ==
	      fooWrapper_foo_axiMaster2_wfifo_rRdPtr) ?
	       fooWrapper_foo_axiMaster2_wfifo_rCache[63:0] :
	       fooWrapper_foo_axiMaster2_wfifo_memory$DOB ;
  assign RDY_axi2w_writeData =
	     fooWrapper_foo_axiMaster2_wfifo_rRdPtr !=
	     fooWrapper_foo_axiMaster2_wfifo_rWrPtr &&
	     fooWrapper_foo_axiMaster2_wBurstCountReg != 8'd0 ;

  // value method axi2w_writeDataByteEnable
  assign axi2w_writeDataByteEnable = 8'd255 ;
  assign RDY_axi2w_writeDataByteEnable = 1'd1 ;

  // value method axi2w_writeLastDataBeat
  assign axi2w_writeLastDataBeat =
	     fooWrapper_foo_axiMaster2_wBurstCountReg == 8'd1 ;
  assign RDY_axi2w_writeLastDataBeat = 1'd1 ;

  // action method axi2w_writeResponse
  assign RDY_axi2w_writeResponse =
	     fooWrapper_foo_axiMaster2_bfifo_rRdPtr + 7'd32 !=
	     fooWrapper_foo_axiMaster2_bfifo_rWrPtr ;

  // actionvalue method axi2r_readAddr
  assign axi2r_readAddr =
	     fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N ?
	       fooWrapper_foo_axiMaster2_raddrFifo_ff$D_OUT[39:8] :
	       32'b0 ;
  assign RDY_axi2r_readAddr =
	     fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N &&
	     { 3'd0, x__h17532 } <=
	     fooWrapper_foo_axiMaster2_rfifoWordsAvail &&
	     fooWrapper_foo_axiMaster2_raddrFifo_firstValid$Q_OUT ;

  // value method axi2r_readBurstLen
  assign axi2r_readBurstLen = x__h17532 - 8'd1 ;
  assign RDY_axi2r_readBurstLen =
	     fooWrapper_foo_axiMaster2_raddrFifo_firstValid$Q_OUT &&
	     fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N ;

  // value method axi2r_readBurstWidth
  assign axi2r_readBurstWidth = 3'b011 ;
  assign RDY_axi2r_readBurstWidth = 1'd1 ;

  // value method axi2r_readBurstType
  assign axi2r_readBurstType = 2'b01 ;
  assign RDY_axi2r_readBurstType = 1'd1 ;

  // value method axi2r_readBurstProt
  assign axi2r_readBurstProt = 3'b0 ;
  assign RDY_axi2r_readBurstProt = 1'd1 ;

  // value method axi2r_readBurstCache
  assign axi2r_readBurstCache = 4'b0011 ;
  assign RDY_axi2r_readBurstCache = 1'd1 ;

  // value method axi2r_readId
  assign axi2r_readId = fooWrapper_foo_axiMaster2_readIdReg ;
  assign RDY_axi2r_readId = 1'd1 ;

  // action method axi2r_readData
  assign RDY_axi2r_readData =
	     fooWrapper_foo_axiMaster2_rfifo_rRdPtr + 12'd1024 !=
	     fooWrapper_foo_axiMaster2_rfifo_rWrPtr ;

  // submodule fooWrapper_foo_axiMaster0_bfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(7'd64)) fooWrapper_foo_axiMaster0_bfifo_memory(.CLKA(CLK),
								  .CLKB(CLK),
								  .ADDRA(fooWrapper_foo_axiMaster0_bfifo_memory$ADDRA),
								  .ADDRB(fooWrapper_foo_axiMaster0_bfifo_memory$ADDRB),
								  .DIA(fooWrapper_foo_axiMaster0_bfifo_memory$DIA),
								  .DIB(fooWrapper_foo_axiMaster0_bfifo_memory$DIB),
								  .WEA(fooWrapper_foo_axiMaster0_bfifo_memory$WEA),
								  .WEB(fooWrapper_foo_axiMaster0_bfifo_memory$WEB),
								  .ENA(fooWrapper_foo_axiMaster0_bfifo_memory$ENA),
								  .ENB(fooWrapper_foo_axiMaster0_bfifo_memory$ENB),
								  .DOA(),
								  .DOB());

  // submodule fooWrapper_foo_axiMaster0_raddrFifo_ff
  SizedFIFO #(.p1width(32'd40),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) fooWrapper_foo_axiMaster0_raddrFifo_ff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(fooWrapper_foo_axiMaster0_raddrFifo_ff$D_IN),
								      .ENQ(fooWrapper_foo_axiMaster0_raddrFifo_ff$ENQ),
								      .DEQ(fooWrapper_foo_axiMaster0_raddrFifo_ff$DEQ),
								      .CLR(fooWrapper_foo_axiMaster0_raddrFifo_ff$CLR),
								      .D_OUT(fooWrapper_foo_axiMaster0_raddrFifo_ff$D_OUT),
								      .FULL_N(fooWrapper_foo_axiMaster0_raddrFifo_ff$FULL_N),
								      .EMPTY_N(fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N));

  // submodule fooWrapper_foo_axiMaster0_raddrFifo_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) fooWrapper_foo_axiMaster0_raddrFifo_firstValid(.CLK(CLK),
									  .D_IN(fooWrapper_foo_axiMaster0_raddrFifo_firstValid$D_IN),
									  .EN(fooWrapper_foo_axiMaster0_raddrFifo_firstValid$EN),
									  .Q_OUT(fooWrapper_foo_axiMaster0_raddrFifo_firstValid$Q_OUT));

  // submodule fooWrapper_foo_axiMaster0_rfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) fooWrapper_foo_axiMaster0_rfifo_memory(.CLKA(CLK),
								     .CLKB(CLK),
								     .ADDRA(fooWrapper_foo_axiMaster0_rfifo_memory$ADDRA),
								     .ADDRB(fooWrapper_foo_axiMaster0_rfifo_memory$ADDRB),
								     .DIA(fooWrapper_foo_axiMaster0_rfifo_memory$DIA),
								     .DIB(fooWrapper_foo_axiMaster0_rfifo_memory$DIB),
								     .WEA(fooWrapper_foo_axiMaster0_rfifo_memory$WEA),
								     .WEB(fooWrapper_foo_axiMaster0_rfifo_memory$WEB),
								     .ENA(fooWrapper_foo_axiMaster0_rfifo_memory$ENA),
								     .ENB(fooWrapper_foo_axiMaster0_rfifo_memory$ENB),
								     .DOA(),
								     .DOB(fooWrapper_foo_axiMaster0_rfifo_memory$DOB));

  // submodule fooWrapper_foo_axiMaster0_wfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(7'd64)) fooWrapper_foo_axiMaster0_wfifo_memory(.CLKA(CLK),
								  .CLKB(CLK),
								  .ADDRA(fooWrapper_foo_axiMaster0_wfifo_memory$ADDRA),
								  .ADDRB(fooWrapper_foo_axiMaster0_wfifo_memory$ADDRB),
								  .DIA(fooWrapper_foo_axiMaster0_wfifo_memory$DIA),
								  .DIB(fooWrapper_foo_axiMaster0_wfifo_memory$DIB),
								  .WEA(fooWrapper_foo_axiMaster0_wfifo_memory$WEA),
								  .WEB(fooWrapper_foo_axiMaster0_wfifo_memory$WEB),
								  .ENA(fooWrapper_foo_axiMaster0_wfifo_memory$ENA),
								  .ENB(fooWrapper_foo_axiMaster0_wfifo_memory$ENB),
								  .DOA(),
								  .DOB(fooWrapper_foo_axiMaster0_wfifo_memory$DOB));

  // submodule fooWrapper_foo_axiMaster1_bfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(7'd64)) fooWrapper_foo_axiMaster1_bfifo_memory(.CLKA(CLK),
								  .CLKB(CLK),
								  .ADDRA(fooWrapper_foo_axiMaster1_bfifo_memory$ADDRA),
								  .ADDRB(fooWrapper_foo_axiMaster1_bfifo_memory$ADDRB),
								  .DIA(fooWrapper_foo_axiMaster1_bfifo_memory$DIA),
								  .DIB(fooWrapper_foo_axiMaster1_bfifo_memory$DIB),
								  .WEA(fooWrapper_foo_axiMaster1_bfifo_memory$WEA),
								  .WEB(fooWrapper_foo_axiMaster1_bfifo_memory$WEB),
								  .ENA(fooWrapper_foo_axiMaster1_bfifo_memory$ENA),
								  .ENB(fooWrapper_foo_axiMaster1_bfifo_memory$ENB),
								  .DOA(),
								  .DOB());

  // submodule fooWrapper_foo_axiMaster1_raddrFifo_ff
  SizedFIFO #(.p1width(32'd40),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) fooWrapper_foo_axiMaster1_raddrFifo_ff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(fooWrapper_foo_axiMaster1_raddrFifo_ff$D_IN),
								      .ENQ(fooWrapper_foo_axiMaster1_raddrFifo_ff$ENQ),
								      .DEQ(fooWrapper_foo_axiMaster1_raddrFifo_ff$DEQ),
								      .CLR(fooWrapper_foo_axiMaster1_raddrFifo_ff$CLR),
								      .D_OUT(fooWrapper_foo_axiMaster1_raddrFifo_ff$D_OUT),
								      .FULL_N(),
								      .EMPTY_N(fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N));

  // submodule fooWrapper_foo_axiMaster1_raddrFifo_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) fooWrapper_foo_axiMaster1_raddrFifo_firstValid(.CLK(CLK),
									  .D_IN(fooWrapper_foo_axiMaster1_raddrFifo_firstValid$D_IN),
									  .EN(fooWrapper_foo_axiMaster1_raddrFifo_firstValid$EN),
									  .Q_OUT(fooWrapper_foo_axiMaster1_raddrFifo_firstValid$Q_OUT));

  // submodule fooWrapper_foo_axiMaster1_rfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) fooWrapper_foo_axiMaster1_rfifo_memory(.CLKA(CLK),
								     .CLKB(CLK),
								     .ADDRA(fooWrapper_foo_axiMaster1_rfifo_memory$ADDRA),
								     .ADDRB(fooWrapper_foo_axiMaster1_rfifo_memory$ADDRB),
								     .DIA(fooWrapper_foo_axiMaster1_rfifo_memory$DIA),
								     .DIB(fooWrapper_foo_axiMaster1_rfifo_memory$DIB),
								     .WEA(fooWrapper_foo_axiMaster1_rfifo_memory$WEA),
								     .WEB(fooWrapper_foo_axiMaster1_rfifo_memory$WEB),
								     .ENA(fooWrapper_foo_axiMaster1_rfifo_memory$ENA),
								     .ENB(fooWrapper_foo_axiMaster1_rfifo_memory$ENB),
								     .DOA(),
								     .DOB());

  // submodule fooWrapper_foo_axiMaster1_wfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(7'd64)) fooWrapper_foo_axiMaster1_wfifo_memory(.CLKA(CLK),
								  .CLKB(CLK),
								  .ADDRA(fooWrapper_foo_axiMaster1_wfifo_memory$ADDRA),
								  .ADDRB(fooWrapper_foo_axiMaster1_wfifo_memory$ADDRB),
								  .DIA(fooWrapper_foo_axiMaster1_wfifo_memory$DIA),
								  .DIB(fooWrapper_foo_axiMaster1_wfifo_memory$DIB),
								  .WEA(fooWrapper_foo_axiMaster1_wfifo_memory$WEA),
								  .WEB(fooWrapper_foo_axiMaster1_wfifo_memory$WEB),
								  .ENA(fooWrapper_foo_axiMaster1_wfifo_memory$ENA),
								  .ENB(fooWrapper_foo_axiMaster1_wfifo_memory$ENB),
								  .DOA(),
								  .DOB(fooWrapper_foo_axiMaster1_wfifo_memory$DOB));

  // submodule fooWrapper_foo_axiMaster2_bfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(7'd64)) fooWrapper_foo_axiMaster2_bfifo_memory(.CLKA(CLK),
								  .CLKB(CLK),
								  .ADDRA(fooWrapper_foo_axiMaster2_bfifo_memory$ADDRA),
								  .ADDRB(fooWrapper_foo_axiMaster2_bfifo_memory$ADDRB),
								  .DIA(fooWrapper_foo_axiMaster2_bfifo_memory$DIA),
								  .DIB(fooWrapper_foo_axiMaster2_bfifo_memory$DIB),
								  .WEA(fooWrapper_foo_axiMaster2_bfifo_memory$WEA),
								  .WEB(fooWrapper_foo_axiMaster2_bfifo_memory$WEB),
								  .ENA(fooWrapper_foo_axiMaster2_bfifo_memory$ENA),
								  .ENB(fooWrapper_foo_axiMaster2_bfifo_memory$ENB),
								  .DOA(),
								  .DOB());

  // submodule fooWrapper_foo_axiMaster2_raddrFifo_ff
  SizedFIFO #(.p1width(32'd40),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) fooWrapper_foo_axiMaster2_raddrFifo_ff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(fooWrapper_foo_axiMaster2_raddrFifo_ff$D_IN),
								      .ENQ(fooWrapper_foo_axiMaster2_raddrFifo_ff$ENQ),
								      .DEQ(fooWrapper_foo_axiMaster2_raddrFifo_ff$DEQ),
								      .CLR(fooWrapper_foo_axiMaster2_raddrFifo_ff$CLR),
								      .D_OUT(fooWrapper_foo_axiMaster2_raddrFifo_ff$D_OUT),
								      .FULL_N(),
								      .EMPTY_N(fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N));

  // submodule fooWrapper_foo_axiMaster2_raddrFifo_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) fooWrapper_foo_axiMaster2_raddrFifo_firstValid(.CLK(CLK),
									  .D_IN(fooWrapper_foo_axiMaster2_raddrFifo_firstValid$D_IN),
									  .EN(fooWrapper_foo_axiMaster2_raddrFifo_firstValid$EN),
									  .Q_OUT(fooWrapper_foo_axiMaster2_raddrFifo_firstValid$Q_OUT));

  // submodule fooWrapper_foo_axiMaster2_rfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) fooWrapper_foo_axiMaster2_rfifo_memory(.CLKA(CLK),
								     .CLKB(CLK),
								     .ADDRA(fooWrapper_foo_axiMaster2_rfifo_memory$ADDRA),
								     .ADDRB(fooWrapper_foo_axiMaster2_rfifo_memory$ADDRB),
								     .DIA(fooWrapper_foo_axiMaster2_rfifo_memory$DIA),
								     .DIB(fooWrapper_foo_axiMaster2_rfifo_memory$DIB),
								     .WEA(fooWrapper_foo_axiMaster2_rfifo_memory$WEA),
								     .WEB(fooWrapper_foo_axiMaster2_rfifo_memory$WEB),
								     .ENA(fooWrapper_foo_axiMaster2_rfifo_memory$ENA),
								     .ENB(fooWrapper_foo_axiMaster2_rfifo_memory$ENB),
								     .DOA(),
								     .DOB());

  // submodule fooWrapper_foo_axiMaster2_wfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(7'd64)) fooWrapper_foo_axiMaster2_wfifo_memory(.CLKA(CLK),
								  .CLKB(CLK),
								  .ADDRA(fooWrapper_foo_axiMaster2_wfifo_memory$ADDRA),
								  .ADDRB(fooWrapper_foo_axiMaster2_wfifo_memory$ADDRB),
								  .DIA(fooWrapper_foo_axiMaster2_wfifo_memory$DIA),
								  .DIB(fooWrapper_foo_axiMaster2_wfifo_memory$DIB),
								  .WEA(fooWrapper_foo_axiMaster2_wfifo_memory$WEA),
								  .WEB(fooWrapper_foo_axiMaster2_wfifo_memory$WEB),
								  .ENA(fooWrapper_foo_axiMaster2_wfifo_memory$ENA),
								  .ENB(fooWrapper_foo_axiMaster2_wfifo_memory$ENB),
								  .DOA(),
								  .DOB(fooWrapper_foo_axiMaster2_wfifo_memory$DOB));

  // submodule fooWrapper_foo_hdmi_reset
  SyncResetA #(.RSTDELAY(32'd1)) fooWrapper_foo_hdmi_reset(.CLK(CLK_axi_clk),
							   .IN_RST(RST_N),
							   .OUT_RST());

  // submodule fooWrapper_foo_readFifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) fooWrapper_foo_readFifo_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(fooWrapper_foo_readFifo_memory$ADDRA),
							  .ADDRB(fooWrapper_foo_readFifo_memory$ADDRB),
							  .DIA(fooWrapper_foo_readFifo_memory$DIA),
							  .DIB(fooWrapper_foo_readFifo_memory$DIB),
							  .WEA(fooWrapper_foo_readFifo_memory$WEA),
							  .WEB(fooWrapper_foo_readFifo_memory$WEB),
							  .ENA(fooWrapper_foo_readFifo_memory$ENA),
							  .ENB(fooWrapper_foo_readFifo_memory$ENB),
							  .DOA(),
							  .DOB(fooWrapper_foo_readFifo_memory$DOB));

  // submodule requestFifo_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd34),
	  .MEMSIZE(5'd16)) requestFifo_fifo_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(requestFifo_fifo_memory$ADDRA),
						   .ADDRB(requestFifo_fifo_memory$ADDRB),
						   .DIA(requestFifo_fifo_memory$DIA),
						   .DIB(requestFifo_fifo_memory$DIB),
						   .WEA(requestFifo_fifo_memory$WEA),
						   .WEB(requestFifo_fifo_memory$WEB),
						   .ENA(requestFifo_fifo_memory$ENA),
						   .ENB(requestFifo_fifo_memory$ENB),
						   .DOA(),
						   .DOB(requestFifo_fifo_memory$DOB));

  // submodule responseFifo_fifo
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd0)) responseFifo_fifo(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(responseFifo_fifo$D_IN),
						 .ENQ(responseFifo_fifo$ENQ),
						 .DEQ(responseFifo_fifo$DEQ),
						 .CLR(responseFifo_fifo$CLR),
						 .D_OUT(responseFifo_fifo$D_OUT),
						 .FULL_N(responseFifo_fifo$FULL_N),
						 .EMPTY_N(responseFifo_fifo$EMPTY_N));

  // submodule rf
  RegFile #(.addr_width(32'd12),
	    .data_width(32'd32),
	    .lo(12'd0),
	    .hi(12'h00F)) rf(.CLK(CLK),
			     .ADDR_1(rf$ADDR_1),
			     .ADDR_2(rf$ADDR_2),
			     .ADDR_3(rf$ADDR_3),
			     .ADDR_4(rf$ADDR_4),
			     .ADDR_5(rf$ADDR_5),
			     .ADDR_IN(rf$ADDR_IN),
			     .D_IN(rf$D_IN),
			     .WE(rf$WE),
			     .D_OUT_1(rf$D_OUT_1),
			     .D_OUT_2(rf$D_OUT_2),
			     .D_OUT_3(),
			     .D_OUT_4(),
			     .D_OUT_5());

  // rule RL_fooWrapper_handlereadRangerequest
  assign WILL_FIRE_RL_fooWrapper_handlereadRangerequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326 &&
	     fooWrapper_foo_axiMaster0_raddrFifo_ff$FULL_N &&
	     requestFifo_fifo_wDataOut$wget[33:32] == 2'd0 ;

  // rule RL_fooWrapper_handlebeginTranslationTablerequest
  assign WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326 &&
	     requestFifo_fifo_wDataOut$wget[33:32] == 2'd1 ;

  // rule RL_fooWrapper_handleaddTranslationEntryrequest
  assign WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326 &&
	     requestFifo_fifo_wDataOut$wget[33:32] == 2'd2 ;

  // rule RL_fooWrapper_discardBlockedRequests
  assign WILL_FIRE_RL_fooWrapper_discardBlockedRequests =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326 &&
	     fooWrapper_requestTimerReg > fooWrapper_requestTimeLimitReg &&
	     !(!requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633) &&
	     !WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest &&
	     !WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest &&
	     !WILL_FIRE_RL_fooWrapper_handlereadRangerequest ;

  // rule RL_fooWrapper_discardBlockedResponses
  assign WILL_FIRE_RL_fooWrapper_discardBlockedResponses =
	     fooWrapper_responseTimerReg > fooWrapper_responseTimeLimitReg &&
	     !responseFifo_fifo$FULL_N &&
	     !(!responseFifo_fifo$FULL_N) &&
	     !EN_fifo_get ;

  // rule RL_fooWrapper_readValueresponse
  assign WILL_FIRE_RL_fooWrapper_readValueresponse =
	     fooWrapper_foo_readFifo_rRdPtr !=
	     fooWrapper_foo_readFifo_rWrPtr &&
	     responseFifo_fifo$FULL_N &&
	     !responseFifo_fifo$FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_fooWrapper_foo_segmentIndexReg$write_1__VAL_2 =
	     fooWrapper_foo_segmentIndexReg + 6'd1 ;
  assign MUX_fooWrapper_foo_segmentOffsetReg$write_1__VAL_1 =
	     fooWrapper_foo_segmentOffsetReg +
	     { requestFifo_fifo_wDataOut$wget[11:0], 12'd0 } ;
  assign MUX_fooWrapper_requestTimerReg$write_1__VAL_5 =
	     fooWrapper_requestTimerReg + 16'd1 ;
  assign MUX_fooWrapper_responseTimerReg$write_1__VAL_1 =
	     fooWrapper_responseTimerReg + 16'd1 ;
  assign MUX_responseFifo_fifo$enq_1__VAL_1 =
	     { 66'h0AAAAAAAAAAAAAAAA, v__h14045 } ;

  // inlined wires
  assign requestFifo_fifo_wDataIn$wget =
	     { fifo_put_v[1:0], requestFifo_buff[33:2] } ;
  assign requestFifo_fifo_wDataOut$wget =
	     (requestFifo_fifo_rCache[39] &&
	      requestFifo_fifo_rCache[38:34] == requestFifo_fifo_rRdPtr) ?
	       requestFifo_fifo_rCache[33:0] :
	       requestFifo_fifo_memory$DOB ;
  assign fooWrapper_foo_axiMaster0_raddrFifo_enqw$wget =
	     { requestFifo_fifo_wDataOut$wget[31:0], 8'd8 } ;
  assign requestFifo_fifo_pwDequeue$whas =
	     WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_fooWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_fooWrapper_discardBlockedRequests ;
  assign requestFifo_fifo_pwEnqueue$whas =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 &&
	     requestFifo_count == 32'd1 ;
  assign fooWrapper_foo_axiMaster0_bfifo_pwEnqueue$whas =
	     EN_axi0w_writeResponse &&
	     axi0w_writeResponse_responseCode != 2'd0 ;
  assign fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas =
	     fooWrapper_foo_axiMaster0_rfifo_rRdPtr !=
	     fooWrapper_foo_axiMaster0_rfifo_rWrPtr &&
	     fooWrapper_foo_readFifo_rRdPtr + 7'd32 !=
	     fooWrapper_foo_readFifo_rWrPtr ;
  assign fooWrapper_foo_axiMaster1_bfifo_pwEnqueue$whas =
	     EN_axi1w_writeResponse &&
	     axi1w_writeResponse_responseCode != 2'd0 ;
  assign fooWrapper_foo_axiMaster2_bfifo_pwEnqueue$whas =
	     EN_axi2w_writeResponse &&
	     axi2w_writeResponse_responseCode != 2'd0 ;

  // register fooWrapper_blockedRequestsDiscardedReg
  assign fooWrapper_blockedRequestsDiscardedReg$D_IN =
	     fooWrapper_blockedRequestsDiscardedReg + 32'd1 ;
  assign fooWrapper_blockedRequestsDiscardedReg$EN =
	     WILL_FIRE_RL_fooWrapper_discardBlockedRequests ;

  // register fooWrapper_blockedResponsesDiscardedReg
  assign fooWrapper_blockedResponsesDiscardedReg$D_IN =
	     fooWrapper_blockedResponsesDiscardedReg + 32'd1 ;
  assign fooWrapper_blockedResponsesDiscardedReg$EN =
	     WILL_FIRE_RL_fooWrapper_discardBlockedResponses ;

  // register fooWrapper_foo_axiMaster0_bfifo_rCache
  assign fooWrapper_foo_axiMaster0_bfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster0_bfifo_rWrPtr, x__h2924 } ;
  assign fooWrapper_foo_axiMaster0_bfifo_rCache$EN =
	     fooWrapper_foo_axiMaster0_bfifo_pwEnqueue$whas ;

  // register fooWrapper_foo_axiMaster0_bfifo_rRdPtr
  assign fooWrapper_foo_axiMaster0_bfifo_rRdPtr$D_IN =
	     fooWrapper_foo_axiMaster0_bfifo_rRdPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster0_bfifo_rRdPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster0_bfifo_rWrPtr
  assign fooWrapper_foo_axiMaster0_bfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster0_bfifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster0_bfifo_rWrPtr$EN =
	     fooWrapper_foo_axiMaster0_bfifo_pwEnqueue$whas ;

  // register fooWrapper_foo_axiMaster0_readIdReg
  assign fooWrapper_foo_axiMaster0_readIdReg$D_IN =
	     fooWrapper_foo_axiMaster0_readIdReg + 1'd1 ;
  assign fooWrapper_foo_axiMaster0_readIdReg$EN = EN_axi0r_readAddr ;

  // register fooWrapper_foo_axiMaster0_rfifoWordsAvail
  assign fooWrapper_foo_axiMaster0_rfifoWordsAvail$D_IN =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ?
	       avail__h4699 :
	       _theResult____h4691 ;
  assign fooWrapper_foo_axiMaster0_rfifoWordsAvail$EN = 1'd1 ;

  // register fooWrapper_foo_axiMaster0_rfifo_rCache
  assign fooWrapper_foo_axiMaster0_rfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster0_rfifo_rWrPtr, x__h4263 } ;
  assign fooWrapper_foo_axiMaster0_rfifo_rCache$EN = EN_axi0r_readData ;

  // register fooWrapper_foo_axiMaster0_rfifo_rRdPtr
  assign fooWrapper_foo_axiMaster0_rfifo_rRdPtr$D_IN = x__h4364 ;
  assign fooWrapper_foo_axiMaster0_rfifo_rRdPtr$EN =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ;

  // register fooWrapper_foo_axiMaster0_rfifo_rWrPtr
  assign fooWrapper_foo_axiMaster0_rfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster0_rfifo_rWrPtr + 12'd1 ;
  assign fooWrapper_foo_axiMaster0_rfifo_rWrPtr$EN = EN_axi0r_readData ;

  // register fooWrapper_foo_axiMaster0_wAddrReg
  assign fooWrapper_foo_axiMaster0_wAddrReg$D_IN = 32'h0 ;
  assign fooWrapper_foo_axiMaster0_wAddrReg$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster0_wAddressPresented
  assign fooWrapper_foo_axiMaster0_wAddressPresented$D_IN = 1'd1 ;
  assign fooWrapper_foo_axiMaster0_wAddressPresented$EN = EN_axi0w_writeAddr ;

  // register fooWrapper_foo_axiMaster0_wBurstCountReg
  assign fooWrapper_foo_axiMaster0_wBurstCountReg$D_IN =
	     fooWrapper_foo_axiMaster0_wBurstCountReg - 8'd1 ;
  assign fooWrapper_foo_axiMaster0_wBurstCountReg$EN = EN_axi0w_writeData ;

  // register fooWrapper_foo_axiMaster0_wfifo_rCache
  assign fooWrapper_foo_axiMaster0_wfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster0_wfifo_rWrPtr, 64'd0 } ;
  assign fooWrapper_foo_axiMaster0_wfifo_rCache$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster0_wfifo_rRdPtr
  assign fooWrapper_foo_axiMaster0_wfifo_rRdPtr$D_IN = x__h2141 ;
  assign fooWrapper_foo_axiMaster0_wfifo_rRdPtr$EN = EN_axi0w_writeData ;

  // register fooWrapper_foo_axiMaster0_wfifo_rWrPtr
  assign fooWrapper_foo_axiMaster0_wfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster0_wfifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster0_wfifo_rWrPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster0_writeIdReg
  assign fooWrapper_foo_axiMaster0_writeIdReg$D_IN =
	     fooWrapper_foo_axiMaster0_writeIdReg + 1'd1 ;
  assign fooWrapper_foo_axiMaster0_writeIdReg$EN = EN_axi0w_writeAddr ;

  // register fooWrapper_foo_axiMaster1_bfifo_rCache
  assign fooWrapper_foo_axiMaster1_bfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster1_bfifo_rWrPtr, x__h6442 } ;
  assign fooWrapper_foo_axiMaster1_bfifo_rCache$EN =
	     fooWrapper_foo_axiMaster1_bfifo_pwEnqueue$whas ;

  // register fooWrapper_foo_axiMaster1_bfifo_rRdPtr
  assign fooWrapper_foo_axiMaster1_bfifo_rRdPtr$D_IN =
	     fooWrapper_foo_axiMaster1_bfifo_rRdPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster1_bfifo_rRdPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster1_bfifo_rWrPtr
  assign fooWrapper_foo_axiMaster1_bfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster1_bfifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster1_bfifo_rWrPtr$EN =
	     fooWrapper_foo_axiMaster1_bfifo_pwEnqueue$whas ;

  // register fooWrapper_foo_axiMaster1_readIdReg
  assign fooWrapper_foo_axiMaster1_readIdReg$D_IN =
	     fooWrapper_foo_axiMaster1_readIdReg + 1'd1 ;
  assign fooWrapper_foo_axiMaster1_readIdReg$EN = EN_axi1r_readAddr ;

  // register fooWrapper_foo_axiMaster1_rfifoWordsAvail
  assign fooWrapper_foo_axiMaster1_rfifoWordsAvail$D_IN =
	     _theResult____h8209 ;
  assign fooWrapper_foo_axiMaster1_rfifoWordsAvail$EN = 1'd1 ;

  // register fooWrapper_foo_axiMaster1_rfifo_rCache
  assign fooWrapper_foo_axiMaster1_rfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster1_rfifo_rWrPtr, x__h7781 } ;
  assign fooWrapper_foo_axiMaster1_rfifo_rCache$EN = EN_axi1r_readData ;

  // register fooWrapper_foo_axiMaster1_rfifo_rRdPtr
  assign fooWrapper_foo_axiMaster1_rfifo_rRdPtr$D_IN =
	     fooWrapper_foo_axiMaster1_rfifo_rRdPtr + 12'd1 ;
  assign fooWrapper_foo_axiMaster1_rfifo_rRdPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster1_rfifo_rWrPtr
  assign fooWrapper_foo_axiMaster1_rfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster1_rfifo_rWrPtr + 12'd1 ;
  assign fooWrapper_foo_axiMaster1_rfifo_rWrPtr$EN = EN_axi1r_readData ;

  // register fooWrapper_foo_axiMaster1_wAddrReg
  assign fooWrapper_foo_axiMaster1_wAddrReg$D_IN = 32'h0 ;
  assign fooWrapper_foo_axiMaster1_wAddrReg$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster1_wAddressPresented
  assign fooWrapper_foo_axiMaster1_wAddressPresented$D_IN = 1'd1 ;
  assign fooWrapper_foo_axiMaster1_wAddressPresented$EN = EN_axi1w_writeAddr ;

  // register fooWrapper_foo_axiMaster1_wBurstCountReg
  assign fooWrapper_foo_axiMaster1_wBurstCountReg$D_IN =
	     fooWrapper_foo_axiMaster1_wBurstCountReg - 8'd1 ;
  assign fooWrapper_foo_axiMaster1_wBurstCountReg$EN = EN_axi1w_writeData ;

  // register fooWrapper_foo_axiMaster1_wfifo_rCache
  assign fooWrapper_foo_axiMaster1_wfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster1_wfifo_rWrPtr, 64'd0 } ;
  assign fooWrapper_foo_axiMaster1_wfifo_rCache$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster1_wfifo_rRdPtr
  assign fooWrapper_foo_axiMaster1_wfifo_rRdPtr$D_IN = x__h5659 ;
  assign fooWrapper_foo_axiMaster1_wfifo_rRdPtr$EN = EN_axi1w_writeData ;

  // register fooWrapper_foo_axiMaster1_wfifo_rWrPtr
  assign fooWrapper_foo_axiMaster1_wfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster1_wfifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster1_wfifo_rWrPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster1_writeIdReg
  assign fooWrapper_foo_axiMaster1_writeIdReg$D_IN =
	     fooWrapper_foo_axiMaster1_writeIdReg + 1'd1 ;
  assign fooWrapper_foo_axiMaster1_writeIdReg$EN = EN_axi1w_writeAddr ;

  // register fooWrapper_foo_axiMaster2_bfifo_rCache
  assign fooWrapper_foo_axiMaster2_bfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster2_bfifo_rWrPtr, x__h9960 } ;
  assign fooWrapper_foo_axiMaster2_bfifo_rCache$EN =
	     fooWrapper_foo_axiMaster2_bfifo_pwEnqueue$whas ;

  // register fooWrapper_foo_axiMaster2_bfifo_rRdPtr
  assign fooWrapper_foo_axiMaster2_bfifo_rRdPtr$D_IN =
	     fooWrapper_foo_axiMaster2_bfifo_rRdPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster2_bfifo_rRdPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster2_bfifo_rWrPtr
  assign fooWrapper_foo_axiMaster2_bfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster2_bfifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster2_bfifo_rWrPtr$EN =
	     fooWrapper_foo_axiMaster2_bfifo_pwEnqueue$whas ;

  // register fooWrapper_foo_axiMaster2_readIdReg
  assign fooWrapper_foo_axiMaster2_readIdReg$D_IN =
	     fooWrapper_foo_axiMaster2_readIdReg + 1'd1 ;
  assign fooWrapper_foo_axiMaster2_readIdReg$EN = EN_axi2r_readAddr ;

  // register fooWrapper_foo_axiMaster2_rfifoWordsAvail
  assign fooWrapper_foo_axiMaster2_rfifoWordsAvail$D_IN =
	     _theResult____h11727 ;
  assign fooWrapper_foo_axiMaster2_rfifoWordsAvail$EN = 1'd1 ;

  // register fooWrapper_foo_axiMaster2_rfifo_rCache
  assign fooWrapper_foo_axiMaster2_rfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster2_rfifo_rWrPtr, x__h11299 } ;
  assign fooWrapper_foo_axiMaster2_rfifo_rCache$EN = EN_axi2r_readData ;

  // register fooWrapper_foo_axiMaster2_rfifo_rRdPtr
  assign fooWrapper_foo_axiMaster2_rfifo_rRdPtr$D_IN =
	     fooWrapper_foo_axiMaster2_rfifo_rRdPtr + 12'd1 ;
  assign fooWrapper_foo_axiMaster2_rfifo_rRdPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster2_rfifo_rWrPtr
  assign fooWrapper_foo_axiMaster2_rfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster2_rfifo_rWrPtr + 12'd1 ;
  assign fooWrapper_foo_axiMaster2_rfifo_rWrPtr$EN = EN_axi2r_readData ;

  // register fooWrapper_foo_axiMaster2_wAddrReg
  assign fooWrapper_foo_axiMaster2_wAddrReg$D_IN = 32'h0 ;
  assign fooWrapper_foo_axiMaster2_wAddrReg$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster2_wAddressPresented
  assign fooWrapper_foo_axiMaster2_wAddressPresented$D_IN = 1'd1 ;
  assign fooWrapper_foo_axiMaster2_wAddressPresented$EN = EN_axi2w_writeAddr ;

  // register fooWrapper_foo_axiMaster2_wBurstCountReg
  assign fooWrapper_foo_axiMaster2_wBurstCountReg$D_IN =
	     fooWrapper_foo_axiMaster2_wBurstCountReg - 8'd1 ;
  assign fooWrapper_foo_axiMaster2_wBurstCountReg$EN = EN_axi2w_writeData ;

  // register fooWrapper_foo_axiMaster2_wfifo_rCache
  assign fooWrapper_foo_axiMaster2_wfifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_axiMaster2_wfifo_rWrPtr, 64'd0 } ;
  assign fooWrapper_foo_axiMaster2_wfifo_rCache$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster2_wfifo_rRdPtr
  assign fooWrapper_foo_axiMaster2_wfifo_rRdPtr$D_IN = x__h9177 ;
  assign fooWrapper_foo_axiMaster2_wfifo_rRdPtr$EN = EN_axi2w_writeData ;

  // register fooWrapper_foo_axiMaster2_wfifo_rWrPtr
  assign fooWrapper_foo_axiMaster2_wfifo_rWrPtr$D_IN =
	     fooWrapper_foo_axiMaster2_wfifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_axiMaster2_wfifo_rWrPtr$EN = 1'b0 ;

  // register fooWrapper_foo_axiMaster2_writeIdReg
  assign fooWrapper_foo_axiMaster2_writeIdReg$D_IN =
	     fooWrapper_foo_axiMaster2_writeIdReg + 1'd1 ;
  assign fooWrapper_foo_axiMaster2_writeIdReg$EN = EN_axi2w_writeAddr ;

  // register fooWrapper_foo_readFifo_rCache
  assign fooWrapper_foo_readFifo_rCache$D_IN =
	     { 1'd1, fooWrapper_foo_readFifo_rWrPtr, x__h12441 } ;
  assign fooWrapper_foo_readFifo_rCache$EN =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ;

  // register fooWrapper_foo_readFifo_rRdPtr
  assign fooWrapper_foo_readFifo_rRdPtr$D_IN = x__h12542 ;
  assign fooWrapper_foo_readFifo_rRdPtr$EN =
	     WILL_FIRE_RL_fooWrapper_readValueresponse ;

  // register fooWrapper_foo_readFifo_rWrPtr
  assign fooWrapper_foo_readFifo_rWrPtr$D_IN =
	     fooWrapper_foo_readFifo_rWrPtr + 7'd1 ;
  assign fooWrapper_foo_readFifo_rWrPtr$EN =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ;

  // register fooWrapper_foo_segmentIndexReg
  assign fooWrapper_foo_segmentIndexReg$D_IN =
	     WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ?
	       requestFifo_fifo_wDataOut$wget[5:0] :
	       MUX_fooWrapper_foo_segmentIndexReg$write_1__VAL_2 ;
  assign fooWrapper_foo_segmentIndexReg$EN =
	     WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ;

  // register fooWrapper_foo_segmentOffsetReg
  assign fooWrapper_foo_segmentOffsetReg$D_IN =
	     WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ?
	       MUX_fooWrapper_foo_segmentOffsetReg$write_1__VAL_1 :
	       24'd0 ;
  assign fooWrapper_foo_segmentOffsetReg$EN =
	     WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ;

  // register fooWrapper_junkReqReg
  assign fooWrapper_junkReqReg$D_IN = 32'h0 ;
  assign fooWrapper_junkReqReg$EN = 1'b0 ;

  // register fooWrapper_requestFired
  assign fooWrapper_requestFired$D_IN = fooWrapper_requestFired + 32'd1 ;
  assign fooWrapper_requestFired$EN =
	     WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_fooWrapper_handlereadRangerequest ;

  // register fooWrapper_requestTimeLimitReg
  assign fooWrapper_requestTimeLimitReg$D_IN = 16'h0 ;
  assign fooWrapper_requestTimeLimitReg$EN = 1'b0 ;

  // register fooWrapper_requestTimerReg
  assign fooWrapper_requestTimerReg$D_IN =
	     (WILL_FIRE_RL_fooWrapper_discardBlockedRequests ||
	      WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ||
	      WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ||
	      WILL_FIRE_RL_fooWrapper_handlereadRangerequest) ?
	       16'd0 :
	       MUX_fooWrapper_requestTimerReg$write_1__VAL_5 ;
  assign fooWrapper_requestTimerReg$EN =
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ||
	     WILL_FIRE_RL_fooWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_fooWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_fooWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_fooWrapper_discardBlockedRequests ;

  // register fooWrapper_responseFired
  assign fooWrapper_responseFired$D_IN = fooWrapper_responseFired + 32'd1 ;
  assign fooWrapper_responseFired$EN =
	     responseFifo_fifo$FULL_N ||
	     WILL_FIRE_RL_fooWrapper_readValueresponse ;

  // register fooWrapper_responseTimeLimitReg
  assign fooWrapper_responseTimeLimitReg$D_IN = 16'h0 ;
  assign fooWrapper_responseTimeLimitReg$EN = 1'b0 ;

  // register fooWrapper_responseTimerReg
  assign fooWrapper_responseTimerReg$D_IN =
	     (!responseFifo_fifo$FULL_N) ?
	       MUX_fooWrapper_responseTimerReg$write_1__VAL_1 :
	       16'd0 ;
  assign fooWrapper_responseTimerReg$EN =
	     !responseFifo_fifo$FULL_N ||
	     WILL_FIRE_RL_fooWrapper_discardBlockedResponses ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN = EN_fifo_get && responseFifo_fifo$EMPTY_N ;

  // register interruptCleared
  assign interruptCleared$D_IN = !(!interrupted) ;
  assign interruptCleared$EN =
	     EN_ctrl_put && ctrl_put_addr == 12'h0 && ctrl_put_v[0] &&
	     interrupted ||
	     !interrupted ;

  // register interrupted
  assign interrupted$D_IN = responseFifo_fifo$EMPTY_N ;
  assign interrupted$EN = 1'd1 ;

  // register overflowCount
  assign overflowCount$D_IN = overflowCount + 32'd1 ;
  assign overflowCount$EN =
	     EN_fifo_put &&
	     requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { fifo_put_v, requestFifo_buff[33:32] } :
	       newval__h15773 ;
  assign requestFifo_buff$EN =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h15874 ;
  assign requestFifo_count$EN =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ;

  // register requestFifo_fifo_rCache
  assign requestFifo_fifo_rCache$D_IN =
	     { 1'd1, requestFifo_fifo_rWrPtr, x__h710 } ;
  assign requestFifo_fifo_rCache$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register requestFifo_fifo_rRdPtr
  assign requestFifo_fifo_rRdPtr$D_IN = x__h811 ;
  assign requestFifo_fifo_rRdPtr$EN = requestFifo_fifo_pwDequeue$whas ;

  // register requestFifo_fifo_rWrPtr
  assign requestFifo_fifo_rWrPtr$D_IN = requestFifo_fifo_rWrPtr + 5'd1 ;
  assign requestFifo_fifo_rWrPtr$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     (responseFifo_count == 32'd3) ? 32'd0 : x__h13830 ;
  assign responseFifo_count$EN =
	     _dor1responseFifo_count$EN_write && responseFifo_fifo$EMPTY_N ;

  // register underflowCount
  assign underflowCount$D_IN = underflowCount + 32'd1 ;
  assign underflowCount$EN = EN_fifo_get && !responseFifo_fifo$EMPTY_N ;

  // register word0Put
  assign word0Put$D_IN = word1Put ;
  assign word0Put$EN = EN_fifo_put ;

  // register word1Put
  assign word1Put$D_IN = fifo_put_v ;
  assign word1Put$EN = EN_fifo_put ;

  // submodule fooWrapper_foo_axiMaster0_bfifo_memory
  assign fooWrapper_foo_axiMaster0_bfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster0_bfifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$ADDRB =
	     fooWrapper_foo_axiMaster0_bfifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$DIA = x__h2924 ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$DIB =
	     2'b10 /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$WEA =
	     fooWrapper_foo_axiMaster0_bfifo_pwEnqueue$whas ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster0_bfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster0_raddrFifo_ff
  assign fooWrapper_foo_axiMaster0_raddrFifo_ff$D_IN =
	     fooWrapper_foo_axiMaster0_raddrFifo_enqw$wget ;
  assign fooWrapper_foo_axiMaster0_raddrFifo_ff$ENQ =
	     WILL_FIRE_RL_fooWrapper_handlereadRangerequest &&
	     (!EN_axi0r_readAddr ||
	      fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N) ;
  assign fooWrapper_foo_axiMaster0_raddrFifo_ff$DEQ =
	     EN_axi0r_readAddr &&
	     fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N ;
  assign fooWrapper_foo_axiMaster0_raddrFifo_ff$CLR = 1'b0 ;

  // submodule fooWrapper_foo_axiMaster0_raddrFifo_firstValid
  assign fooWrapper_foo_axiMaster0_raddrFifo_firstValid$D_IN = 1'd1 ;
  assign fooWrapper_foo_axiMaster0_raddrFifo_firstValid$EN =
	     EN_axi0r_readAddr ;

  // submodule fooWrapper_foo_axiMaster0_rfifo_memory
  assign fooWrapper_foo_axiMaster0_rfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster0_rfifo_rWrPtr[10:0] ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$ADDRB =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ?
	       x__h4364[10:0] :
	       fooWrapper_foo_axiMaster0_rfifo_rRdPtr[10:0] ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$DIA = x__h4263 ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$WEA = EN_axi0r_readData ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster0_rfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster0_wfifo_memory
  assign fooWrapper_foo_axiMaster0_wfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster0_wfifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$ADDRB =
	     EN_axi0w_writeData ?
	       x__h2141[5:0] :
	       fooWrapper_foo_axiMaster0_wfifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$DIA = 64'd0 ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$WEA = 1'b0 ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster0_wfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster1_bfifo_memory
  assign fooWrapper_foo_axiMaster1_bfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster1_bfifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$ADDRB =
	     fooWrapper_foo_axiMaster1_bfifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$DIA = x__h6442 ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$DIB =
	     2'b10 /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$WEA =
	     fooWrapper_foo_axiMaster1_bfifo_pwEnqueue$whas ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster1_bfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster1_raddrFifo_ff
  assign fooWrapper_foo_axiMaster1_raddrFifo_ff$D_IN = 40'h0 ;
  assign fooWrapper_foo_axiMaster1_raddrFifo_ff$ENQ = 1'b0 ;
  assign fooWrapper_foo_axiMaster1_raddrFifo_ff$DEQ =
	     EN_axi1r_readAddr &&
	     fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N ;
  assign fooWrapper_foo_axiMaster1_raddrFifo_ff$CLR = 1'b0 ;

  // submodule fooWrapper_foo_axiMaster1_raddrFifo_firstValid
  assign fooWrapper_foo_axiMaster1_raddrFifo_firstValid$D_IN = 1'd1 ;
  assign fooWrapper_foo_axiMaster1_raddrFifo_firstValid$EN =
	     EN_axi1r_readAddr ;

  // submodule fooWrapper_foo_axiMaster1_rfifo_memory
  assign fooWrapper_foo_axiMaster1_rfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster1_rfifo_rWrPtr[10:0] ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$ADDRB =
	     fooWrapper_foo_axiMaster1_rfifo_rRdPtr[10:0] ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$DIA = x__h7781 ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$WEA = EN_axi1r_readData ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster1_rfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster1_wfifo_memory
  assign fooWrapper_foo_axiMaster1_wfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster1_wfifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$ADDRB =
	     EN_axi1w_writeData ?
	       x__h5659[5:0] :
	       fooWrapper_foo_axiMaster1_wfifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$DIA = 64'd0 ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$WEA = 1'b0 ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster1_wfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster2_bfifo_memory
  assign fooWrapper_foo_axiMaster2_bfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster2_bfifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$ADDRB =
	     fooWrapper_foo_axiMaster2_bfifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$DIA = x__h9960 ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$DIB =
	     2'b10 /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$WEA =
	     fooWrapper_foo_axiMaster2_bfifo_pwEnqueue$whas ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster2_bfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster2_raddrFifo_ff
  assign fooWrapper_foo_axiMaster2_raddrFifo_ff$D_IN = 40'h0 ;
  assign fooWrapper_foo_axiMaster2_raddrFifo_ff$ENQ = 1'b0 ;
  assign fooWrapper_foo_axiMaster2_raddrFifo_ff$DEQ =
	     EN_axi2r_readAddr &&
	     fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N ;
  assign fooWrapper_foo_axiMaster2_raddrFifo_ff$CLR = 1'b0 ;

  // submodule fooWrapper_foo_axiMaster2_raddrFifo_firstValid
  assign fooWrapper_foo_axiMaster2_raddrFifo_firstValid$D_IN = 1'd1 ;
  assign fooWrapper_foo_axiMaster2_raddrFifo_firstValid$EN =
	     EN_axi2r_readAddr ;

  // submodule fooWrapper_foo_axiMaster2_rfifo_memory
  assign fooWrapper_foo_axiMaster2_rfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster2_rfifo_rWrPtr[10:0] ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$ADDRB =
	     fooWrapper_foo_axiMaster2_rfifo_rRdPtr[10:0] ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$DIA = x__h11299 ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$WEA = EN_axi2r_readData ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster2_rfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_axiMaster2_wfifo_memory
  assign fooWrapper_foo_axiMaster2_wfifo_memory$ADDRA =
	     fooWrapper_foo_axiMaster2_wfifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$ADDRB =
	     EN_axi2w_writeData ?
	       x__h9177[5:0] :
	       fooWrapper_foo_axiMaster2_wfifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$DIA = 64'd0 ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$WEA = 1'b0 ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_axiMaster2_wfifo_memory$ENB = 1'd1 ;

  // submodule fooWrapper_foo_readFifo_memory
  assign fooWrapper_foo_readFifo_memory$ADDRA =
	     fooWrapper_foo_readFifo_rWrPtr[5:0] ;
  assign fooWrapper_foo_readFifo_memory$ADDRB =
	     WILL_FIRE_RL_fooWrapper_readValueresponse ?
	       x__h12542[5:0] :
	       fooWrapper_foo_readFifo_rRdPtr[5:0] ;
  assign fooWrapper_foo_readFifo_memory$DIA = x__h12441 ;
  assign fooWrapper_foo_readFifo_memory$DIB =
	     32'hAAAAAAAA /* unspecified value */  ;
  assign fooWrapper_foo_readFifo_memory$WEA =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ;
  assign fooWrapper_foo_readFifo_memory$WEB = 1'd0 ;
  assign fooWrapper_foo_readFifo_memory$ENA = 1'd1 ;
  assign fooWrapper_foo_readFifo_memory$ENB = 1'd1 ;

  // submodule requestFifo_fifo_memory
  assign requestFifo_fifo_memory$ADDRA = requestFifo_fifo_rWrPtr[3:0] ;
  assign requestFifo_fifo_memory$ADDRB =
	     requestFifo_fifo_pwDequeue$whas ?
	       x__h811[3:0] :
	       requestFifo_fifo_rRdPtr[3:0] ;
  assign requestFifo_fifo_memory$DIA = x__h710 ;
  assign requestFifo_fifo_memory$DIB =
	     34'h2AAAAAAAA /* unspecified value */  ;
  assign requestFifo_fifo_memory$WEA = requestFifo_fifo_pwEnqueue$whas ;
  assign requestFifo_fifo_memory$WEB = 1'd0 ;
  assign requestFifo_fifo_memory$ENA = 1'd1 ;
  assign requestFifo_fifo_memory$ENB = 1'd1 ;

  // submodule responseFifo_fifo
  assign responseFifo_fifo$D_IN =
	     WILL_FIRE_RL_fooWrapper_readValueresponse ?
	       MUX_responseFifo_fifo$enq_1__VAL_1 :
	       98'h1AAAAAAAAAAAAAAAAAAAAAAAA ;
  assign responseFifo_fifo$ENQ =
	     WILL_FIRE_RL_fooWrapper_readValueresponse ||
	     responseFifo_fifo$FULL_N ;
  assign responseFifo_fifo$DEQ =
	     _dor1responseFifo_fifo$EN_deq && responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd3 ;
  assign responseFifo_fifo$CLR = 1'b0 ;

  // submodule rf
  assign rf$ADDR_1 = 12'h004 ;
  assign rf$ADDR_2 = ctrl_get_addr ;
  assign rf$ADDR_3 = 12'h0 ;
  assign rf$ADDR_4 = 12'h0 ;
  assign rf$ADDR_5 = 12'h0 ;
  assign rf$ADDR_IN = ctrl_put_addr ;
  assign rf$D_IN = ctrl_put_v ;
  assign rf$WE = EN_ctrl_put ;

  // remaining internal signals
  assign IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631 =
	     responseFifo_fifo$FULL_N ? 32'h00000020 : 32'd0 ;
  assign _dor1responseFifo_count$EN_write =
	     WILL_FIRE_RL_fooWrapper_discardBlockedResponses || EN_fifo_get ;
  assign _dor1responseFifo_fifo$EN_deq =
	     WILL_FIRE_RL_fooWrapper_discardBlockedResponses || EN_fifo_get ;
  assign _theResult____h11727 =
	     EN_axi2r_readAddr ?
	       avail___1__h11738 :
	       fooWrapper_foo_axiMaster2_rfifoWordsAvail ;
  assign _theResult____h4691 =
	     EN_axi0r_readAddr ?
	       avail___1__h4702 :
	       fooWrapper_foo_axiMaster0_rfifoWordsAvail ;
  assign _theResult____h8209 =
	     EN_axi1r_readAddr ?
	       avail___1__h8220 :
	       fooWrapper_foo_axiMaster1_rfifoWordsAvail ;
  assign avail___1__h11738 =
	     fooWrapper_foo_axiMaster2_rfifoWordsAvail - { 3'd0, x__h11742 } ;
  assign avail___1__h4702 =
	     fooWrapper_foo_axiMaster0_rfifoWordsAvail - { 3'd0, x__h4706 } ;
  assign avail___1__h8220 =
	     fooWrapper_foo_axiMaster1_rfifoWordsAvail - { 3'd0, x__h8224 } ;
  assign avail__h4699 = _theResult____h4691 + 11'd1 ;
  assign fooWrapper_foo_axiMaster0_raddrFifo_ff_i_notEm_ETC___d506 =
	     (fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N ||
	      WILL_FIRE_RL_fooWrapper_handlereadRangerequest) &&
	     { 3'd0, x__h16520 } <=
	     fooWrapper_foo_axiMaster0_rfifoWordsAvail ;
  assign newval__h15773 = { fifo_put_v, requestFifo_buff[33:32] } ;
  assign requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326 =
	     requestFifo_fifo_rRdPtr == requestFifo_fifo_rWrPtr ;
  assign requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 =
	     requestFifo_fifo_rRdPtr + 5'd8 == requestFifo_fifo_rWrPtr ;
  assign result__h15547 =
	     { rf$D_OUT_2[31:17],
	       responseFifo_fifo$FULL_N,
	       rf$D_OUT_2[15:1],
	       interrupted } ;
  assign v___1__h16018 =
	     responseFifo_fifo$EMPTY_N ? x__h16175[31:0] : 32'h050A050A ;
  assign v__h12813 =
	     (fooWrapper_foo_axiMaster0_rfifo_rCache[76] &&
	      fooWrapper_foo_axiMaster0_rfifo_rCache[75:64] ==
	      fooWrapper_foo_axiMaster0_rfifo_rRdPtr) ?
	       fooWrapper_foo_axiMaster0_rfifo_rCache[63:0] :
	       fooWrapper_foo_axiMaster0_rfifo_memory$DOB ;
  assign v__h14045 =
	     (fooWrapper_foo_readFifo_rCache[39] &&
	      fooWrapper_foo_readFifo_rCache[38:32] ==
	      fooWrapper_foo_readFifo_rRdPtr) ?
	       fooWrapper_foo_readFifo_rCache[31:0] :
	       fooWrapper_foo_readFifo_memory$DOB ;
  assign x__h11299 = EN_axi2r_readData ? axi2r_readData_data : 64'd0 ;
  assign x__h11742 = EN_axi2r_readAddr ? x__h17532 : 8'd0 ;
  assign x__h12441 =
	     fooWrapper_foo_axiMaster0_rfifo_pwDequeue$whas ?
	       v__h12813[31:0] :
	       32'd0 ;
  assign x__h12542 = fooWrapper_foo_readFifo_rRdPtr + 7'd1 ;
  assign x__h13830 = responseFifo_count + 32'd1 ;
  assign x__h15508 = x__h15510 | y__h15511 ;
  assign x__h15510 = x__h15512 | y__h15513 ;
  assign x__h15512 =
	     { IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631[31],
	       2'd3,
	       IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631[28],
	       1'd1,
	       IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631[26:23],
	       1'd1,
	       IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631[21:19],
	       3'd7,
	       IF_responseFifo_fifo_i_notFull__34_THEN_0x20_E_ETC___d631[15:0] } ;
  assign x__h15874 = requestFifo_count + 32'd1 ;
  assign x__h16175 = responseFifo_fifo$D_OUT >> x__h16179 ;
  assign x__h16179 = { responseFifo_count[26:0], 5'd0 } ;
  assign x__h16520 =
	     fooWrapper_foo_axiMaster0_raddrFifo_ff$EMPTY_N ?
	       fooWrapper_foo_axiMaster0_raddrFifo_ff$D_OUT[7:0] :
	       fooWrapper_foo_axiMaster0_raddrFifo_enqw$wget[7:0] ;
  assign x__h17026 =
	     fooWrapper_foo_axiMaster1_raddrFifo_ff$EMPTY_N ?
	       fooWrapper_foo_axiMaster1_raddrFifo_ff$D_OUT[7:0] :
	       8'b0 ;
  assign x__h17532 =
	     fooWrapper_foo_axiMaster2_raddrFifo_ff$EMPTY_N ?
	       fooWrapper_foo_axiMaster2_raddrFifo_ff$D_OUT[7:0] :
	       8'b0 ;
  assign x__h2141 = fooWrapper_foo_axiMaster0_wfifo_rRdPtr + 7'd1 ;
  assign x__h2924 =
	     fooWrapper_foo_axiMaster0_bfifo_pwEnqueue$whas ?
	       axi0w_writeResponse_responseCode :
	       2'd0 ;
  assign x__h4263 = EN_axi0r_readData ? axi0r_readData_data : 64'd0 ;
  assign x__h4364 = fooWrapper_foo_axiMaster0_rfifo_rRdPtr + 12'd1 ;
  assign x__h4706 = EN_axi0r_readAddr ? x__h16520 : 8'd0 ;
  assign x__h5659 = fooWrapper_foo_axiMaster1_wfifo_rRdPtr + 7'd1 ;
  assign x__h6442 =
	     fooWrapper_foo_axiMaster1_bfifo_pwEnqueue$whas ?
	       axi1w_writeResponse_responseCode :
	       2'd0 ;
  assign x__h710 =
	     requestFifo_fifo_pwEnqueue$whas ?
	       requestFifo_fifo_wDataIn$wget :
	       34'd0 ;
  assign x__h7781 = EN_axi1r_readData ? axi1r_readData_data : 64'd0 ;
  assign x__h811 = requestFifo_fifo_rRdPtr + 5'd1 ;
  assign x__h8224 = EN_axi1r_readAddr ? x__h17026 : 8'd0 ;
  assign x__h9177 = fooWrapper_foo_axiMaster2_wfifo_rRdPtr + 7'd1 ;
  assign x__h9960 =
	     fooWrapper_foo_axiMaster2_bfifo_pwEnqueue$whas ?
	       axi2w_writeResponse_responseCode :
	       2'd0 ;
  assign y__h15509 =
	     requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d326 ?
	       32'd0 :
	       32'h00000001 ;
  assign y__h15511 =
	     requestFifo_fifo_rRdPtr_1_PLUS_8_21_EQ_request_ETC___d633 ?
	       32'd0 :
	       32'h00000002 ;
  assign y__h15513 = responseFifo_fifo$EMPTY_N ? 32'h00000010 : 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fooWrapper_blockedRequestsDiscardedReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_blockedResponsesDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	fooWrapper_foo_axiMaster0_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	fooWrapper_foo_axiMaster0_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster0_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster0_readIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fooWrapper_foo_axiMaster0_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	    11'd1024;
	fooWrapper_foo_axiMaster0_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    77'h0AAAAAAAAAAAAAAAAAAA;
	fooWrapper_foo_axiMaster0_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fooWrapper_foo_axiMaster0_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fooWrapper_foo_axiMaster0_wAddrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_foo_axiMaster0_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fooWrapper_foo_axiMaster0_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	fooWrapper_foo_axiMaster0_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	fooWrapper_foo_axiMaster0_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster0_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster0_writeIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fooWrapper_foo_axiMaster1_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	fooWrapper_foo_axiMaster1_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster1_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster1_readIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fooWrapper_foo_axiMaster1_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	    11'd1024;
	fooWrapper_foo_axiMaster1_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    77'h0AAAAAAAAAAAAAAAAAAA;
	fooWrapper_foo_axiMaster1_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fooWrapper_foo_axiMaster1_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fooWrapper_foo_axiMaster1_wAddrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_foo_axiMaster1_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fooWrapper_foo_axiMaster1_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	fooWrapper_foo_axiMaster1_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	fooWrapper_foo_axiMaster1_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster1_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster1_writeIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fooWrapper_foo_axiMaster2_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	fooWrapper_foo_axiMaster2_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster2_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster2_readIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fooWrapper_foo_axiMaster2_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	    11'd1024;
	fooWrapper_foo_axiMaster2_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    77'h0AAAAAAAAAAAAAAAAAAA;
	fooWrapper_foo_axiMaster2_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fooWrapper_foo_axiMaster2_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fooWrapper_foo_axiMaster2_wAddrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_foo_axiMaster2_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fooWrapper_foo_axiMaster2_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	fooWrapper_foo_axiMaster2_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	fooWrapper_foo_axiMaster2_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster2_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_axiMaster2_writeIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fooWrapper_foo_readFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    40'h2AAAAAAAAA;
	fooWrapper_foo_readFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_readFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fooWrapper_foo_segmentIndexReg <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fooWrapper_foo_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	fooWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	fooWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	fooWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fooWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	fooWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interruptCleared <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	overflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 34'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 40'h2AAAAAAAAA;
	requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	underflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	word0Put <= `BSV_ASSIGNMENT_DELAY 32'd0;
	word1Put <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (fooWrapper_blockedRequestsDiscardedReg$EN)
	  fooWrapper_blockedRequestsDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_blockedRequestsDiscardedReg$D_IN;
	if (fooWrapper_blockedResponsesDiscardedReg$EN)
	  fooWrapper_blockedResponsesDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_blockedResponsesDiscardedReg$D_IN;
	if (fooWrapper_foo_axiMaster0_bfifo_rCache$EN)
	  fooWrapper_foo_axiMaster0_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_bfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster0_bfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster0_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_bfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster0_bfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster0_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_bfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster0_readIdReg$EN)
	  fooWrapper_foo_axiMaster0_readIdReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_readIdReg$D_IN;
	if (fooWrapper_foo_axiMaster0_rfifoWordsAvail$EN)
	  fooWrapper_foo_axiMaster0_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_rfifoWordsAvail$D_IN;
	if (fooWrapper_foo_axiMaster0_rfifo_rCache$EN)
	  fooWrapper_foo_axiMaster0_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_rfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster0_rfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster0_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_rfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster0_rfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster0_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_rfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster0_wAddrReg$EN)
	  fooWrapper_foo_axiMaster0_wAddrReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_wAddrReg$D_IN;
	if (fooWrapper_foo_axiMaster0_wAddressPresented$EN)
	  fooWrapper_foo_axiMaster0_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_wAddressPresented$D_IN;
	if (fooWrapper_foo_axiMaster0_wBurstCountReg$EN)
	  fooWrapper_foo_axiMaster0_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_wBurstCountReg$D_IN;
	if (fooWrapper_foo_axiMaster0_wfifo_rCache$EN)
	  fooWrapper_foo_axiMaster0_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_wfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster0_wfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster0_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_wfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster0_wfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster0_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_wfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster0_writeIdReg$EN)
	  fooWrapper_foo_axiMaster0_writeIdReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster0_writeIdReg$D_IN;
	if (fooWrapper_foo_axiMaster1_bfifo_rCache$EN)
	  fooWrapper_foo_axiMaster1_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_bfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster1_bfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster1_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_bfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster1_bfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster1_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_bfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster1_readIdReg$EN)
	  fooWrapper_foo_axiMaster1_readIdReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_readIdReg$D_IN;
	if (fooWrapper_foo_axiMaster1_rfifoWordsAvail$EN)
	  fooWrapper_foo_axiMaster1_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_rfifoWordsAvail$D_IN;
	if (fooWrapper_foo_axiMaster1_rfifo_rCache$EN)
	  fooWrapper_foo_axiMaster1_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_rfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster1_rfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster1_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_rfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster1_rfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster1_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_rfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster1_wAddrReg$EN)
	  fooWrapper_foo_axiMaster1_wAddrReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_wAddrReg$D_IN;
	if (fooWrapper_foo_axiMaster1_wAddressPresented$EN)
	  fooWrapper_foo_axiMaster1_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_wAddressPresented$D_IN;
	if (fooWrapper_foo_axiMaster1_wBurstCountReg$EN)
	  fooWrapper_foo_axiMaster1_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_wBurstCountReg$D_IN;
	if (fooWrapper_foo_axiMaster1_wfifo_rCache$EN)
	  fooWrapper_foo_axiMaster1_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_wfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster1_wfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster1_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_wfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster1_wfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster1_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_wfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster1_writeIdReg$EN)
	  fooWrapper_foo_axiMaster1_writeIdReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster1_writeIdReg$D_IN;
	if (fooWrapper_foo_axiMaster2_bfifo_rCache$EN)
	  fooWrapper_foo_axiMaster2_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_bfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster2_bfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster2_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_bfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster2_bfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster2_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_bfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster2_readIdReg$EN)
	  fooWrapper_foo_axiMaster2_readIdReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_readIdReg$D_IN;
	if (fooWrapper_foo_axiMaster2_rfifoWordsAvail$EN)
	  fooWrapper_foo_axiMaster2_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_rfifoWordsAvail$D_IN;
	if (fooWrapper_foo_axiMaster2_rfifo_rCache$EN)
	  fooWrapper_foo_axiMaster2_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_rfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster2_rfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster2_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_rfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster2_rfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster2_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_rfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster2_wAddrReg$EN)
	  fooWrapper_foo_axiMaster2_wAddrReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_wAddrReg$D_IN;
	if (fooWrapper_foo_axiMaster2_wAddressPresented$EN)
	  fooWrapper_foo_axiMaster2_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_wAddressPresented$D_IN;
	if (fooWrapper_foo_axiMaster2_wBurstCountReg$EN)
	  fooWrapper_foo_axiMaster2_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_wBurstCountReg$D_IN;
	if (fooWrapper_foo_axiMaster2_wfifo_rCache$EN)
	  fooWrapper_foo_axiMaster2_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_wfifo_rCache$D_IN;
	if (fooWrapper_foo_axiMaster2_wfifo_rRdPtr$EN)
	  fooWrapper_foo_axiMaster2_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_wfifo_rRdPtr$D_IN;
	if (fooWrapper_foo_axiMaster2_wfifo_rWrPtr$EN)
	  fooWrapper_foo_axiMaster2_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_wfifo_rWrPtr$D_IN;
	if (fooWrapper_foo_axiMaster2_writeIdReg$EN)
	  fooWrapper_foo_axiMaster2_writeIdReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_axiMaster2_writeIdReg$D_IN;
	if (fooWrapper_foo_readFifo_rCache$EN)
	  fooWrapper_foo_readFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_readFifo_rCache$D_IN;
	if (fooWrapper_foo_readFifo_rRdPtr$EN)
	  fooWrapper_foo_readFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_readFifo_rRdPtr$D_IN;
	if (fooWrapper_foo_readFifo_rWrPtr$EN)
	  fooWrapper_foo_readFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_readFifo_rWrPtr$D_IN;
	if (fooWrapper_foo_segmentIndexReg$EN)
	  fooWrapper_foo_segmentIndexReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_segmentIndexReg$D_IN;
	if (fooWrapper_foo_segmentOffsetReg$EN)
	  fooWrapper_foo_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_foo_segmentOffsetReg$D_IN;
	if (fooWrapper_junkReqReg$EN)
	  fooWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_junkReqReg$D_IN;
	if (fooWrapper_requestFired$EN)
	  fooWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_requestFired$D_IN;
	if (fooWrapper_requestTimeLimitReg$EN)
	  fooWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_requestTimeLimitReg$D_IN;
	if (fooWrapper_requestTimerReg$EN)
	  fooWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_requestTimerReg$D_IN;
	if (fooWrapper_responseFired$EN)
	  fooWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_responseFired$D_IN;
	if (fooWrapper_responseTimeLimitReg$EN)
	  fooWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_responseTimeLimitReg$D_IN;
	if (fooWrapper_responseTimerReg$EN)
	  fooWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY
	      fooWrapper_responseTimerReg$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (interruptCleared$EN)
	  interruptCleared <= `BSV_ASSIGNMENT_DELAY interruptCleared$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (overflowCount$EN)
	  overflowCount <= `BSV_ASSIGNMENT_DELAY overflowCount$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (requestFifo_fifo_rCache$EN)
	  requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rCache$D_IN;
	if (requestFifo_fifo_rRdPtr$EN)
	  requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rRdPtr$D_IN;
	if (requestFifo_fifo_rWrPtr$EN)
	  requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rWrPtr$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
	if (underflowCount$EN)
	  underflowCount <= `BSV_ASSIGNMENT_DELAY underflowCount$D_IN;
	if (word0Put$EN) word0Put <= `BSV_ASSIGNMENT_DELAY word0Put$D_IN;
	if (word1Put$EN) word1Put <= `BSV_ASSIGNMENT_DELAY word1Put$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fooWrapper_blockedRequestsDiscardedReg = 32'hAAAAAAAA;
    fooWrapper_blockedResponsesDiscardedReg = 32'hAAAAAAAA;
    fooWrapper_foo_axiMaster0_bfifo_rCache = 10'h2AA;
    fooWrapper_foo_axiMaster0_bfifo_rRdPtr = 7'h2A;
    fooWrapper_foo_axiMaster0_bfifo_rWrPtr = 7'h2A;
    fooWrapper_foo_axiMaster0_readIdReg = 1'h0;
    fooWrapper_foo_axiMaster0_rfifoWordsAvail = 11'h2AA;
    fooWrapper_foo_axiMaster0_rfifo_rCache = 77'h0AAAAAAAAAAAAAAAAAAA;
    fooWrapper_foo_axiMaster0_rfifo_rRdPtr = 12'hAAA;
    fooWrapper_foo_axiMaster0_rfifo_rWrPtr = 12'hAAA;
    fooWrapper_foo_axiMaster0_wAddrReg = 32'hAAAAAAAA;
    fooWrapper_foo_axiMaster0_wAddressPresented = 1'h0;
    fooWrapper_foo_axiMaster0_wBurstCountReg = 8'hAA;
    fooWrapper_foo_axiMaster0_wfifo_rCache = 72'hAAAAAAAAAAAAAAAAAA;
    fooWrapper_foo_axiMaster0_wfifo_rRdPtr = 7'h2A;
    fooWrapper_foo_axiMaster0_wfifo_rWrPtr = 7'h2A;
    fooWrapper_foo_axiMaster0_writeIdReg = 1'h0;
    fooWrapper_foo_axiMaster1_bfifo_rCache = 10'h2AA;
    fooWrapper_foo_axiMaster1_bfifo_rRdPtr = 7'h2A;
    fooWrapper_foo_axiMaster1_bfifo_rWrPtr = 7'h2A;
    fooWrapper_foo_axiMaster1_readIdReg = 1'h0;
    fooWrapper_foo_axiMaster1_rfifoWordsAvail = 11'h2AA;
    fooWrapper_foo_axiMaster1_rfifo_rCache = 77'h0AAAAAAAAAAAAAAAAAAA;
    fooWrapper_foo_axiMaster1_rfifo_rRdPtr = 12'hAAA;
    fooWrapper_foo_axiMaster1_rfifo_rWrPtr = 12'hAAA;
    fooWrapper_foo_axiMaster1_wAddrReg = 32'hAAAAAAAA;
    fooWrapper_foo_axiMaster1_wAddressPresented = 1'h0;
    fooWrapper_foo_axiMaster1_wBurstCountReg = 8'hAA;
    fooWrapper_foo_axiMaster1_wfifo_rCache = 72'hAAAAAAAAAAAAAAAAAA;
    fooWrapper_foo_axiMaster1_wfifo_rRdPtr = 7'h2A;
    fooWrapper_foo_axiMaster1_wfifo_rWrPtr = 7'h2A;
    fooWrapper_foo_axiMaster1_writeIdReg = 1'h0;
    fooWrapper_foo_axiMaster2_bfifo_rCache = 10'h2AA;
    fooWrapper_foo_axiMaster2_bfifo_rRdPtr = 7'h2A;
    fooWrapper_foo_axiMaster2_bfifo_rWrPtr = 7'h2A;
    fooWrapper_foo_axiMaster2_readIdReg = 1'h0;
    fooWrapper_foo_axiMaster2_rfifoWordsAvail = 11'h2AA;
    fooWrapper_foo_axiMaster2_rfifo_rCache = 77'h0AAAAAAAAAAAAAAAAAAA;
    fooWrapper_foo_axiMaster2_rfifo_rRdPtr = 12'hAAA;
    fooWrapper_foo_axiMaster2_rfifo_rWrPtr = 12'hAAA;
    fooWrapper_foo_axiMaster2_wAddrReg = 32'hAAAAAAAA;
    fooWrapper_foo_axiMaster2_wAddressPresented = 1'h0;
    fooWrapper_foo_axiMaster2_wBurstCountReg = 8'hAA;
    fooWrapper_foo_axiMaster2_wfifo_rCache = 72'hAAAAAAAAAAAAAAAAAA;
    fooWrapper_foo_axiMaster2_wfifo_rRdPtr = 7'h2A;
    fooWrapper_foo_axiMaster2_wfifo_rWrPtr = 7'h2A;
    fooWrapper_foo_axiMaster2_writeIdReg = 1'h0;
    fooWrapper_foo_readFifo_rCache = 40'hAAAAAAAAAA;
    fooWrapper_foo_readFifo_rRdPtr = 7'h2A;
    fooWrapper_foo_readFifo_rWrPtr = 7'h2A;
    fooWrapper_foo_segmentIndexReg = 6'h2A;
    fooWrapper_foo_segmentOffsetReg = 24'hAAAAAA;
    fooWrapper_junkReqReg = 32'hAAAAAAAA;
    fooWrapper_requestFired = 32'hAAAAAAAA;
    fooWrapper_requestTimeLimitReg = 16'hAAAA;
    fooWrapper_requestTimerReg = 16'hAAAA;
    fooWrapper_responseFired = 32'hAAAAAAAA;
    fooWrapper_responseTimeLimitReg = 16'hAAAA;
    fooWrapper_responseTimerReg = 16'hAAAA;
    getWordCount = 32'hAAAAAAAA;
    interruptCleared = 1'h0;
    interrupted = 1'h0;
    overflowCount = 32'hAAAAAAAA;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 34'h2AAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    requestFifo_fifo_rCache = 40'hAAAAAAAAAA;
    requestFifo_fifo_rRdPtr = 5'h0A;
    requestFifo_fifo_rWrPtr = 5'h0A;
    responseFifo_count = 32'hAAAAAAAA;
    underflowCount = 32'hAAAAAAAA;
    word0Put = 32'hAAAAAAAA;
    word1Put = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkIpSlaveWithMaster

