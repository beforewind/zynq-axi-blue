//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Fri Dec  7 16:46:55 EST 2012
//
// Method conflict info:
// Method: put
// Conflict-free: error,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
// Sequenced after: get, interrupt
// Conflicts: put
//
// Method: get
// Conflict-free: error,
// 	       interrupt,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache
// Sequenced before: put
// Sequenced before (restricted): axiw_writeAddr,
// 			       axiw_writeData,
// 			       axiw_writeResponse,
// 			       axir_readAddr,
// 			       axir_readData
// Conflicts: get
//
// Method: error
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: interrupt
// Conflict-free: get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
// Sequenced before: put
//
// Method: axiw_writeAddr
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
// Sequenced before: axiw_writeData
// Sequenced after (restricted): get
// Conflicts: axiw_writeAddr
//
// Method: axiw_writeBurstLen
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
// Sequenced before: axiw_writeData
//
// Method: axiw_writeBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axiw_writeBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axiw_writeBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axiw_writeBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axiw_writeData
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
// Sequenced after: axiw_writeAddr, axiw_writeBurstLen, axiw_writeLastDataBeat
// Sequenced after (restricted): get
// Conflicts: axiw_writeData
//
// Method: axiw_writeDataByteEnable
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axiw_writeLastDataBeat
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
// Sequenced before: axiw_writeData
//
// Method: axiw_writeResponse
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache
// Sequenced before (restricted): axir_readAddr, axir_readData
// Sequenced after (restricted): get
// Conflicts: axiw_writeResponse
//
// Method: axir_readAddr
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache
// Sequenced before: axir_readData
// Sequenced after (restricted): get, axiw_writeResponse
// Conflicts: axir_readAddr
//
// Method: axir_readBurstLen
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache
// Sequenced before: axir_readData
//
// Method: axir_readBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axir_readBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axir_readBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axir_readBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axiw_writeResponse,
// 	       axir_readAddr,
// 	       axir_readBurstLen,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache,
// 	       axir_readData
//
// Method: axir_readData
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw_writeAddr,
// 	       axiw_writeBurstLen,
// 	       axiw_writeBurstWidth,
// 	       axiw_writeBurstType,
// 	       axiw_writeBurstProt,
// 	       axiw_writeBurstCache,
// 	       axiw_writeData,
// 	       axiw_writeDataByteEnable,
// 	       axiw_writeLastDataBeat,
// 	       axir_readBurstWidth,
// 	       axir_readBurstType,
// 	       axir_readBurstProt,
// 	       axir_readBurstCache
// Sequenced after: axir_readAddr, axir_readBurstLen
// Sequenced after (restricted): get, axiw_writeResponse
// Conflicts: axir_readData
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1 reg
// get                            O    32
// RDY_get                        O     1 const
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// axiw_writeAddr                 O    32 reg
// RDY_axiw_writeAddr             O     1
// axiw_writeBurstLen             O     8
// RDY_axiw_writeBurstLen         O     1 const
// axiw_writeBurstWidth           O     3
// RDY_axiw_writeBurstWidth       O     1 const
// axiw_writeBurstType            O     2 const
// RDY_axiw_writeBurstType        O     1 const
// axiw_writeBurstProt            O     3 const
// RDY_axiw_writeBurstProt        O     1 const
// axiw_writeBurstCache           O     4 const
// RDY_axiw_writeBurstCache       O     1 const
// axiw_writeData                 O    64 reg
// RDY_axiw_writeData             O     1
// axiw_writeDataByteEnable       O     8 const
// RDY_axiw_writeDataByteEnable   O     1 const
// axiw_writeLastDataBeat         O     1
// RDY_axiw_writeLastDataBeat     O     1 const
// RDY_axiw_writeResponse         O     1 reg
// axir_readAddr                  O    32 reg
// RDY_axir_readAddr              O     1
// axir_readBurstLen              O     8
// RDY_axir_readBurstLen          O     1 const
// axir_readBurstWidth            O     3
// RDY_axir_readBurstWidth        O     1 const
// axir_readBurstType             O     2 const
// RDY_axir_readBurstType         O     1 const
// axir_readBurstProt             O     3 const
// RDY_axir_readBurstProt         O     1 const
// axir_readBurstCache            O     4 const
// RDY_axir_readBurstCache        O     1 const
// RDY_axir_readData              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_addr                       I    12
// put_v                          I    32
// get_addr                       I    12
// axiw_writeResponse_responseCode  I     2
// axir_readData_data             I    64 reg
// axir_readData_resp             I     2
// axir_readData_last             I     1 unused
// EN_put                         I     1
// EN_axiw_writeResponse          I     1
// EN_axir_readData               I     1
// EN_get                         I     1
// EN_axiw_writeAddr              I     1
// EN_axiw_writeData              I     1
// EN_axir_readAddr               I     1
//
// Combinational paths from inputs to outputs:
//   get_addr -> get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIpSlaveWithMaster(CLK,
			   RST_N,

			   put_addr,
			   put_v,
			   EN_put,
			   RDY_put,

			   get_addr,
			   EN_get,
			   get,
			   RDY_get,

			   error,
			   RDY_error,

			   interrupt,
			   RDY_interrupt,

			   EN_axiw_writeAddr,
			   axiw_writeAddr,
			   RDY_axiw_writeAddr,

			   axiw_writeBurstLen,
			   RDY_axiw_writeBurstLen,

			   axiw_writeBurstWidth,
			   RDY_axiw_writeBurstWidth,

			   axiw_writeBurstType,
			   RDY_axiw_writeBurstType,

			   axiw_writeBurstProt,
			   RDY_axiw_writeBurstProt,

			   axiw_writeBurstCache,
			   RDY_axiw_writeBurstCache,

			   EN_axiw_writeData,
			   axiw_writeData,
			   RDY_axiw_writeData,

			   axiw_writeDataByteEnable,
			   RDY_axiw_writeDataByteEnable,

			   axiw_writeLastDataBeat,
			   RDY_axiw_writeLastDataBeat,

			   axiw_writeResponse_responseCode,
			   EN_axiw_writeResponse,
			   RDY_axiw_writeResponse,

			   EN_axir_readAddr,
			   axir_readAddr,
			   RDY_axir_readAddr,

			   axir_readBurstLen,
			   RDY_axir_readBurstLen,

			   axir_readBurstWidth,
			   RDY_axir_readBurstWidth,

			   axir_readBurstType,
			   RDY_axir_readBurstType,

			   axir_readBurstProt,
			   RDY_axir_readBurstProt,

			   axir_readBurstCache,
			   RDY_axir_readBurstCache,

			   axir_readData_data,
			   axir_readData_resp,
			   axir_readData_last,
			   EN_axir_readData,
			   RDY_axir_readData);
  input  CLK;
  input  RST_N;

  // action method put
  input  [11 : 0] put_addr;
  input  [31 : 0] put_v;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  [11 : 0] get_addr;
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // actionvalue method axiw_writeAddr
  input  EN_axiw_writeAddr;
  output [31 : 0] axiw_writeAddr;
  output RDY_axiw_writeAddr;

  // value method axiw_writeBurstLen
  output [7 : 0] axiw_writeBurstLen;
  output RDY_axiw_writeBurstLen;

  // value method axiw_writeBurstWidth
  output [2 : 0] axiw_writeBurstWidth;
  output RDY_axiw_writeBurstWidth;

  // value method axiw_writeBurstType
  output [1 : 0] axiw_writeBurstType;
  output RDY_axiw_writeBurstType;

  // value method axiw_writeBurstProt
  output [2 : 0] axiw_writeBurstProt;
  output RDY_axiw_writeBurstProt;

  // value method axiw_writeBurstCache
  output [3 : 0] axiw_writeBurstCache;
  output RDY_axiw_writeBurstCache;

  // actionvalue method axiw_writeData
  input  EN_axiw_writeData;
  output [63 : 0] axiw_writeData;
  output RDY_axiw_writeData;

  // value method axiw_writeDataByteEnable
  output [7 : 0] axiw_writeDataByteEnable;
  output RDY_axiw_writeDataByteEnable;

  // value method axiw_writeLastDataBeat
  output axiw_writeLastDataBeat;
  output RDY_axiw_writeLastDataBeat;

  // action method axiw_writeResponse
  input  [1 : 0] axiw_writeResponse_responseCode;
  input  EN_axiw_writeResponse;
  output RDY_axiw_writeResponse;

  // actionvalue method axir_readAddr
  input  EN_axir_readAddr;
  output [31 : 0] axir_readAddr;
  output RDY_axir_readAddr;

  // value method axir_readBurstLen
  output [7 : 0] axir_readBurstLen;
  output RDY_axir_readBurstLen;

  // value method axir_readBurstWidth
  output [2 : 0] axir_readBurstWidth;
  output RDY_axir_readBurstWidth;

  // value method axir_readBurstType
  output [1 : 0] axir_readBurstType;
  output RDY_axir_readBurstType;

  // value method axir_readBurstProt
  output [2 : 0] axir_readBurstProt;
  output RDY_axir_readBurstProt;

  // value method axir_readBurstCache
  output [3 : 0] axir_readBurstCache;
  output RDY_axir_readBurstCache;

  // action method axir_readData
  input  [63 : 0] axir_readData_data;
  input  [1 : 0] axir_readData_resp;
  input  axir_readData_last;
  input  EN_axir_readData;
  output RDY_axir_readData;

  // signals for module outputs
  wire [63 : 0] axiw_writeData;
  wire [31 : 0] axir_readAddr, axiw_writeAddr, get;
  wire [7 : 0] axir_readBurstLen,
	       axiw_writeBurstLen,
	       axiw_writeDataByteEnable;
  wire [3 : 0] axir_readBurstCache, axiw_writeBurstCache;
  wire [2 : 0] axir_readBurstProt,
	       axir_readBurstWidth,
	       axiw_writeBurstProt,
	       axiw_writeBurstWidth;
  wire [1 : 0] axir_readBurstType, axiw_writeBurstType;
  wire RDY_axir_readAddr,
       RDY_axir_readBurstCache,
       RDY_axir_readBurstLen,
       RDY_axir_readBurstProt,
       RDY_axir_readBurstType,
       RDY_axir_readBurstWidth,
       RDY_axir_readData,
       RDY_axiw_writeAddr,
       RDY_axiw_writeBurstCache,
       RDY_axiw_writeBurstLen,
       RDY_axiw_writeBurstProt,
       RDY_axiw_writeBurstType,
       RDY_axiw_writeBurstWidth,
       RDY_axiw_writeData,
       RDY_axiw_writeDataByteEnable,
       RDY_axiw_writeLastDataBeat,
       RDY_axiw_writeResponse,
       RDY_error,
       RDY_get,
       RDY_interrupt,
       RDY_put,
       axiw_writeLastDataBeat,
       error,
       interrupt;

  // register dutWrapper_dut_fifoFromAxi_addressPresented
  reg dutWrapper_dut_fifoFromAxi_addressPresented;
  wire dutWrapper_dut_fifoFromAxi_addressPresented$D_IN,
       dutWrapper_dut_fifoFromAxi_addressPresented$EN;

  // register dutWrapper_dut_fifoFromAxi_addrsBeatCount
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_addrsBeatCount;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_addrsBeatCount$D_IN;
  wire dutWrapper_dut_fifoFromAxi_addrsBeatCount$EN;

  // register dutWrapper_dut_fifoFromAxi_baseReg
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_baseReg;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_baseReg$D_IN;
  wire dutWrapper_dut_fifoFromAxi_baseReg$EN;

  // register dutWrapper_dut_fifoFromAxi_boundsReg
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_boundsReg;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_boundsReg$D_IN;
  wire dutWrapper_dut_fifoFromAxi_boundsReg$EN;

  // register dutWrapper_dut_fifoFromAxi_burstCountReg
  reg [7 : 0] dutWrapper_dut_fifoFromAxi_burstCountReg;
  wire [7 : 0] dutWrapper_dut_fifoFromAxi_burstCountReg$D_IN;
  wire dutWrapper_dut_fifoFromAxi_burstCountReg$EN;

  // register dutWrapper_dut_fifoFromAxi_enabledReg
  reg dutWrapper_dut_fifoFromAxi_enabledReg;
  wire dutWrapper_dut_fifoFromAxi_enabledReg$D_IN,
       dutWrapper_dut_fifoFromAxi_enabledReg$EN;

  // register dutWrapper_dut_fifoFromAxi_lastDataBeatCount
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_lastDataBeatCount;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_lastDataBeatCount$D_IN;
  wire dutWrapper_dut_fifoFromAxi_lastDataBeatCount$EN;

  // register dutWrapper_dut_fifoFromAxi_oneBeatAddressReg
  reg dutWrapper_dut_fifoFromAxi_oneBeatAddressReg;
  wire dutWrapper_dut_fifoFromAxi_oneBeatAddressReg$D_IN,
       dutWrapper_dut_fifoFromAxi_oneBeatAddressReg$EN;

  // register dutWrapper_dut_fifoFromAxi_operationInProgress
  reg dutWrapper_dut_fifoFromAxi_operationInProgress;
  wire dutWrapper_dut_fifoFromAxi_operationInProgress$D_IN,
       dutWrapper_dut_fifoFromAxi_operationInProgress$EN;

  // register dutWrapper_dut_fifoFromAxi_ptrReg
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_ptrReg;
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_ptrReg$D_IN;
  wire dutWrapper_dut_fifoFromAxi_ptrReg$EN;

  // register dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg
  reg dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg;
  wire dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg$D_IN,
       dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg$EN;

  // register dutWrapper_dut_fifoFromAxi_thresholdReg
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_thresholdReg;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_thresholdReg$D_IN;
  wire dutWrapper_dut_fifoFromAxi_thresholdReg$EN;

  // register dutWrapper_dut_fifoFromAxi_wordsDeqCount
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_wordsDeqCount;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_wordsDeqCount$D_IN;
  wire dutWrapper_dut_fifoFromAxi_wordsDeqCount$EN;

  // register dutWrapper_dut_fifoFromAxi_wordsReceivedCount
  reg [31 : 0] dutWrapper_dut_fifoFromAxi_wordsReceivedCount;
  wire [31 : 0] dutWrapper_dut_fifoFromAxi_wordsReceivedCount$D_IN;
  wire dutWrapper_dut_fifoFromAxi_wordsReceivedCount$EN;

  // register dutWrapper_dut_fifoToAxi_addressPresented
  reg dutWrapper_dut_fifoToAxi_addressPresented;
  wire dutWrapper_dut_fifoToAxi_addressPresented$D_IN,
       dutWrapper_dut_fifoToAxi_addressPresented$EN;

  // register dutWrapper_dut_fifoToAxi_addrsBeatCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_addrsBeatCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_addrsBeatCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_addrsBeatCount$EN;

  // register dutWrapper_dut_fifoToAxi_baseReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_baseReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_baseReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_baseReg$EN;

  // register dutWrapper_dut_fifoToAxi_boundsReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_boundsReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_boundsReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_boundsReg$EN;

  // register dutWrapper_dut_fifoToAxi_burstCountReg
  reg [7 : 0] dutWrapper_dut_fifoToAxi_burstCountReg;
  wire [7 : 0] dutWrapper_dut_fifoToAxi_burstCountReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_burstCountReg$EN;

  // register dutWrapper_dut_fifoToAxi_enabledReg
  reg dutWrapper_dut_fifoToAxi_enabledReg;
  wire dutWrapper_dut_fifoToAxi_enabledReg$D_IN,
       dutWrapper_dut_fifoToAxi_enabledReg$EN;

  // register dutWrapper_dut_fifoToAxi_lastDataBeatCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_lastDataBeatCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_lastDataBeatCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_lastDataBeatCount$EN;

  // register dutWrapper_dut_fifoToAxi_oneBeatAddressReg
  reg dutWrapper_dut_fifoToAxi_oneBeatAddressReg;
  wire dutWrapper_dut_fifoToAxi_oneBeatAddressReg$D_IN,
       dutWrapper_dut_fifoToAxi_oneBeatAddressReg$EN;

  // register dutWrapper_dut_fifoToAxi_operationInProgress
  reg dutWrapper_dut_fifoToAxi_operationInProgress;
  wire dutWrapper_dut_fifoToAxi_operationInProgress$D_IN,
       dutWrapper_dut_fifoToAxi_operationInProgress$EN;

  // register dutWrapper_dut_fifoToAxi_ptrReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_ptrReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_ptrReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_ptrReg$EN;

  // register dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg
  reg dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg;
  wire dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg$D_IN,
       dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg$EN;

  // register dutWrapper_dut_fifoToAxi_thresholdReg
  reg [31 : 0] dutWrapper_dut_fifoToAxi_thresholdReg;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_thresholdReg$D_IN;
  wire dutWrapper_dut_fifoToAxi_thresholdReg$EN;

  // register dutWrapper_dut_fifoToAxi_wordsEnqCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_wordsEnqCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_wordsEnqCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_wordsEnqCount$EN;

  // register dutWrapper_dut_fifoToAxi_wordsWrittenCount
  reg [31 : 0] dutWrapper_dut_fifoToAxi_wordsWrittenCount;
  wire [31 : 0] dutWrapper_dut_fifoToAxi_wordsWrittenCount$D_IN;
  wire dutWrapper_dut_fifoToAxi_wordsWrittenCount$EN;

  // register dutWrapper_dut_firstReadSent
  reg dutWrapper_dut_firstReadSent;
  wire dutWrapper_dut_firstReadSent$D_IN, dutWrapper_dut_firstReadSent$EN;

  // register dutWrapper_dut_numWordsReg
  reg [31 : 0] dutWrapper_dut_numWordsReg;
  wire [31 : 0] dutWrapper_dut_numWordsReg$D_IN;
  wire dutWrapper_dut_numWordsReg$EN;

  // register dutWrapper_dut_readCompletedSent
  reg dutWrapper_dut_readCompletedSent;
  wire dutWrapper_dut_readCompletedSent$D_IN,
       dutWrapper_dut_readCompletedSent$EN;

  // register dutWrapper_dut_readCountReg
  reg [31 : 0] dutWrapper_dut_readCountReg;
  wire [31 : 0] dutWrapper_dut_readCountReg$D_IN;
  wire dutWrapper_dut_readCountReg$EN;

  // register dutWrapper_dut_readTimer_runningReg
  reg dutWrapper_dut_readTimer_runningReg;
  wire dutWrapper_dut_readTimer_runningReg$D_IN,
       dutWrapper_dut_readTimer_runningReg$EN;

  // register dutWrapper_dut_readTimer_timerReg
  reg [31 : 0] dutWrapper_dut_readTimer_timerReg;
  wire [31 : 0] dutWrapper_dut_readTimer_timerReg$D_IN;
  wire dutWrapper_dut_readTimer_timerReg$EN;

  // register dutWrapper_dut_result2Reg
  reg [32 : 0] dutWrapper_dut_result2Reg;
  wire [32 : 0] dutWrapper_dut_result2Reg$D_IN;
  wire dutWrapper_dut_result2Reg$EN;

  // register dutWrapper_dut_resultReg
  reg [32 : 0] dutWrapper_dut_resultReg;
  wire [32 : 0] dutWrapper_dut_resultReg$D_IN;
  wire dutWrapper_dut_resultReg$EN;

  // register dutWrapper_dut_testCompletedReg
  reg dutWrapper_dut_testCompletedReg;
  wire dutWrapper_dut_testCompletedReg$D_IN,
       dutWrapper_dut_testCompletedReg$EN;

  // register dutWrapper_dut_testReg
  reg dutWrapper_dut_testReg;
  wire dutWrapper_dut_testReg$D_IN, dutWrapper_dut_testReg$EN;

  // register dutWrapper_dut_testResultReg
  reg [31 : 0] dutWrapper_dut_testResultReg;
  wire [31 : 0] dutWrapper_dut_testResultReg$D_IN;
  wire dutWrapper_dut_testResultReg$EN;

  // register dutWrapper_dut_valueReg
  reg [31 : 0] dutWrapper_dut_valueReg;
  wire [31 : 0] dutWrapper_dut_valueReg$D_IN;
  wire dutWrapper_dut_valueReg$EN;

  // register dutWrapper_dut_writeCountReg
  reg [31 : 0] dutWrapper_dut_writeCountReg;
  wire [31 : 0] dutWrapper_dut_writeCountReg$D_IN;
  wire dutWrapper_dut_writeCountReg$EN;

  // register dutWrapper_dut_writeQueuedSent
  reg dutWrapper_dut_writeQueuedSent;
  wire dutWrapper_dut_writeQueuedSent$D_IN, dutWrapper_dut_writeQueuedSent$EN;

  // register dutWrapper_dut_writeTimer_runningReg
  reg dutWrapper_dut_writeTimer_runningReg;
  wire dutWrapper_dut_writeTimer_runningReg$D_IN,
       dutWrapper_dut_writeTimer_runningReg$EN;

  // register dutWrapper_dut_writeTimer_timerReg
  reg [31 : 0] dutWrapper_dut_writeTimer_timerReg;
  wire [31 : 0] dutWrapper_dut_writeTimer_timerReg$D_IN;
  wire dutWrapper_dut_writeTimer_timerReg$EN;

  // register dutWrapper_junkReqReg
  reg [31 : 0] dutWrapper_junkReqReg;
  wire [31 : 0] dutWrapper_junkReqReg$D_IN;
  wire dutWrapper_junkReqReg$EN;

  // register dutWrapper_requestFired
  reg [31 : 0] dutWrapper_requestFired;
  wire [31 : 0] dutWrapper_requestFired$D_IN;
  wire dutWrapper_requestFired$EN;

  // register dutWrapper_requestTimeLimitReg
  reg [15 : 0] dutWrapper_requestTimeLimitReg;
  wire [15 : 0] dutWrapper_requestTimeLimitReg$D_IN;
  wire dutWrapper_requestTimeLimitReg$EN;

  // register dutWrapper_requestTimerReg
  reg [15 : 0] dutWrapper_requestTimerReg;
  wire [15 : 0] dutWrapper_requestTimerReg$D_IN;
  wire dutWrapper_requestTimerReg$EN;

  // register dutWrapper_responseFired
  reg [31 : 0] dutWrapper_responseFired;
  wire [31 : 0] dutWrapper_responseFired$D_IN;
  wire dutWrapper_responseFired$EN;

  // register dutWrapper_responseTimeLimitReg
  reg [15 : 0] dutWrapper_responseTimeLimitReg;
  wire [15 : 0] dutWrapper_responseTimeLimitReg$D_IN;
  wire dutWrapper_responseTimeLimitReg$EN;

  // register dutWrapper_responseTimerReg
  reg [15 : 0] dutWrapper_responseTimerReg;
  wire [15 : 0] dutWrapper_responseTimerReg$D_IN;
  wire dutWrapper_responseTimerReg$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register interruptCleared
  reg interruptCleared;
  wire interruptCleared$D_IN, interruptCleared$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [35 : 0] requestFifo_buff;
  wire [35 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // register underflowCount
  reg [31 : 0] underflowCount;
  wire [31 : 0] underflowCount$D_IN;
  wire underflowCount$EN;

  // ports of submodule dutWrapper_dut_fifoFromAxi_axiRrespFifo
  wire [1 : 0] dutWrapper_dut_fifoFromAxi_axiRrespFifo$D_IN,
	       dutWrapper_dut_fifoFromAxi_axiRrespFifo$D_OUT;
  wire dutWrapper_dut_fifoFromAxi_axiRrespFifo$CLR,
       dutWrapper_dut_fifoFromAxi_axiRrespFifo$DEQ,
       dutWrapper_dut_fifoFromAxi_axiRrespFifo$EMPTY_N,
       dutWrapper_dut_fifoFromAxi_axiRrespFifo$ENQ,
       dutWrapper_dut_fifoFromAxi_axiRrespFifo$FULL_N;

  // ports of submodule dutWrapper_dut_fifoFromAxi_rfifo
  wire [63 : 0] dutWrapper_dut_fifoFromAxi_rfifo$D_IN,
		dutWrapper_dut_fifoFromAxi_rfifo$D_OUT;
  wire dutWrapper_dut_fifoFromAxi_rfifo$CLR,
       dutWrapper_dut_fifoFromAxi_rfifo$DEQ,
       dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N,
       dutWrapper_dut_fifoFromAxi_rfifo$ENQ,
       dutWrapper_dut_fifoFromAxi_rfifo$FULL_N;

  // ports of submodule dutWrapper_dut_fifoStatusFifo
  reg [31 : 0] dutWrapper_dut_fifoStatusFifo$D_IN;
  wire [31 : 0] dutWrapper_dut_fifoStatusFifo$D_OUT;
  wire dutWrapper_dut_fifoStatusFifo$CLR,
       dutWrapper_dut_fifoStatusFifo$DEQ,
       dutWrapper_dut_fifoStatusFifo$EMPTY_N,
       dutWrapper_dut_fifoStatusFifo$ENQ,
       dutWrapper_dut_fifoStatusFifo$FULL_N;

  // ports of submodule dutWrapper_dut_fifoToAxi_axiBrespFifo
  wire [1 : 0] dutWrapper_dut_fifoToAxi_axiBrespFifo$D_IN,
	       dutWrapper_dut_fifoToAxi_axiBrespFifo$D_OUT;
  wire dutWrapper_dut_fifoToAxi_axiBrespFifo$CLR,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$DEQ,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$ENQ,
       dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N;

  // ports of submodule dutWrapper_dut_fifoToAxi_dfifo
  wire [63 : 0] dutWrapper_dut_fifoToAxi_dfifo$D_IN,
		dutWrapper_dut_fifoToAxi_dfifo$D_OUT;
  wire dutWrapper_dut_fifoToAxi_dfifo$CLR,
       dutWrapper_dut_fifoToAxi_dfifo$DEQ,
       dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N,
       dutWrapper_dut_fifoToAxi_dfifo$ENQ,
       dutWrapper_dut_fifoToAxi_dfifo$FULL_N;

  // ports of submodule dutWrapper_dut_fromFifoStatusFifo
  reg [31 : 0] dutWrapper_dut_fromFifoStatusFifo$D_IN;
  wire [31 : 0] dutWrapper_dut_fromFifoStatusFifo$D_OUT;
  wire dutWrapper_dut_fromFifoStatusFifo$CLR,
       dutWrapper_dut_fromFifoStatusFifo$DEQ,
       dutWrapper_dut_fromFifoStatusFifo$EMPTY_N,
       dutWrapper_dut_fromFifoStatusFifo$ENQ,
       dutWrapper_dut_fromFifoStatusFifo$FULL_N;

  // ports of submodule requestFifo_fifo
  wire [35 : 0] requestFifo_fifo$D_IN, requestFifo_fifo$D_OUT;
  wire requestFifo_fifo$CLR,
       requestFifo_fifo$DEQ,
       requestFifo_fifo$EMPTY_N,
       requestFifo_fifo$ENQ,
       requestFifo_fifo$FULL_N;

  // ports of submodule responseFifo_fifo
  reg [35 : 0] responseFifo_fifo$D_IN;
  wire [35 : 0] responseFifo_fifo$D_OUT;
  wire responseFifo_fifo$CLR,
       responseFifo_fifo$DEQ,
       responseFifo_fifo$EMPTY_N,
       responseFifo_fifo$ENQ,
       responseFifo_fifo$FULL_N;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2;
  wire [11 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount,
       CAN_FIRE_RL_dutWrapper_dut_receiveTestData,
       CAN_FIRE_RL_dutWrapper_firstReadresponse,
       CAN_FIRE_RL_dutWrapper_readCompletedresponse,
       CAN_FIRE_RL_dutWrapper_writeCompletedresponse,
       CAN_FIRE_RL_dutWrapper_writeQueuedresponse,
       WILL_FIRE_RL_dutWrapper_axiResponseresponse,
       WILL_FIRE_RL_dutWrapper_axirResponseresponse,
       WILL_FIRE_RL_dutWrapper_discardBlockedRequests,
       WILL_FIRE_RL_dutWrapper_discardBlockedResponses,
       WILL_FIRE_RL_dutWrapper_dut_enableRead,
       WILL_FIRE_RL_dutWrapper_dut_enqTestData,
       WILL_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount,
       WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount,
       WILL_FIRE_RL_dutWrapper_dut_receiveTestData,
       WILL_FIRE_RL_dutWrapper_fifoStatusresponse,
       WILL_FIRE_RL_dutWrapper_firstReadresponse,
       WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse,
       WILL_FIRE_RL_dutWrapper_handleconfigurerequest,
       WILL_FIRE_RL_dutWrapper_handleenqrequest,
       WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest,
       WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest,
       WILL_FIRE_RL_dutWrapper_handlereadRangerequest,
       WILL_FIRE_RL_dutWrapper_handlerunTestrequest,
       WILL_FIRE_RL_dutWrapper_handlesetBaserequest,
       WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest,
       WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest,
       WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest,
       WILL_FIRE_RL_dutWrapper_readCompletedresponse,
       WILL_FIRE_RL_dutWrapper_readValueresponse,
       WILL_FIRE_RL_dutWrapper_responseTimer,
       WILL_FIRE_RL_dutWrapper_testCompletedresponse,
       WILL_FIRE_RL_dutWrapper_writeCompletedresponse,
       WILL_FIRE_RL_dutWrapper_writeQueuedresponse;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_dutWrapper_dut_fifoToAxi_dfifo$enq_1__VAL_1,
		MUX_dutWrapper_dut_fifoToAxi_dfifo$enq_1__VAL_2;
  wire [35 : 0] MUX_responseFifo_fifo$enq_1__VAL_1,
		MUX_responseFifo_fifo$enq_1__VAL_10,
		MUX_responseFifo_fifo$enq_1__VAL_2,
		MUX_responseFifo_fifo$enq_1__VAL_3,
		MUX_responseFifo_fifo$enq_1__VAL_4,
		MUX_responseFifo_fifo$enq_1__VAL_5,
		MUX_responseFifo_fifo$enq_1__VAL_6,
		MUX_responseFifo_fifo$enq_1__VAL_7,
		MUX_responseFifo_fifo$enq_1__VAL_8,
		MUX_responseFifo_fifo$enq_1__VAL_9;
  wire [31 : 0] MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_1,
		MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_2,
		MUX_dutWrapper_dut_fifoFromAxi_ptrReg$write_1__VAL_3,
		MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__VAL_2,
		MUX_dutWrapper_dut_readCountReg$write_1__VAL_1,
		MUX_dutWrapper_dut_readTimer_timerReg$write_1__VAL_2,
		MUX_dutWrapper_dut_writeCountReg$write_1__VAL_1,
		MUX_dutWrapper_dut_writeTimer_timerReg$write_1__VAL_2,
		MUX_responseFifo_count$write_1__VAL_1;
  wire [15 : 0] MUX_dutWrapper_requestTimerReg$write_1__VAL_12,
		MUX_dutWrapper_responseTimerReg$write_1__VAL_1;
  wire [7 : 0] MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__VAL_1,
	       MUX_dutWrapper_dut_fifoToAxi_burstCountReg$write_1__VAL_1;
  wire MUX_dutWrapper_dut_fifoFromAxi_addressPresented$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_2,
       MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoFromAxi_operationInProgress$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoToAxi_addressPresented$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoToAxi_boundsReg$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1,
       MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1,
       MUX_dutWrapper_dut_testCompletedReg$write_1__SEL_1,
       MUX_responseFifo_count$write_1__SEL_1;

  // remaining internal signals
  reg [35 : 0] CASE_requestFifo_fifoD_OUT_BITS_35_TO_32_10_C_ETC__q1;
  reg [31 : 0] IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329;
  wire [63 : 0] dutWrapper_dut_valueReg_2_MUL_7___d33;
  wire [35 : 0] newval__h9998, x__h10373;
  wire [31 : 0] result__h10491,
		v___1__h10201,
		v___1__h10215,
		v___1__h5517,
		v___1__h5523,
		v___1__h6972,
		v___1__h6978,
		x__h10099,
		x__h10377,
		x__h4764,
		y__h3647,
		y__h8112;
  wire [7 : 0] spliced_bits__h5874, spliced_bits__h7329;
  wire [3 : 0] spliced_bits__h5531,
	       spliced_bits__h5564,
	       spliced_bits__h5687,
	       spliced_bits__h5720,
	       spliced_bits__h6986,
	       spliced_bits__h7019,
	       spliced_bits__h7142,
	       spliced_bits__h7175;
  wire NOT_dutWrapper_dut_readCountReg_4_ULT_dutWrapp_ETC___d55,
       get_addr_ULT_0x100___d389,
       put_addr_ULT_0x100___d283;

  // action method put
  assign RDY_put = requestFifo_fifo$FULL_N ;

  // actionvalue method get
  assign get =
	     get_addr_ULT_0x100___d389 ?
	       IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 :
	       v___1__h10201 ;
  assign RDY_get = 1'd1 ;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = rf$D_OUT_1[0] && !interruptCleared && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // actionvalue method axiw_writeAddr
  assign axiw_writeAddr = dutWrapper_dut_fifoToAxi_ptrReg ;
  assign RDY_axiw_writeAddr =
	     dutWrapper_dut_fifoToAxi_operationInProgress &&
	     !dutWrapper_dut_fifoToAxi_addressPresented ;

  // value method axiw_writeBurstLen
  assign axiw_writeBurstLen = dutWrapper_dut_fifoToAxi_burstCountReg - 8'd1 ;
  assign RDY_axiw_writeBurstLen = 1'd1 ;

  // value method axiw_writeBurstWidth
  assign axiw_writeBurstWidth =
	     dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg ?
	       3'b010 :
	       3'b011 ;
  assign RDY_axiw_writeBurstWidth = 1'd1 ;

  // value method axiw_writeBurstType
  assign axiw_writeBurstType = 2'b01 ;
  assign RDY_axiw_writeBurstType = 1'd1 ;

  // value method axiw_writeBurstProt
  assign axiw_writeBurstProt = 3'b0 ;
  assign RDY_axiw_writeBurstProt = 1'd1 ;

  // value method axiw_writeBurstCache
  assign axiw_writeBurstCache = 4'b0011 ;
  assign RDY_axiw_writeBurstCache = 1'd1 ;

  // actionvalue method axiw_writeData
  assign axiw_writeData = dutWrapper_dut_fifoToAxi_dfifo$D_OUT ;
  assign RDY_axiw_writeData =
	     dutWrapper_dut_fifoToAxi_operationInProgress &&
	     dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N ;

  // value method axiw_writeDataByteEnable
  assign axiw_writeDataByteEnable = 8'd255 ;
  assign RDY_axiw_writeDataByteEnable = 1'd1 ;

  // value method axiw_writeLastDataBeat
  assign axiw_writeLastDataBeat =
	     dutWrapper_dut_fifoToAxi_burstCountReg == 8'd1 ;
  assign RDY_axiw_writeLastDataBeat = 1'd1 ;

  // action method axiw_writeResponse
  assign RDY_axiw_writeResponse =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N ;

  // actionvalue method axir_readAddr
  assign axir_readAddr = dutWrapper_dut_fifoFromAxi_ptrReg ;
  assign RDY_axir_readAddr =
	     dutWrapper_dut_fifoFromAxi_operationInProgress &&
	     !dutWrapper_dut_fifoFromAxi_addressPresented ;

  // value method axir_readBurstLen
  assign axir_readBurstLen = dutWrapper_dut_fifoFromAxi_burstCountReg - 8'd1 ;
  assign RDY_axir_readBurstLen = 1'd1 ;

  // value method axir_readBurstWidth
  assign axir_readBurstWidth =
	     dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg ?
	       3'b010 :
	       3'b011 ;
  assign RDY_axir_readBurstWidth = 1'd1 ;

  // value method axir_readBurstType
  assign axir_readBurstType = 2'b01 ;
  assign RDY_axir_readBurstType = 1'd1 ;

  // value method axir_readBurstProt
  assign axir_readBurstProt = 3'b0 ;
  assign RDY_axir_readBurstProt = 1'd1 ;

  // value method axir_readBurstCache
  assign axir_readBurstCache = 4'b0011 ;
  assign RDY_axir_readBurstCache = 1'd1 ;

  // action method axir_readData
  assign RDY_axir_readData =
	     dutWrapper_dut_fifoFromAxi_rfifo$FULL_N &&
	     dutWrapper_dut_fifoFromAxi_operationInProgress &&
	     dutWrapper_dut_fifoFromAxi_axiRrespFifo$FULL_N ;

  // submodule dutWrapper_dut_fifoFromAxi_axiRrespFifo
  SizedFIFO #( /*p1width*/ 32'd2,
	       /*p2depth*/ 32'd32,
	       /*p3cntr_width*/ 32'd5,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoFromAxi_axiRrespFifo(.RST(RST_N),
									  .CLK(CLK),
									  .D_IN(dutWrapper_dut_fifoFromAxi_axiRrespFifo$D_IN),
									  .ENQ(dutWrapper_dut_fifoFromAxi_axiRrespFifo$ENQ),
									  .DEQ(dutWrapper_dut_fifoFromAxi_axiRrespFifo$DEQ),
									  .CLR(dutWrapper_dut_fifoFromAxi_axiRrespFifo$CLR),
									  .D_OUT(dutWrapper_dut_fifoFromAxi_axiRrespFifo$D_OUT),
									  .FULL_N(dutWrapper_dut_fifoFromAxi_axiRrespFifo$FULL_N),
									  .EMPTY_N(dutWrapper_dut_fifoFromAxi_axiRrespFifo$EMPTY_N));

  // submodule dutWrapper_dut_fifoFromAxi_rfifo
  SizedFIFO #( /*p1width*/ 32'd64,
	       /*p2depth*/ 32'd32,
	       /*p3cntr_width*/ 32'd5,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoFromAxi_rfifo(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(dutWrapper_dut_fifoFromAxi_rfifo$D_IN),
								   .ENQ(dutWrapper_dut_fifoFromAxi_rfifo$ENQ),
								   .DEQ(dutWrapper_dut_fifoFromAxi_rfifo$DEQ),
								   .CLR(dutWrapper_dut_fifoFromAxi_rfifo$CLR),
								   .D_OUT(dutWrapper_dut_fifoFromAxi_rfifo$D_OUT),
								   .FULL_N(dutWrapper_dut_fifoFromAxi_rfifo$FULL_N),
								   .EMPTY_N(dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N));

  // submodule dutWrapper_dut_fifoStatusFifo
  SizedFIFO #( /*p1width*/ 32'd32,
	       /*p2depth*/ 32'd16,
	       /*p3cntr_width*/ 32'd4,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoStatusFifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(dutWrapper_dut_fifoStatusFifo$D_IN),
								.ENQ(dutWrapper_dut_fifoStatusFifo$ENQ),
								.DEQ(dutWrapper_dut_fifoStatusFifo$DEQ),
								.CLR(dutWrapper_dut_fifoStatusFifo$CLR),
								.D_OUT(dutWrapper_dut_fifoStatusFifo$D_OUT),
								.FULL_N(dutWrapper_dut_fifoStatusFifo$FULL_N),
								.EMPTY_N(dutWrapper_dut_fifoStatusFifo$EMPTY_N));

  // submodule dutWrapper_dut_fifoToAxi_axiBrespFifo
  SizedFIFO #( /*p1width*/ 32'd2,
	       /*p2depth*/ 32'd32,
	       /*p3cntr_width*/ 32'd5,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoToAxi_axiBrespFifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(dutWrapper_dut_fifoToAxi_axiBrespFifo$D_IN),
									.ENQ(dutWrapper_dut_fifoToAxi_axiBrespFifo$ENQ),
									.DEQ(dutWrapper_dut_fifoToAxi_axiBrespFifo$DEQ),
									.CLR(dutWrapper_dut_fifoToAxi_axiBrespFifo$CLR),
									.D_OUT(dutWrapper_dut_fifoToAxi_axiBrespFifo$D_OUT),
									.FULL_N(dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N),
									.EMPTY_N(dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N));

  // submodule dutWrapper_dut_fifoToAxi_dfifo
  SizedFIFO #( /*p1width*/ 32'd64,
	       /*p2depth*/ 32'd8,
	       /*p3cntr_width*/ 32'd3,
	       /*guarded*/ 32'd1) dutWrapper_dut_fifoToAxi_dfifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(dutWrapper_dut_fifoToAxi_dfifo$D_IN),
								 .ENQ(dutWrapper_dut_fifoToAxi_dfifo$ENQ),
								 .DEQ(dutWrapper_dut_fifoToAxi_dfifo$DEQ),
								 .CLR(dutWrapper_dut_fifoToAxi_dfifo$CLR),
								 .D_OUT(dutWrapper_dut_fifoToAxi_dfifo$D_OUT),
								 .FULL_N(dutWrapper_dut_fifoToAxi_dfifo$FULL_N),
								 .EMPTY_N(dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N));

  // submodule dutWrapper_dut_fromFifoStatusFifo
  SizedFIFO #( /*p1width*/ 32'd32,
	       /*p2depth*/ 32'd16,
	       /*p3cntr_width*/ 32'd4,
	       /*guarded*/ 32'd1) dutWrapper_dut_fromFifoStatusFifo(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(dutWrapper_dut_fromFifoStatusFifo$D_IN),
								    .ENQ(dutWrapper_dut_fromFifoStatusFifo$ENQ),
								    .DEQ(dutWrapper_dut_fromFifoStatusFifo$DEQ),
								    .CLR(dutWrapper_dut_fromFifoStatusFifo$CLR),
								    .D_OUT(dutWrapper_dut_fromFifoStatusFifo$D_OUT),
								    .FULL_N(dutWrapper_dut_fromFifoStatusFifo$FULL_N),
								    .EMPTY_N(dutWrapper_dut_fromFifoStatusFifo$EMPTY_N));

  // submodule requestFifo_fifo
  FIFO2 #( /*width*/ 32'd36,  /*guarded*/ 32'd0) requestFifo_fifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(requestFifo_fifo$D_IN),
								  .ENQ(requestFifo_fifo$ENQ),
								  .DEQ(requestFifo_fifo$DEQ),
								  .CLR(requestFifo_fifo$CLR),
								  .D_OUT(requestFifo_fifo$D_OUT),
								  .FULL_N(requestFifo_fifo$FULL_N),
								  .EMPTY_N(requestFifo_fifo$EMPTY_N));

  // submodule responseFifo_fifo
  SizedFIFO #( /*p1width*/ 32'd36,
	       /*p2depth*/ 32'd32,
	       /*p3cntr_width*/ 32'd5,
	       /*guarded*/ 32'd0) responseFifo_fifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(responseFifo_fifo$D_IN),
						    .ENQ(responseFifo_fifo$ENQ),
						    .DEQ(responseFifo_fifo$DEQ),
						    .CLR(responseFifo_fifo$CLR),
						    .D_OUT(responseFifo_fifo$D_OUT),
						    .FULL_N(responseFifo_fifo$FULL_N),
						    .EMPTY_N(responseFifo_fifo$EMPTY_N));

  // submodule rf
  RegFile #( /*addr_width*/ 32'd12,
	     /*data_width*/ 32'd32,
	     /*lo*/ 12'd0,
	     /*hi*/ 12'hFFF) rf(.CLK(CLK),
				.ADDR_1(rf$ADDR_1),
				.ADDR_2(rf$ADDR_2),
				.ADDR_3(rf$ADDR_3),
				.ADDR_4(rf$ADDR_4),
				.ADDR_5(rf$ADDR_5),
				.ADDR_IN(rf$ADDR_IN),
				.D_IN(rf$D_IN),
				.WE(rf$WE),
				.D_OUT_1(rf$D_OUT_1),
				.D_OUT_2(rf$D_OUT_2),
				.D_OUT_3(),
				.D_OUT_4(),
				.D_OUT_5());

  // rule RL_dutWrapper_fifoStatusresponse
  assign WILL_FIRE_RL_dutWrapper_fifoStatusresponse =
	     responseFifo_fifo$FULL_N &&
	     dutWrapper_dut_fifoStatusFifo$EMPTY_N ;

  // rule RL_dutWrapper_fromFifoStatusresponse
  assign WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse =
	     responseFifo_fifo$FULL_N &&
	     dutWrapper_dut_fromFifoStatusFifo$EMPTY_N &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_writeQueuedresponse
  assign CAN_FIRE_RL_dutWrapper_writeQueuedresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     !dutWrapper_dut_writeQueuedSent &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_writeQueuedresponse =
	     CAN_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_writeCompletedresponse
  assign CAN_FIRE_RL_dutWrapper_writeCompletedresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     dutWrapper_dut_writeTimer_runningReg &&
	     !dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_writeCompletedresponse =
	     CAN_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_firstReadresponse
  assign CAN_FIRE_RL_dutWrapper_firstReadresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N &&
	     !dutWrapper_dut_firstReadSent &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_firstReadresponse =
	     CAN_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_readCompletedresponse
  assign CAN_FIRE_RL_dutWrapper_readCompletedresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_readCountReg == dutWrapper_dut_numWordsReg &&
	     !dutWrapper_dut_readCompletedSent &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_readCompletedresponse =
	     CAN_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_handlesetBaserequest
  assign WILL_FIRE_RL_dutWrapper_handlesetBaserequest =
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd0 ;

  // rule RL_dutWrapper_handlesetBoundsrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest =
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd1 ;

  // rule RL_dutWrapper_handlesetThresholdrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest =
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd2 ;

  // rule RL_dutWrapper_handlereadFifoStatusrequest
  assign WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest =
	     requestFifo_fifo$EMPTY_N &&
	     dutWrapper_dut_fifoStatusFifo$FULL_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd5 ;

  // rule RL_dutWrapper_handleenqrequest
  assign WILL_FIRE_RL_dutWrapper_handleenqrequest =
	     dutWrapper_dut_fifoToAxi_dfifo$FULL_N &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd4 ;

  // rule RL_dutWrapper_axiResponseresponse
  assign WILL_FIRE_RL_dutWrapper_axiResponseresponse =
	     responseFifo_fifo$FULL_N &&
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse &&
	     !EN_axiw_writeResponse ;

  // rule RL_dutWrapper_handlereadRangerequest
  assign WILL_FIRE_RL_dutWrapper_handlereadRangerequest =
	     !dutWrapper_dut_fifoFromAxi_operationInProgress &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd7 ;

  // rule RL_dutWrapper_handlereadFromFifoStatusrequest
  assign WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest =
	     requestFifo_fifo$EMPTY_N &&
	     dutWrapper_dut_fromFifoStatusFifo$FULL_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd8 ;

  // rule RL_dutWrapper_handleconfigurerequest
  assign WILL_FIRE_RL_dutWrapper_handleconfigurerequest =
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd6 ;

  // rule RL_dutWrapper_axirResponseresponse
  assign WILL_FIRE_RL_dutWrapper_axirResponseresponse =
	     responseFifo_fifo$FULL_N &&
	     dutWrapper_dut_fifoFromAxi_axiRrespFifo$EMPTY_N &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_readValueresponse
  assign WILL_FIRE_RL_dutWrapper_readValueresponse =
	     !dutWrapper_dut_testReg &&
	     dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N &&
	     responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_discardBlockedRequests
  assign WILL_FIRE_RL_dutWrapper_discardBlockedRequests =
	     requestFifo_fifo$EMPTY_N &&
	     dutWrapper_requestTimerReg > dutWrapper_requestTimeLimitReg &&
	     !requestFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     !WILL_FIRE_RL_dutWrapper_handleconfigurerequest &&
	     !WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest &&
	     !WILL_FIRE_RL_dutWrapper_handleenqrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // rule RL_dutWrapper_responseTimer
  assign WILL_FIRE_RL_dutWrapper_responseTimer =
	     !responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_discardBlockedResponses ;

  // rule RL_dutWrapper_discardBlockedResponses
  assign WILL_FIRE_RL_dutWrapper_discardBlockedResponses =
	     dutWrapper_responseTimerReg > dutWrapper_responseTimeLimitReg &&
	     !responseFifo_fifo$FULL_N &&
	     !EN_get ;

  // rule RL_dutWrapper_dut_enqTestData
  assign WILL_FIRE_RL_dutWrapper_dut_enqTestData =
	     dutWrapper_dut_fifoToAxi_dfifo$FULL_N &&
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg < dutWrapper_dut_numWordsReg &&
	     !WILL_FIRE_RL_dutWrapper_handleenqrequest ;

  // rule RL_dutWrapper_dut_enableRead
  assign WILL_FIRE_RL_dutWrapper_dut_enableRead =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg &&
	     !WILL_FIRE_RL_dutWrapper_handlereadRangerequest ;

  // rule RL_dutWrapper_testCompletedresponse
  assign WILL_FIRE_RL_dutWrapper_testCompletedresponse =
	     responseFifo_fifo$FULL_N && dutWrapper_dut_testCompletedReg &&
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !WILL_FIRE_RL_dutWrapper_readValueresponse &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axirResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // rule RL_dutWrapper_dut_receiveTestData
  assign CAN_FIRE_RL_dutWrapper_dut_receiveTestData =
	     dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N &&
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     dutWrapper_dut_readCountReg < dutWrapper_dut_numWordsReg ;
  assign WILL_FIRE_RL_dutWrapper_dut_receiveTestData =
	     CAN_FIRE_RL_dutWrapper_dut_receiveTestData &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse &&
	     !EN_axir_readData ;

  // rule RL_dutWrapper_dut_fifoToAxi_updateBurstCount
  assign WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount =
	     !dutWrapper_dut_fifoToAxi_dfifo$FULL_N &&
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     dutWrapper_dut_fifoToAxi_enabledReg &&
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // rule RL_dutWrapper_handlesetEnabledrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest =
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd3 ;

  // rule RL_dutWrapper_dut_fifoFromAxi_updateBurstCount
  assign CAN_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount =
	     !dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N &&
	     !dutWrapper_dut_fifoFromAxi_operationInProgress &&
	     dutWrapper_dut_fifoFromAxi_enabledReg &&
	     dutWrapper_dut_fifoFromAxi_ptrReg <
	     dutWrapper_dut_fifoFromAxi_boundsReg ;
  assign WILL_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount =
	     CAN_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount &&
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlereadRangerequest ;

  // rule RL_dutWrapper_handlerunTestrequest
  assign WILL_FIRE_RL_dutWrapper_handlerunTestrequest =
	     !dutWrapper_dut_fifoToAxi_operationInProgress &&
	     !dutWrapper_dut_fifoFromAxi_operationInProgress &&
	     !dutWrapper_dut_testReg &&
	     requestFifo_fifo$EMPTY_N &&
	     requestFifo_fifo$D_OUT[35:32] == 4'd9 ;

  // inputs to muxes for submodule ports
  assign MUX_dutWrapper_dut_fifoFromAxi_addressPresented$write_1__SEL_1 =
	     EN_axir_readAddr &&
	     dutWrapper_dut_fifoFromAxi_oneBeatAddressReg ;
  assign MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ;
  assign MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_2 =
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ;
  assign MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1 =
	     EN_axir_readData && axir_readData_resp == 2'b0 ;
  assign MUX_dutWrapper_dut_fifoFromAxi_operationInProgress$write_1__SEL_1 =
	     EN_axir_readData &&
	     (axir_readData_resp != 2'b0 ||
	      dutWrapper_dut_fifoFromAxi_burstCountReg == 8'd1) ;
  assign MUX_dutWrapper_dut_fifoToAxi_addressPresented$write_1__SEL_1 =
	     EN_axiw_writeAddr && dutWrapper_dut_fifoToAxi_oneBeatAddressReg ;
  assign MUX_dutWrapper_dut_fifoToAxi_boundsReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ;
  assign MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1 =
	     EN_axiw_writeData &&
	     dutWrapper_dut_fifoToAxi_burstCountReg == 8'd1 ;
  assign MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ;
  assign MUX_dutWrapper_dut_testCompletedReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData &&
	     NOT_dutWrapper_dut_readCountReg_4_ULT_dutWrapp_ETC___d55 ;
  assign MUX_responseFifo_count$write_1__SEL_1 =
	     EN_get && !get_addr_ULT_0x100___d389 &&
	     responseFifo_fifo$EMPTY_N ;
  assign MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_1 =
	     requestFifo_fifo$D_OUT[31:0] + 32'd64 ;
  assign MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_2 =
	     dutWrapper_dut_fifoToAxi_baseReg + y__h8112 ;
  assign MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__VAL_1 =
	     dutWrapper_dut_fifoFromAxi_burstCountReg - 8'd1 ;
  assign MUX_dutWrapper_dut_fifoFromAxi_ptrReg$write_1__VAL_3 =
	     dutWrapper_dut_fifoFromAxi_ptrReg + 32'd8 ;
  assign MUX_dutWrapper_dut_fifoToAxi_burstCountReg$write_1__VAL_1 =
	     dutWrapper_dut_fifoToAxi_burstCountReg - 8'd1 ;
  assign MUX_dutWrapper_dut_fifoToAxi_dfifo$enq_1__VAL_1 =
	     { 32'd0, dutWrapper_dut_valueReg_2_MUL_7___d33[31:0] } ;
  assign MUX_dutWrapper_dut_fifoToAxi_dfifo$enq_1__VAL_2 =
	     { 32'd0, requestFifo_fifo$D_OUT[31:0] } ;
  assign MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__VAL_2 =
	     dutWrapper_dut_fifoToAxi_ptrReg + 32'd8 ;
  assign MUX_dutWrapper_dut_readCountReg$write_1__VAL_1 =
	     dutWrapper_dut_readCountReg + 32'd1 ;
  assign MUX_dutWrapper_dut_readTimer_timerReg$write_1__VAL_2 =
	     dutWrapper_dut_readTimer_timerReg + 32'd1 ;
  assign MUX_dutWrapper_dut_writeCountReg$write_1__VAL_1 =
	     dutWrapper_dut_writeCountReg + 32'd1 ;
  assign MUX_dutWrapper_dut_writeTimer_timerReg$write_1__VAL_2 =
	     dutWrapper_dut_writeTimer_timerReg + 32'd1 ;
  assign MUX_dutWrapper_requestTimerReg$write_1__VAL_12 =
	     dutWrapper_requestTimerReg + 16'd1 ;
  assign MUX_dutWrapper_responseTimerReg$write_1__VAL_1 =
	     dutWrapper_responseTimerReg + 16'd1 ;
  assign MUX_responseFifo_count$write_1__VAL_1 =
	     (responseFifo_count == 32'd1) ? 32'd0 : x__h4764 ;
  assign MUX_responseFifo_fifo$enq_1__VAL_1 =
	     { 4'd0, dutWrapper_dut_fifoStatusFifo$D_OUT } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_2 =
	     { 4'd2, dutWrapper_dut_fromFifoStatusFifo$D_OUT } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_3 =
	     { 4'd4, dutWrapper_dut_fifoFromAxi_rfifo$D_OUT[31:0] } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_4 =
	     { 4'd5, dutWrapper_dut_testResultReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_5 =
	     { 4'd6, dutWrapper_dut_writeTimer_timerReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_6 =
	     { 4'd7,
	       !dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N,
	       dutWrapper_dut_writeTimer_timerReg[30:0] } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_7 =
	     { 4'd8,
	       dutWrapper_dut_readCountReg[7:0],
	       dutWrapper_dut_readTimer_runningReg,
	       dutWrapper_dut_fifoFromAxi_enabledReg,
	       dutWrapper_dut_readTimer_timerReg[21:0] } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_8 =
	     { 4'd9, dutWrapper_dut_readTimer_timerReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_9 =
	     { 34'd1073741824, dutWrapper_dut_fifoToAxi_axiBrespFifo$D_OUT } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_10 =
	     { 34'h0C0000000,
	       dutWrapper_dut_fifoFromAxi_axiRrespFifo$D_OUT } ;

  // register dutWrapper_dut_fifoFromAxi_addressPresented
  assign dutWrapper_dut_fifoFromAxi_addressPresented$D_IN =
	     MUX_dutWrapper_dut_fifoFromAxi_addressPresented$write_1__SEL_1 ;
  assign dutWrapper_dut_fifoFromAxi_addressPresented$EN =
	     EN_axir_readAddr &&
	     dutWrapper_dut_fifoFromAxi_oneBeatAddressReg ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoFromAxi_addrsBeatCount
  assign dutWrapper_dut_fifoFromAxi_addrsBeatCount$D_IN =
	     dutWrapper_dut_fifoFromAxi_addrsBeatCount + 32'd1 ;
  assign dutWrapper_dut_fifoFromAxi_addrsBeatCount$EN = EN_axir_readAddr ;

  // register dutWrapper_dut_fifoFromAxi_baseReg
  assign dutWrapper_dut_fifoFromAxi_baseReg$D_IN =
	     MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_1 ?
	       dutWrapper_dut_fifoToAxi_baseReg :
	       requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoFromAxi_baseReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ;

  // register dutWrapper_dut_fifoFromAxi_boundsReg
  assign dutWrapper_dut_fifoFromAxi_boundsReg$D_IN =
	     MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_2 ?
	       MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_1 :
	       MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_2 ;
  assign dutWrapper_dut_fifoFromAxi_boundsReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ;

  // register dutWrapper_dut_fifoFromAxi_burstCountReg
  assign dutWrapper_dut_fifoFromAxi_burstCountReg$D_IN =
	     MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__VAL_1 :
	       8'd8 ;
  assign dutWrapper_dut_fifoFromAxi_burstCountReg$EN =
	     EN_axir_readData && axir_readData_resp == 2'b0 ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoFromAxi_enabledReg
  assign dutWrapper_dut_fifoFromAxi_enabledReg$D_IN =
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;
  assign dutWrapper_dut_fifoFromAxi_enabledReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_dut_enableRead ;

  // register dutWrapper_dut_fifoFromAxi_lastDataBeatCount
  assign dutWrapper_dut_fifoFromAxi_lastDataBeatCount$D_IN =
	     dutWrapper_dut_fifoFromAxi_lastDataBeatCount + 32'd1 ;
  assign dutWrapper_dut_fifoFromAxi_lastDataBeatCount$EN =
	     EN_axir_readData &&
	     dutWrapper_dut_fifoFromAxi_burstCountReg == 8'd2 ;

  // register dutWrapper_dut_fifoFromAxi_oneBeatAddressReg
  assign dutWrapper_dut_fifoFromAxi_oneBeatAddressReg$D_IN =
	     requestFifo_fifo$D_OUT[1] ;
  assign dutWrapper_dut_fifoFromAxi_oneBeatAddressReg$EN =
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ;

  // register dutWrapper_dut_fifoFromAxi_operationInProgress
  assign dutWrapper_dut_fifoFromAxi_operationInProgress$D_IN =
	     !MUX_dutWrapper_dut_fifoFromAxi_operationInProgress$write_1__SEL_1 ;
  assign dutWrapper_dut_fifoFromAxi_operationInProgress$EN =
	     EN_axir_readData &&
	     (axir_readData_resp != 2'b0 ||
	      dutWrapper_dut_fifoFromAxi_burstCountReg == 8'd1) ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoFromAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoFromAxi_ptrReg
  always@(MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_1 or
	  dutWrapper_dut_fifoToAxi_baseReg or
	  MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_2 or
	  requestFifo_fifo$D_OUT or
	  MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1 or
	  MUX_dutWrapper_dut_fifoFromAxi_ptrReg$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_1:
	  dutWrapper_dut_fifoFromAxi_ptrReg$D_IN =
	      dutWrapper_dut_fifoToAxi_baseReg;
      MUX_dutWrapper_dut_fifoFromAxi_baseReg$write_1__SEL_2:
	  dutWrapper_dut_fifoFromAxi_ptrReg$D_IN =
	      requestFifo_fifo$D_OUT[31:0];
      MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1:
	  dutWrapper_dut_fifoFromAxi_ptrReg$D_IN =
	      MUX_dutWrapper_dut_fifoFromAxi_ptrReg$write_1__VAL_3;
      default: dutWrapper_dut_fifoFromAxi_ptrReg$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dutWrapper_dut_fifoFromAxi_ptrReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     !dutWrapper_dut_fifoFromAxi_enabledReg ||
	     EN_axir_readData && axir_readData_resp == 2'b0 ;

  // register dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg
  assign dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg$D_IN =
	     requestFifo_fifo$D_OUT[3] ;
  assign dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg$EN =
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ;

  // register dutWrapper_dut_fifoFromAxi_thresholdReg
  assign dutWrapper_dut_fifoFromAxi_thresholdReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoFromAxi_thresholdReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ;

  // register dutWrapper_dut_fifoFromAxi_wordsDeqCount
  assign dutWrapper_dut_fifoFromAxi_wordsDeqCount$D_IN =
	     dutWrapper_dut_fifoFromAxi_wordsDeqCount + 32'd1 ;
  assign dutWrapper_dut_fifoFromAxi_wordsDeqCount$EN =
	     WILL_FIRE_RL_dutWrapper_readValueresponse ||
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData ;

  // register dutWrapper_dut_fifoFromAxi_wordsReceivedCount
  assign dutWrapper_dut_fifoFromAxi_wordsReceivedCount$D_IN =
	     dutWrapper_dut_fifoFromAxi_wordsReceivedCount + 32'd1 ;
  assign dutWrapper_dut_fifoFromAxi_wordsReceivedCount$EN =
	     MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1 ;

  // register dutWrapper_dut_fifoToAxi_addressPresented
  assign dutWrapper_dut_fifoToAxi_addressPresented$D_IN =
	     MUX_dutWrapper_dut_fifoToAxi_addressPresented$write_1__SEL_1 ;
  assign dutWrapper_dut_fifoToAxi_addressPresented$EN =
	     EN_axiw_writeAddr &&
	     dutWrapper_dut_fifoToAxi_oneBeatAddressReg ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoToAxi_addrsBeatCount
  assign dutWrapper_dut_fifoToAxi_addrsBeatCount$D_IN =
	     dutWrapper_dut_fifoToAxi_addrsBeatCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_addrsBeatCount$EN = EN_axiw_writeAddr ;

  // register dutWrapper_dut_fifoToAxi_baseReg
  assign dutWrapper_dut_fifoToAxi_baseReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_baseReg$EN =
	     MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1 ;

  // register dutWrapper_dut_fifoToAxi_boundsReg
  assign dutWrapper_dut_fifoToAxi_boundsReg$D_IN =
	     MUX_dutWrapper_dut_fifoToAxi_boundsReg$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_fifoFromAxi_boundsReg$write_1__VAL_2 :
	       requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_boundsReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ;

  // register dutWrapper_dut_fifoToAxi_burstCountReg
  assign dutWrapper_dut_fifoToAxi_burstCountReg$D_IN =
	     EN_axiw_writeData ?
	       MUX_dutWrapper_dut_fifoToAxi_burstCountReg$write_1__VAL_1 :
	       8'd8 ;
  assign dutWrapper_dut_fifoToAxi_burstCountReg$EN =
	     EN_axiw_writeData ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoToAxi_enabledReg
  assign dutWrapper_dut_fifoToAxi_enabledReg$D_IN =
	     !WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     requestFifo_fifo$D_OUT[31:0] != 32'd0 ;
  assign dutWrapper_dut_fifoToAxi_enabledReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_fifoToAxi_lastDataBeatCount
  assign dutWrapper_dut_fifoToAxi_lastDataBeatCount$D_IN =
	     dutWrapper_dut_fifoToAxi_lastDataBeatCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_lastDataBeatCount$EN =
	     MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1 ;

  // register dutWrapper_dut_fifoToAxi_oneBeatAddressReg
  assign dutWrapper_dut_fifoToAxi_oneBeatAddressReg$D_IN =
	     requestFifo_fifo$D_OUT[0] ;
  assign dutWrapper_dut_fifoToAxi_oneBeatAddressReg$EN =
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ;

  // register dutWrapper_dut_fifoToAxi_operationInProgress
  assign dutWrapper_dut_fifoToAxi_operationInProgress$D_IN =
	     !MUX_dutWrapper_dut_fifoToAxi_operationInProgress$write_1__SEL_1 ;
  assign dutWrapper_dut_fifoToAxi_operationInProgress$EN =
	     EN_axiw_writeData &&
	     dutWrapper_dut_fifoToAxi_burstCountReg == 8'd1 ||
	     WILL_FIRE_RL_dutWrapper_dut_fifoToAxi_updateBurstCount ;

  // register dutWrapper_dut_fifoToAxi_ptrReg
  assign dutWrapper_dut_fifoToAxi_ptrReg$D_IN =
	     MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__SEL_1 ?
	       requestFifo_fifo$D_OUT[31:0] :
	       MUX_dutWrapper_dut_fifoToAxi_ptrReg$write_1__VAL_2 ;
  assign dutWrapper_dut_fifoToAxi_ptrReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest &&
	     !dutWrapper_dut_fifoToAxi_enabledReg ||
	     EN_axiw_writeData ;

  // register dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg
  assign dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg$D_IN =
	     requestFifo_fifo$D_OUT[2] ;
  assign dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg$EN =
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ;

  // register dutWrapper_dut_fifoToAxi_thresholdReg
  assign dutWrapper_dut_fifoToAxi_thresholdReg$D_IN =
	     requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_fifoToAxi_thresholdReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ;

  // register dutWrapper_dut_fifoToAxi_wordsEnqCount
  assign dutWrapper_dut_fifoToAxi_wordsEnqCount$D_IN =
	     dutWrapper_dut_fifoToAxi_wordsEnqCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_wordsEnqCount$EN =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_dut_enqTestData ;

  // register dutWrapper_dut_fifoToAxi_wordsWrittenCount
  assign dutWrapper_dut_fifoToAxi_wordsWrittenCount$D_IN =
	     dutWrapper_dut_fifoToAxi_wordsWrittenCount + 32'd1 ;
  assign dutWrapper_dut_fifoToAxi_wordsWrittenCount$EN = EN_axiw_writeData ;

  // register dutWrapper_dut_firstReadSent
  assign dutWrapper_dut_firstReadSent$D_IN =
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;
  assign dutWrapper_dut_firstReadSent$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_firstReadresponse ;

  // register dutWrapper_dut_numWordsReg
  assign dutWrapper_dut_numWordsReg$D_IN = requestFifo_fifo$D_OUT[31:0] ;
  assign dutWrapper_dut_numWordsReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_readCompletedSent
  assign dutWrapper_dut_readCompletedSent$D_IN =
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;
  assign dutWrapper_dut_readCompletedSent$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ;

  // register dutWrapper_dut_readCountReg
  assign dutWrapper_dut_readCountReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData ?
	       MUX_dutWrapper_dut_readCountReg$write_1__VAL_1 :
	       32'd0 ;
  assign dutWrapper_dut_readCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_readTimer_runningReg
  assign dutWrapper_dut_readTimer_runningReg$D_IN =
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse ;
  assign dutWrapper_dut_readTimer_runningReg$EN =
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_readTimer_timerReg
  assign dutWrapper_dut_readTimer_timerReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ?
	       32'd0 :
	       MUX_dutWrapper_dut_readTimer_timerReg$write_1__VAL_2 ;
  assign dutWrapper_dut_readTimer_timerReg$EN =
	     dutWrapper_dut_readTimer_runningReg &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_result2Reg
  assign dutWrapper_dut_result2Reg$D_IN = 33'h0 ;
  assign dutWrapper_dut_result2Reg$EN = 1'b0 ;

  // register dutWrapper_dut_resultReg
  assign dutWrapper_dut_resultReg$D_IN = 33'h0 ;
  assign dutWrapper_dut_resultReg$EN = 1'b0 ;

  // register dutWrapper_dut_testCompletedReg
  assign dutWrapper_dut_testCompletedReg$D_IN =
	     MUX_dutWrapper_dut_testCompletedReg$write_1__SEL_1 ;
  assign dutWrapper_dut_testCompletedReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData &&
	     NOT_dutWrapper_dut_readCountReg_4_ULT_dutWrapp_ETC___d55 ||
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_testReg
  assign dutWrapper_dut_testReg$D_IN =
	     !MUX_dutWrapper_dut_testCompletedReg$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;
  assign dutWrapper_dut_testReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData &&
	     NOT_dutWrapper_dut_readCountReg_4_ULT_dutWrapp_ETC___d55 ||
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_testResultReg
  assign dutWrapper_dut_testResultReg$D_IN =
	     dutWrapper_dut_fifoFromAxi_rfifo$D_OUT[31:0] ;
  assign dutWrapper_dut_testResultReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData ;

  // register dutWrapper_dut_valueReg
  assign dutWrapper_dut_valueReg$D_IN =
	     dutWrapper_dut_valueReg_2_MUL_7___d33[31:0] ;
  assign dutWrapper_dut_valueReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_enqTestData ;

  // register dutWrapper_dut_writeCountReg
  assign dutWrapper_dut_writeCountReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_enqTestData ?
	       MUX_dutWrapper_dut_writeCountReg$write_1__VAL_1 :
	       32'd0 ;
  assign dutWrapper_dut_writeCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_enqTestData ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_writeQueuedSent
  assign dutWrapper_dut_writeQueuedSent$D_IN =
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;
  assign dutWrapper_dut_writeQueuedSent$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_writeQueuedresponse ;

  // register dutWrapper_dut_writeTimer_runningReg
  assign dutWrapper_dut_writeTimer_runningReg$D_IN =
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse ;
  assign dutWrapper_dut_writeTimer_runningReg$EN =
	     WILL_FIRE_RL_dutWrapper_writeCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_dut_writeTimer_timerReg
  assign dutWrapper_dut_writeTimer_timerReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ?
	       32'd0 :
	       MUX_dutWrapper_dut_writeTimer_timerReg$write_1__VAL_2 ;
  assign dutWrapper_dut_writeTimer_timerReg$EN =
	     dutWrapper_dut_writeTimer_runningReg &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ;

  // register dutWrapper_junkReqReg
  assign dutWrapper_junkReqReg$D_IN = dutWrapper_junkReqReg + 32'd1 ;
  assign dutWrapper_junkReqReg$EN =
	     requestFifo_fifo$EMPTY_N &&
	     CASE_requestFifo_fifoD_OUT_BITS_35_TO_32_10_C_ETC__q1[35:32] >
	     4'd10 ;

  // register dutWrapper_requestFired
  assign dutWrapper_requestFired$D_IN = dutWrapper_requestFired + 32'd1 ;
  assign dutWrapper_requestFired$EN =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // register dutWrapper_requestTimeLimitReg
  assign dutWrapper_requestTimeLimitReg$D_IN = 16'h0 ;
  assign dutWrapper_requestTimeLimitReg$EN = 1'b0 ;

  // register dutWrapper_requestTimerReg
  assign dutWrapper_requestTimerReg$D_IN =
	     (WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	      WILL_FIRE_RL_dutWrapper_discardBlockedRequests ||
	      WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	      WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	      WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	      WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	      WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetBaserequest) ?
	       16'd0 :
	       MUX_dutWrapper_requestTimerReg$write_1__VAL_12 ;
  assign dutWrapper_requestTimerReg$EN =
	     requestFifo_fifo$FULL_N ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedRequests ;

  // register dutWrapper_responseFired
  assign dutWrapper_responseFired$D_IN = dutWrapper_responseFired + 32'd1 ;
  assign dutWrapper_responseFired$EN =
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_firstReadresponse ||
	     WILL_FIRE_RL_dutWrapper_writeCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_writeQueuedresponse ||
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_readValueresponse ||
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ||
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ||
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ||
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;

  // register dutWrapper_responseTimeLimitReg
  assign dutWrapper_responseTimeLimitReg$D_IN = 16'h0 ;
  assign dutWrapper_responseTimeLimitReg$EN = 1'b0 ;

  // register dutWrapper_responseTimerReg
  assign dutWrapper_responseTimerReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_responseTimer ?
	       MUX_dutWrapper_responseTimerReg$write_1__VAL_1 :
	       16'd0 ;
  assign dutWrapper_responseTimerReg$EN =
	     WILL_FIRE_RL_dutWrapper_responseTimer ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedResponses ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN = MUX_responseFifo_count$write_1__SEL_1 ;

  // register interruptCleared
  assign interruptCleared$D_IN = !(!interrupted) ;
  assign interruptCleared$EN =
	     EN_put && put_addr == 12'h0 && put_v[0] && interrupted ||
	     !interrupted ;

  // register interrupted
  assign interrupted$D_IN = responseFifo_fifo$EMPTY_N ;
  assign interrupted$EN = 1'd1 ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN = EN_put && !put_addr_ULT_0x100___d283 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { put_v, requestFifo_buff[35:32] } :
	       newval__h9998 ;
  assign requestFifo_buff$EN = EN_put && !put_addr_ULT_0x100___d283 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h10099 ;
  assign requestFifo_count$EN = EN_put && !put_addr_ULT_0x100___d283 ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     MUX_responseFifo_count$write_1__SEL_1 ?
	       MUX_responseFifo_count$write_1__VAL_1 :
	       MUX_responseFifo_count$write_1__VAL_1 ;
  assign responseFifo_count$EN =
	     EN_get && !get_addr_ULT_0x100___d389 &&
	     responseFifo_fifo$EMPTY_N ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedResponses &&
	     responseFifo_fifo$EMPTY_N ;

  // register underflowCount
  assign underflowCount$D_IN = underflowCount + 32'd1 ;
  assign underflowCount$EN =
	     EN_get && !get_addr_ULT_0x100___d389 &&
	     !responseFifo_fifo$EMPTY_N ;

  // submodule dutWrapper_dut_fifoFromAxi_axiRrespFifo
  assign dutWrapper_dut_fifoFromAxi_axiRrespFifo$D_IN = axir_readData_resp ;
  assign dutWrapper_dut_fifoFromAxi_axiRrespFifo$ENQ =
	     EN_axir_readData && axir_readData_resp != 2'b0 ;
  assign dutWrapper_dut_fifoFromAxi_axiRrespFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ;
  assign dutWrapper_dut_fifoFromAxi_axiRrespFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fifoFromAxi_rfifo
  assign dutWrapper_dut_fifoFromAxi_rfifo$D_IN = axir_readData_data ;
  assign dutWrapper_dut_fifoFromAxi_rfifo$ENQ =
	     MUX_dutWrapper_dut_fifoFromAxi_burstCountReg$write_1__SEL_1 ;
  assign dutWrapper_dut_fifoFromAxi_rfifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_readValueresponse ||
	     WILL_FIRE_RL_dutWrapper_dut_receiveTestData ;
  assign dutWrapper_dut_fifoFromAxi_rfifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fifoStatusFifo
  always@(requestFifo_fifo$D_OUT or
	  dutWrapper_dut_fifoToAxi_baseReg or
	  dutWrapper_dut_fifoToAxi_boundsReg or
	  dutWrapper_dut_fifoToAxi_ptrReg or
	  v___1__h5517 or
	  v___1__h5523 or
	  spliced_bits__h5531 or
	  spliced_bits__h5564 or
	  spliced_bits__h5687 or
	  spliced_bits__h5720 or
	  spliced_bits__h5874 or
	  dutWrapper_dut_fifoToAxi_burstCountReg or
	  dutWrapper_dut_fifoToAxi_wordsEnqCount or
	  dutWrapper_dut_fifoToAxi_addrsBeatCount or
	  dutWrapper_dut_fifoToAxi_wordsWrittenCount or
	  dutWrapper_dut_fifoToAxi_lastDataBeatCount)
  begin
    case (requestFifo_fifo$D_OUT[11:0])
      12'h0:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_baseReg;
      12'h004:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_boundsReg;
      12'h008:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_ptrReg;
      12'h00C: dutWrapper_dut_fifoStatusFifo$D_IN = v___1__h5517;
      12'h010: dutWrapper_dut_fifoStatusFifo$D_IN = v___1__h5523;
      12'h014:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      { 16'd0, spliced_bits__h5531, 8'd0, spliced_bits__h5564 };
      12'h018:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      { 16'd0, spliced_bits__h5687, 8'd0, spliced_bits__h5720 };
      12'h01C:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      { 8'd187,
		spliced_bits__h5874,
		8'd0,
		dutWrapper_dut_fifoToAxi_burstCountReg };
      12'h020:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_wordsEnqCount;
      12'h024:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_addrsBeatCount;
      12'h028:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_wordsWrittenCount;
      12'h02C:
	  dutWrapper_dut_fifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoToAxi_lastDataBeatCount;
      default: dutWrapper_dut_fifoStatusFifo$D_IN = 32'h02142042;
    endcase
  end
  assign dutWrapper_dut_fifoStatusFifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ;
  assign dutWrapper_dut_fifoStatusFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ;
  assign dutWrapper_dut_fifoStatusFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fifoToAxi_axiBrespFifo
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$D_IN =
	     axiw_writeResponse_responseCode ;
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$ENQ =
	     EN_axiw_writeResponse &&
	     axiw_writeResponse_responseCode != 2'b0 ;
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ;
  assign dutWrapper_dut_fifoToAxi_axiBrespFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fifoToAxi_dfifo
  assign dutWrapper_dut_fifoToAxi_dfifo$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_enqTestData ?
	       MUX_dutWrapper_dut_fifoToAxi_dfifo$enq_1__VAL_1 :
	       MUX_dutWrapper_dut_fifoToAxi_dfifo$enq_1__VAL_2 ;
  assign dutWrapper_dut_fifoToAxi_dfifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_dut_enqTestData ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ;
  assign dutWrapper_dut_fifoToAxi_dfifo$DEQ = EN_axiw_writeData ;
  assign dutWrapper_dut_fifoToAxi_dfifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_fromFifoStatusFifo
  always@(requestFifo_fifo$D_OUT or
	  dutWrapper_dut_fifoFromAxi_baseReg or
	  dutWrapper_dut_fifoFromAxi_boundsReg or
	  dutWrapper_dut_fifoFromAxi_ptrReg or
	  v___1__h6972 or
	  v___1__h6978 or
	  spliced_bits__h6986 or
	  spliced_bits__h7019 or
	  spliced_bits__h7142 or
	  spliced_bits__h7175 or
	  spliced_bits__h7329 or
	  dutWrapper_dut_fifoFromAxi_burstCountReg or
	  dutWrapper_dut_fifoFromAxi_wordsDeqCount or
	  dutWrapper_dut_fifoFromAxi_addrsBeatCount or
	  dutWrapper_dut_fifoFromAxi_wordsReceivedCount or
	  dutWrapper_dut_fifoFromAxi_lastDataBeatCount)
  begin
    case (requestFifo_fifo$D_OUT[11:0])
      12'h0:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_baseReg;
      12'h004:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_boundsReg;
      12'h008:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_ptrReg;
      12'h00C: dutWrapper_dut_fromFifoStatusFifo$D_IN = v___1__h6972;
      12'h010: dutWrapper_dut_fromFifoStatusFifo$D_IN = v___1__h6978;
      12'h014:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      { 16'd0, spliced_bits__h6986, 8'd0, spliced_bits__h7019 };
      12'h018:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      { 16'd0, spliced_bits__h7142, 8'd0, spliced_bits__h7175 };
      12'h01C:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      { 8'd187,
		spliced_bits__h7329,
		8'd0,
		dutWrapper_dut_fifoFromAxi_burstCountReg };
      12'h020:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_wordsDeqCount;
      12'h024:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_addrsBeatCount;
      12'h028:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_wordsReceivedCount;
      12'h02C:
	  dutWrapper_dut_fromFifoStatusFifo$D_IN =
	      dutWrapper_dut_fifoFromAxi_lastDataBeatCount;
      default: dutWrapper_dut_fromFifoStatusFifo$D_IN = 32'h02142042;
    endcase
  end
  assign dutWrapper_dut_fromFifoStatusFifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ;
  assign dutWrapper_dut_fromFifoStatusFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ;
  assign dutWrapper_dut_fromFifoStatusFifo$CLR = 1'b0 ;

  // submodule requestFifo_fifo
  assign requestFifo_fifo$D_IN = { put_v[3:0], requestFifo_buff[35:4] } ;
  assign requestFifo_fifo$ENQ =
	     EN_put && !put_addr_ULT_0x100___d283 &&
	     requestFifo_count == 32'd1 ;
  assign requestFifo_fifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedRequests ||
	     requestFifo_fifo$EMPTY_N &&
	     CASE_requestFifo_fifoD_OUT_BITS_35_TO_32_10_C_ETC__q1[35:32] >
	     4'd10 ;
  assign requestFifo_fifo$CLR = 1'b0 ;

  // submodule responseFifo_fifo
  always@(WILL_FIRE_RL_dutWrapper_fifoStatusresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_1 or
	  WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_dutWrapper_readValueresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_3 or
	  WILL_FIRE_RL_dutWrapper_testCompletedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_4 or
	  WILL_FIRE_RL_dutWrapper_writeQueuedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_5 or
	  WILL_FIRE_RL_dutWrapper_writeCompletedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_6 or
	  WILL_FIRE_RL_dutWrapper_firstReadresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_7 or
	  WILL_FIRE_RL_dutWrapper_readCompletedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_8 or
	  WILL_FIRE_RL_dutWrapper_axiResponseresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_9 or
	  WILL_FIRE_RL_dutWrapper_axirResponseresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_10)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dutWrapper_fifoStatusresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_1;
      WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_dutWrapper_readValueresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_3;
      WILL_FIRE_RL_dutWrapper_testCompletedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_4;
      WILL_FIRE_RL_dutWrapper_writeQueuedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_5;
      WILL_FIRE_RL_dutWrapper_writeCompletedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_6;
      WILL_FIRE_RL_dutWrapper_firstReadresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_7;
      WILL_FIRE_RL_dutWrapper_readCompletedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_8;
      WILL_FIRE_RL_dutWrapper_axiResponseresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_9;
      WILL_FIRE_RL_dutWrapper_axirResponseresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_10;
      default: responseFifo_fifo$D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign responseFifo_fifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_fifoStatusresponse ||
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ||
	     WILL_FIRE_RL_dutWrapper_readValueresponse ||
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_writeQueuedresponse ||
	     WILL_FIRE_RL_dutWrapper_writeCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_firstReadresponse ||
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ||
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ;
  assign responseFifo_fifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_discardBlockedResponses &&
	     responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd1 ||
	     EN_get && !get_addr_ULT_0x100___d389 &&
	     responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd1 ;
  assign responseFifo_fifo$CLR = 1'b0 ;

  // submodule rf
  assign rf$ADDR_1 = 12'h004 ;
  assign rf$ADDR_2 = get_addr ;
  assign rf$ADDR_3 = 12'h0 ;
  assign rf$ADDR_4 = 12'h0 ;
  assign rf$ADDR_5 = 12'h0 ;
  assign rf$ADDR_IN = put_addr ;
  assign rf$D_IN = put_v ;
  assign rf$WE = EN_put && put_addr_ULT_0x100___d283 ;

  // remaining internal signals
  assign NOT_dutWrapper_dut_readCountReg_4_ULT_dutWrapp_ETC___d55 =
	     dutWrapper_dut_readCountReg >= y__h3647 ;
  assign dutWrapper_dut_valueReg_2_MUL_7___d33 =
	     dutWrapper_dut_valueReg * 32'd7 ;
  assign get_addr_ULT_0x100___d389 = get_addr < 12'h100 ;
  assign newval__h9998 = { put_v, requestFifo_buff[35:32] } ;
  assign put_addr_ULT_0x100___d283 = put_addr < 12'h100 ;
  assign result__h10491 =
	     { rf$D_OUT_2[31:17],
	       responseFifo_fifo$FULL_N,
	       rf$D_OUT_2[15:1],
	       interrupted } ;
  assign spliced_bits__h5531 =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$FULL_N ? 4'h0 : 4'hF ;
  assign spliced_bits__h5564 =
	     dutWrapper_dut_fifoToAxi_axiBrespFifo$EMPTY_N ? 4'h1 : 4'hE ;
  assign spliced_bits__h5687 =
	     dutWrapper_dut_fifoToAxi_dfifo$FULL_N ? 4'h0 : 4'hF ;
  assign spliced_bits__h5720 =
	     dutWrapper_dut_fifoToAxi_dfifo$EMPTY_N ? 4'h1 : 4'hE ;
  assign spliced_bits__h5874 =
	     dutWrapper_dut_fifoToAxi_operationInProgress ? 8'hAA : 8'h11 ;
  assign spliced_bits__h6986 =
	     dutWrapper_dut_fifoFromAxi_axiRrespFifo$FULL_N ? 4'h0 : 4'hF ;
  assign spliced_bits__h7019 =
	     dutWrapper_dut_fifoFromAxi_axiRrespFifo$EMPTY_N ? 4'h1 : 4'hE ;
  assign spliced_bits__h7142 =
	     dutWrapper_dut_fifoFromAxi_rfifo$FULL_N ? 4'h0 : 4'hF ;
  assign spliced_bits__h7175 =
	     dutWrapper_dut_fifoFromAxi_rfifo$EMPTY_N ? 4'h1 : 4'hE ;
  assign spliced_bits__h7329 =
	     dutWrapper_dut_fifoFromAxi_operationInProgress ? 8'hAA : 8'h11 ;
  assign v___1__h10201 =
	     responseFifo_fifo$EMPTY_N ? v___1__h10215 : 32'h050A050A ;
  assign v___1__h10215 =
	     responseFifo_fifo$EMPTY_N ? x__h10373[31:0] : 32'h050A050A ;
  assign v___1__h5517 = { 24'd0, dutWrapper_dut_fifoToAxi_burstCountReg } ;
  assign v___1__h5523 =
	     dutWrapper_dut_fifoToAxi_enabledReg ?
	       32'hEEEEEEEE :
	       32'hDDDDDDDD ;
  assign v___1__h6972 = { 24'd0, dutWrapper_dut_fifoFromAxi_burstCountReg } ;
  assign v___1__h6978 =
	     dutWrapper_dut_fifoFromAxi_enabledReg ?
	       32'hEEEEEEEE :
	       32'hDDDDDDDD ;
  assign x__h10099 = requestFifo_count + 32'd1 ;
  assign x__h10373 = responseFifo_fifo$D_OUT >> x__h10377 ;
  assign x__h10377 = { responseFifo_count[26:0], 5'd0 } ;
  assign x__h4764 = responseFifo_count + 32'd1 ;
  assign y__h3647 = dutWrapper_dut_numWordsReg - 32'd1 ;
  assign y__h8112 = { requestFifo_fifo$D_OUT[28:0], 3'd0 } ;
  always@(get_addr or
	  rf$D_OUT_2 or
	  result__h10491 or
	  dutWrapper_junkReqReg or
	  dutWrapper_requestFired or
	  dutWrapper_responseFired or
	  underflowCount or putWordCount or getWordCount)
  begin
    case (get_addr)
      12'h0:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      result__h10491;
      12'h008:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      32'h02142011;
      12'h00C:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      dutWrapper_junkReqReg;
      12'h010:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      dutWrapper_requestFired;
      12'h014:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      dutWrapper_responseFired;
      12'h018:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      underflowCount;
      12'h020:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      putWordCount;
      12'h024:
	  IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
	      getWordCount;
      default: IF_get_addr_EQ_0x24_10_THEN_getWordCount_04_EL_ETC___d329 =
		   rf$D_OUT_2;
    endcase
  end
  always@(requestFifo_fifo$D_OUT)
  begin
    case (requestFifo_fifo$D_OUT[35:32])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8, 4'd9:
	  CASE_requestFifo_fifoD_OUT_BITS_35_TO_32_10_C_ETC__q1 =
	      requestFifo_fifo$D_OUT;
      default: CASE_requestFifo_fifoD_OUT_BITS_35_TO_32_10_C_ETC__q1 =
		   { 4'd10, requestFifo_fifo$D_OUT[31:0] };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dutWrapper_dut_fifoFromAxi_addressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoFromAxi_addrsBeatCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoFromAxi_baseReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoFromAxi_boundsReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoFromAxi_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	dutWrapper_dut_fifoFromAxi_enabledReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_fifoFromAxi_lastDataBeatCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoFromAxi_oneBeatAddressReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	dutWrapper_dut_fifoFromAxi_operationInProgress <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoFromAxi_ptrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoFromAxi_thresholdReg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoFromAxi_wordsDeqCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoFromAxi_wordsReceivedCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoToAxi_addressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoToAxi_addrsBeatCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoToAxi_baseReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_boundsReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_burstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dutWrapper_dut_fifoToAxi_enabledReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_fifoToAxi_lastDataBeatCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_fifoToAxi_oneBeatAddressReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	dutWrapper_dut_fifoToAxi_operationInProgress <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoToAxi_ptrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_fifoToAxi_thresholdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_wordsEnqCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fifoToAxi_wordsWrittenCount <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_firstReadSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_numWordsReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_readCompletedSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_readCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_readTimer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_readTimer_timerReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_result2Reg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_dut_testCompletedReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_testReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_testResultReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_valueReg <= `BSV_ASSIGNMENT_DELAY 32'd13;
	dutWrapper_dut_writeCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_writeQueuedSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_writeTimer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_writeTimer_timerReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dutWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dutWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interruptCleared <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 36'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	underflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dutWrapper_dut_fifoFromAxi_addressPresented$EN)
	  dutWrapper_dut_fifoFromAxi_addressPresented <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_addressPresented$D_IN;
	if (dutWrapper_dut_fifoFromAxi_addrsBeatCount$EN)
	  dutWrapper_dut_fifoFromAxi_addrsBeatCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_addrsBeatCount$D_IN;
	if (dutWrapper_dut_fifoFromAxi_baseReg$EN)
	  dutWrapper_dut_fifoFromAxi_baseReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_baseReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_boundsReg$EN)
	  dutWrapper_dut_fifoFromAxi_boundsReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_boundsReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_burstCountReg$EN)
	  dutWrapper_dut_fifoFromAxi_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_burstCountReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_enabledReg$EN)
	  dutWrapper_dut_fifoFromAxi_enabledReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_enabledReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_lastDataBeatCount$EN)
	  dutWrapper_dut_fifoFromAxi_lastDataBeatCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_lastDataBeatCount$D_IN;
	if (dutWrapper_dut_fifoFromAxi_oneBeatAddressReg$EN)
	  dutWrapper_dut_fifoFromAxi_oneBeatAddressReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_oneBeatAddressReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_operationInProgress$EN)
	  dutWrapper_dut_fifoFromAxi_operationInProgress <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_operationInProgress$D_IN;
	if (dutWrapper_dut_fifoFromAxi_ptrReg$EN)
	  dutWrapper_dut_fifoFromAxi_ptrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_ptrReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg$EN)
	  dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_thresholdReg$EN)
	  dutWrapper_dut_fifoFromAxi_thresholdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_thresholdReg$D_IN;
	if (dutWrapper_dut_fifoFromAxi_wordsDeqCount$EN)
	  dutWrapper_dut_fifoFromAxi_wordsDeqCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_wordsDeqCount$D_IN;
	if (dutWrapper_dut_fifoFromAxi_wordsReceivedCount$EN)
	  dutWrapper_dut_fifoFromAxi_wordsReceivedCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoFromAxi_wordsReceivedCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_addressPresented$EN)
	  dutWrapper_dut_fifoToAxi_addressPresented <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_addressPresented$D_IN;
	if (dutWrapper_dut_fifoToAxi_addrsBeatCount$EN)
	  dutWrapper_dut_fifoToAxi_addrsBeatCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_addrsBeatCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_baseReg$EN)
	  dutWrapper_dut_fifoToAxi_baseReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_baseReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_boundsReg$EN)
	  dutWrapper_dut_fifoToAxi_boundsReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_boundsReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_burstCountReg$EN)
	  dutWrapper_dut_fifoToAxi_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_burstCountReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_enabledReg$EN)
	  dutWrapper_dut_fifoToAxi_enabledReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_enabledReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_lastDataBeatCount$EN)
	  dutWrapper_dut_fifoToAxi_lastDataBeatCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_lastDataBeatCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_oneBeatAddressReg$EN)
	  dutWrapper_dut_fifoToAxi_oneBeatAddressReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_oneBeatAddressReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_operationInProgress$EN)
	  dutWrapper_dut_fifoToAxi_operationInProgress <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_operationInProgress$D_IN;
	if (dutWrapper_dut_fifoToAxi_ptrReg$EN)
	  dutWrapper_dut_fifoToAxi_ptrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_ptrReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg$EN)
	  dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_thresholdReg$EN)
	  dutWrapper_dut_fifoToAxi_thresholdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_thresholdReg$D_IN;
	if (dutWrapper_dut_fifoToAxi_wordsEnqCount$EN)
	  dutWrapper_dut_fifoToAxi_wordsEnqCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_wordsEnqCount$D_IN;
	if (dutWrapper_dut_fifoToAxi_wordsWrittenCount$EN)
	  dutWrapper_dut_fifoToAxi_wordsWrittenCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoToAxi_wordsWrittenCount$D_IN;
	if (dutWrapper_dut_firstReadSent$EN)
	  dutWrapper_dut_firstReadSent <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_firstReadSent$D_IN;
	if (dutWrapper_dut_numWordsReg$EN)
	  dutWrapper_dut_numWordsReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_numWordsReg$D_IN;
	if (dutWrapper_dut_readCompletedSent$EN)
	  dutWrapper_dut_readCompletedSent <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readCompletedSent$D_IN;
	if (dutWrapper_dut_readCountReg$EN)
	  dutWrapper_dut_readCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readCountReg$D_IN;
	if (dutWrapper_dut_readTimer_runningReg$EN)
	  dutWrapper_dut_readTimer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readTimer_runningReg$D_IN;
	if (dutWrapper_dut_readTimer_timerReg$EN)
	  dutWrapper_dut_readTimer_timerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readTimer_timerReg$D_IN;
	if (dutWrapper_dut_result2Reg$EN)
	  dutWrapper_dut_result2Reg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_result2Reg$D_IN;
	if (dutWrapper_dut_resultReg$EN)
	  dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_resultReg$D_IN;
	if (dutWrapper_dut_testCompletedReg$EN)
	  dutWrapper_dut_testCompletedReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_testCompletedReg$D_IN;
	if (dutWrapper_dut_testReg$EN)
	  dutWrapper_dut_testReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_testReg$D_IN;
	if (dutWrapper_dut_testResultReg$EN)
	  dutWrapper_dut_testResultReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_testResultReg$D_IN;
	if (dutWrapper_dut_valueReg$EN)
	  dutWrapper_dut_valueReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_valueReg$D_IN;
	if (dutWrapper_dut_writeCountReg$EN)
	  dutWrapper_dut_writeCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeCountReg$D_IN;
	if (dutWrapper_dut_writeQueuedSent$EN)
	  dutWrapper_dut_writeQueuedSent <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeQueuedSent$D_IN;
	if (dutWrapper_dut_writeTimer_runningReg$EN)
	  dutWrapper_dut_writeTimer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeTimer_runningReg$D_IN;
	if (dutWrapper_dut_writeTimer_timerReg$EN)
	  dutWrapper_dut_writeTimer_timerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeTimer_timerReg$D_IN;
	if (dutWrapper_junkReqReg$EN)
	  dutWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_junkReqReg$D_IN;
	if (dutWrapper_requestFired$EN)
	  dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestFired$D_IN;
	if (dutWrapper_requestTimeLimitReg$EN)
	  dutWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestTimeLimitReg$D_IN;
	if (dutWrapper_requestTimerReg$EN)
	  dutWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestTimerReg$D_IN;
	if (dutWrapper_responseFired$EN)
	  dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseFired$D_IN;
	if (dutWrapper_responseTimeLimitReg$EN)
	  dutWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseTimeLimitReg$D_IN;
	if (dutWrapper_responseTimerReg$EN)
	  dutWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseTimerReg$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (interruptCleared$EN)
	  interruptCleared <= `BSV_ASSIGNMENT_DELAY interruptCleared$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
	if (underflowCount$EN)
	  underflowCount <= `BSV_ASSIGNMENT_DELAY underflowCount$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dutWrapper_dut_fifoFromAxi_addressPresented = 1'h0;
    dutWrapper_dut_fifoFromAxi_addrsBeatCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_baseReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_boundsReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_burstCountReg = 8'hAA;
    dutWrapper_dut_fifoFromAxi_enabledReg = 1'h0;
    dutWrapper_dut_fifoFromAxi_lastDataBeatCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_oneBeatAddressReg = 1'h0;
    dutWrapper_dut_fifoFromAxi_operationInProgress = 1'h0;
    dutWrapper_dut_fifoFromAxi_ptrReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_thirtyTwoBitTransferReg = 1'h0;
    dutWrapper_dut_fifoFromAxi_thresholdReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_wordsDeqCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoFromAxi_wordsReceivedCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_addressPresented = 1'h0;
    dutWrapper_dut_fifoToAxi_addrsBeatCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_baseReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_boundsReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_burstCountReg = 8'hAA;
    dutWrapper_dut_fifoToAxi_enabledReg = 1'h0;
    dutWrapper_dut_fifoToAxi_lastDataBeatCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_oneBeatAddressReg = 1'h0;
    dutWrapper_dut_fifoToAxi_operationInProgress = 1'h0;
    dutWrapper_dut_fifoToAxi_ptrReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_thirtyTwoBitTransferReg = 1'h0;
    dutWrapper_dut_fifoToAxi_thresholdReg = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_wordsEnqCount = 32'hAAAAAAAA;
    dutWrapper_dut_fifoToAxi_wordsWrittenCount = 32'hAAAAAAAA;
    dutWrapper_dut_firstReadSent = 1'h0;
    dutWrapper_dut_numWordsReg = 32'hAAAAAAAA;
    dutWrapper_dut_readCompletedSent = 1'h0;
    dutWrapper_dut_readCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_readTimer_runningReg = 1'h0;
    dutWrapper_dut_readTimer_timerReg = 32'hAAAAAAAA;
    dutWrapper_dut_result2Reg = 33'h0AAAAAAAA;
    dutWrapper_dut_resultReg = 33'h0AAAAAAAA;
    dutWrapper_dut_testCompletedReg = 1'h0;
    dutWrapper_dut_testReg = 1'h0;
    dutWrapper_dut_testResultReg = 32'hAAAAAAAA;
    dutWrapper_dut_valueReg = 32'hAAAAAAAA;
    dutWrapper_dut_writeCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_writeQueuedSent = 1'h0;
    dutWrapper_dut_writeTimer_runningReg = 1'h0;
    dutWrapper_dut_writeTimer_timerReg = 32'hAAAAAAAA;
    dutWrapper_junkReqReg = 32'hAAAAAAAA;
    dutWrapper_requestFired = 32'hAAAAAAAA;
    dutWrapper_requestTimeLimitReg = 16'hAAAA;
    dutWrapper_requestTimerReg = 16'hAAAA;
    dutWrapper_responseFired = 32'hAAAAAAAA;
    dutWrapper_responseTimeLimitReg = 16'hAAAA;
    dutWrapper_responseTimerReg = 16'hAAAA;
    getWordCount = 32'hAAAAAAAA;
    interruptCleared = 1'h0;
    interrupted = 1'h0;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 36'hAAAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    responseFifo_count = 32'hAAAAAAAA;
    underflowCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkIpSlaveWithMaster

