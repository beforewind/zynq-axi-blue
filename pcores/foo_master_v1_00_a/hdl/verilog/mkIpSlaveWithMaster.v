//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Wed Jan  9 17:43:42 EST 2013
//
// Method conflict info:
// Method: put
// Conflict-free: error,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: get, interrupt
// Conflicts: put
//
// Method: get
// Conflict-free: error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: put
// Sequenced before (restricted): axir0_readAddr, axir0_readBurstLen
// Conflicts: get
//
// Method: error
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: interrupt
// Conflict-free: get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: put
//
// Method: axiw0_writeAddr
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw0_writeData
// Sequenced after: axiw0_writeId
// Conflicts: axiw0_writeAddr
//
// Method: axiw0_writeBurstLen
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw0_writeData
//
// Method: axiw0_writeBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeId
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw0_writeAddr
//
// Method: axiw0_writeData
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: axiw0_writeAddr, axiw0_writeBurstLen, axiw0_writeLastDataBeat
// Conflicts: axiw0_writeData
//
// Method: axiw0_writeDataByteEnable
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeLastDataBeat
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw0_writeData
//
// Method: axiw0_writeResponse
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: axiw0_writeResponse
//
// Method: axir0_readAddr
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: axir0_readBurstLen, axir0_readId
// Sequenced after (restricted): get
// Conflicts: axir0_readAddr
//
// Method: axir0_readBurstLen
// Conflict-free: put,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axir0_readAddr
// Sequenced after (restricted): get
//
// Method: axir0_readBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readId
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axir0_readAddr
//
// Method: axir0_readData
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: axir0_readData
//
// Method: axiw1_writeAddr
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw1_writeData
// Sequenced after: axiw1_writeId
// Conflicts: axiw1_writeAddr
//
// Method: axiw1_writeBurstLen
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw1_writeData
//
// Method: axiw1_writeBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw1_writeBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw1_writeBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw1_writeBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw1_writeId
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw1_writeAddr
//
// Method: axiw1_writeData
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: axiw1_writeAddr, axiw1_writeBurstLen, axiw1_writeLastDataBeat
// Conflicts: axiw1_writeData
//
// Method: axiw1_writeDataByteEnable
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw1_writeLastDataBeat
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axiw1_writeData
//
// Method: axiw1_writeResponse
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: axiw1_writeResponse
//
// Method: axir1_readAddr
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: axir1_readBurstLen, axir1_readId
// Conflicts: axir1_readAddr
//
// Method: axir1_readBurstLen
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axir1_readAddr
//
// Method: axir1_readBurstWidth
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir1_readBurstType
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir1_readBurstProt
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir1_readBurstCache
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir1_readId
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: axir1_readAddr
//
// Method: axir1_readData
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: axir1_readData
//
// Method: hdmi_hdmi_vsync
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_hsync
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_de
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_data
// Conflict-free: put,
// 	       get,
// 	       error,
// 	       interrupt,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       axiw1_writeAddr,
// 	       axiw1_writeBurstLen,
// 	       axiw1_writeBurstWidth,
// 	       axiw1_writeBurstType,
// 	       axiw1_writeBurstProt,
// 	       axiw1_writeBurstCache,
// 	       axiw1_writeId,
// 	       axiw1_writeData,
// 	       axiw1_writeDataByteEnable,
// 	       axiw1_writeLastDataBeat,
// 	       axiw1_writeResponse,
// 	       axir1_readAddr,
// 	       axir1_readBurstLen,
// 	       axir1_readBurstWidth,
// 	       axir1_readBurstType,
// 	       axir1_readBurstProt,
// 	       axir1_readBurstCache,
// 	       axir1_readId,
// 	       axir1_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1
// get                            O    32
// RDY_get                        O     1 const
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// axiw0_writeAddr                O    32 reg
// RDY_axiw0_writeAddr            O     1
// axiw0_writeBurstLen            O     8
// RDY_axiw0_writeBurstLen        O     1 const
// axiw0_writeBurstWidth          O     3 const
// RDY_axiw0_writeBurstWidth      O     1 const
// axiw0_writeBurstType           O     2 const
// RDY_axiw0_writeBurstType       O     1 const
// axiw0_writeBurstProt           O     3 const
// RDY_axiw0_writeBurstProt       O     1 const
// axiw0_writeBurstCache          O     4 const
// RDY_axiw0_writeBurstCache      O     1 const
// axiw0_writeId                  O     1 reg
// RDY_axiw0_writeId              O     1 const
// axiw0_writeData                O    64
// RDY_axiw0_writeData            O     1
// axiw0_writeDataByteEnable      O     8 const
// RDY_axiw0_writeDataByteEnable  O     1 const
// axiw0_writeLastDataBeat        O     1
// RDY_axiw0_writeLastDataBeat    O     1 const
// RDY_axiw0_writeResponse        O     1
// axir0_readAddr                 O    32
// RDY_axir0_readAddr             O     1
// axir0_readBurstLen             O     8
// RDY_axir0_readBurstLen         O     1
// axir0_readBurstWidth           O     3 const
// RDY_axir0_readBurstWidth       O     1 const
// axir0_readBurstType            O     2 const
// RDY_axir0_readBurstType        O     1 const
// axir0_readBurstProt            O     3 const
// RDY_axir0_readBurstProt        O     1 const
// axir0_readBurstCache           O     4 const
// RDY_axir0_readBurstCache       O     1 const
// axir0_readId                   O     1 reg
// RDY_axir0_readId               O     1 const
// RDY_axir0_readData             O     1
// axiw1_writeAddr                O    32 reg
// RDY_axiw1_writeAddr            O     1
// axiw1_writeBurstLen            O     8
// RDY_axiw1_writeBurstLen        O     1 const
// axiw1_writeBurstWidth          O     3 const
// RDY_axiw1_writeBurstWidth      O     1 const
// axiw1_writeBurstType           O     2 const
// RDY_axiw1_writeBurstType       O     1 const
// axiw1_writeBurstProt           O     3 const
// RDY_axiw1_writeBurstProt       O     1 const
// axiw1_writeBurstCache          O     4 const
// RDY_axiw1_writeBurstCache      O     1 const
// axiw1_writeId                  O     1 reg
// RDY_axiw1_writeId              O     1 const
// axiw1_writeData                O    64
// RDY_axiw1_writeData            O     1
// axiw1_writeDataByteEnable      O     8 const
// RDY_axiw1_writeDataByteEnable  O     1 const
// axiw1_writeLastDataBeat        O     1
// RDY_axiw1_writeLastDataBeat    O     1 const
// RDY_axiw1_writeResponse        O     1
// axir1_readAddr                 O    32
// RDY_axir1_readAddr             O     1
// axir1_readBurstLen             O     8
// RDY_axir1_readBurstLen         O     1
// axir1_readBurstWidth           O     3 const
// RDY_axir1_readBurstWidth       O     1 const
// axir1_readBurstType            O     2 const
// RDY_axir1_readBurstType        O     1 const
// axir1_readBurstProt            O     3 const
// RDY_axir1_readBurstProt        O     1 const
// axir1_readBurstCache           O     4 const
// RDY_axir1_readBurstCache       O     1 const
// axir1_readId                   O     1 reg
// RDY_axir1_readId               O     1 const
// RDY_axir1_readData             O     1
// hdmi_hdmi_vsync                O     1 reg
// RDY_hdmi_hdmi_vsync            O     1 const
// hdmi_hdmi_hsync                O     1 reg
// RDY_hdmi_hdmi_hsync            O     1 const
// hdmi_hdmi_de                   O     1 reg
// RDY_hdmi_hdmi_de               O     1 const
// hdmi_hdmi_data                 O    16 reg
// RDY_hdmi_hdmi_data             O     1 const
// CLK_hdmi_ref_clk               I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_addr                       I    12
// put_v                          I    32
// get_addr                       I    12
// axiw0_writeResponse_responseCode  I     2
// axiw0_writeResponse_id         I     1 unused
// axir0_readData_data            I    64
// axir0_readData_resp            I     2 unused
// axir0_readData_last            I     1 unused
// axir0_readData_id              I     1 unused
// axiw1_writeResponse_responseCode  I     2
// axiw1_writeResponse_id         I     1 unused
// axir1_readData_data            I    64
// axir1_readData_resp            I     2 unused
// axir1_readData_last            I     1 unused
// axir1_readData_id              I     1 unused
// EN_put                         I     1
// EN_axiw0_writeResponse         I     1
// EN_axir0_readData              I     1
// EN_axiw1_writeResponse         I     1
// EN_axir1_readData              I     1
// EN_get                         I     1
// EN_axiw0_writeAddr             I     1
// EN_axiw0_writeData             I     1
// EN_axir0_readAddr              I     1
// EN_axiw1_writeAddr             I     1
// EN_axiw1_writeData             I     1
// EN_axir1_readAddr              I     1
//
// Combinational paths from inputs to outputs:
//   get_addr -> get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIpSlaveWithMaster(CLK_hdmi_ref_clk,
			   CLK,
			   RST_N,

			   put_addr,
			   put_v,
			   EN_put,
			   RDY_put,

			   get_addr,
			   EN_get,
			   get,
			   RDY_get,

			   error,
			   RDY_error,

			   interrupt,
			   RDY_interrupt,

			   EN_axiw0_writeAddr,
			   axiw0_writeAddr,
			   RDY_axiw0_writeAddr,

			   axiw0_writeBurstLen,
			   RDY_axiw0_writeBurstLen,

			   axiw0_writeBurstWidth,
			   RDY_axiw0_writeBurstWidth,

			   axiw0_writeBurstType,
			   RDY_axiw0_writeBurstType,

			   axiw0_writeBurstProt,
			   RDY_axiw0_writeBurstProt,

			   axiw0_writeBurstCache,
			   RDY_axiw0_writeBurstCache,

			   axiw0_writeId,
			   RDY_axiw0_writeId,

			   EN_axiw0_writeData,
			   axiw0_writeData,
			   RDY_axiw0_writeData,

			   axiw0_writeDataByteEnable,
			   RDY_axiw0_writeDataByteEnable,

			   axiw0_writeLastDataBeat,
			   RDY_axiw0_writeLastDataBeat,

			   axiw0_writeResponse_responseCode,
			   axiw0_writeResponse_id,
			   EN_axiw0_writeResponse,
			   RDY_axiw0_writeResponse,

			   EN_axir0_readAddr,
			   axir0_readAddr,
			   RDY_axir0_readAddr,

			   axir0_readBurstLen,
			   RDY_axir0_readBurstLen,

			   axir0_readBurstWidth,
			   RDY_axir0_readBurstWidth,

			   axir0_readBurstType,
			   RDY_axir0_readBurstType,

			   axir0_readBurstProt,
			   RDY_axir0_readBurstProt,

			   axir0_readBurstCache,
			   RDY_axir0_readBurstCache,

			   axir0_readId,
			   RDY_axir0_readId,

			   axir0_readData_data,
			   axir0_readData_resp,
			   axir0_readData_last,
			   axir0_readData_id,
			   EN_axir0_readData,
			   RDY_axir0_readData,

			   EN_axiw1_writeAddr,
			   axiw1_writeAddr,
			   RDY_axiw1_writeAddr,

			   axiw1_writeBurstLen,
			   RDY_axiw1_writeBurstLen,

			   axiw1_writeBurstWidth,
			   RDY_axiw1_writeBurstWidth,

			   axiw1_writeBurstType,
			   RDY_axiw1_writeBurstType,

			   axiw1_writeBurstProt,
			   RDY_axiw1_writeBurstProt,

			   axiw1_writeBurstCache,
			   RDY_axiw1_writeBurstCache,

			   axiw1_writeId,
			   RDY_axiw1_writeId,

			   EN_axiw1_writeData,
			   axiw1_writeData,
			   RDY_axiw1_writeData,

			   axiw1_writeDataByteEnable,
			   RDY_axiw1_writeDataByteEnable,

			   axiw1_writeLastDataBeat,
			   RDY_axiw1_writeLastDataBeat,

			   axiw1_writeResponse_responseCode,
			   axiw1_writeResponse_id,
			   EN_axiw1_writeResponse,
			   RDY_axiw1_writeResponse,

			   EN_axir1_readAddr,
			   axir1_readAddr,
			   RDY_axir1_readAddr,

			   axir1_readBurstLen,
			   RDY_axir1_readBurstLen,

			   axir1_readBurstWidth,
			   RDY_axir1_readBurstWidth,

			   axir1_readBurstType,
			   RDY_axir1_readBurstType,

			   axir1_readBurstProt,
			   RDY_axir1_readBurstProt,

			   axir1_readBurstCache,
			   RDY_axir1_readBurstCache,

			   axir1_readId,
			   RDY_axir1_readId,

			   axir1_readData_data,
			   axir1_readData_resp,
			   axir1_readData_last,
			   axir1_readData_id,
			   EN_axir1_readData,
			   RDY_axir1_readData,

			   hdmi_hdmi_vsync,
			   RDY_hdmi_hdmi_vsync,

			   hdmi_hdmi_hsync,
			   RDY_hdmi_hdmi_hsync,

			   hdmi_hdmi_de,
			   RDY_hdmi_hdmi_de,

			   hdmi_hdmi_data,
			   RDY_hdmi_hdmi_data);
  input  CLK_hdmi_ref_clk;
  input  CLK;
  input  RST_N;

  // action method put
  input  [11 : 0] put_addr;
  input  [31 : 0] put_v;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  [11 : 0] get_addr;
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // actionvalue method axiw0_writeAddr
  input  EN_axiw0_writeAddr;
  output [31 : 0] axiw0_writeAddr;
  output RDY_axiw0_writeAddr;

  // value method axiw0_writeBurstLen
  output [7 : 0] axiw0_writeBurstLen;
  output RDY_axiw0_writeBurstLen;

  // value method axiw0_writeBurstWidth
  output [2 : 0] axiw0_writeBurstWidth;
  output RDY_axiw0_writeBurstWidth;

  // value method axiw0_writeBurstType
  output [1 : 0] axiw0_writeBurstType;
  output RDY_axiw0_writeBurstType;

  // value method axiw0_writeBurstProt
  output [2 : 0] axiw0_writeBurstProt;
  output RDY_axiw0_writeBurstProt;

  // value method axiw0_writeBurstCache
  output [3 : 0] axiw0_writeBurstCache;
  output RDY_axiw0_writeBurstCache;

  // value method axiw0_writeId
  output axiw0_writeId;
  output RDY_axiw0_writeId;

  // actionvalue method axiw0_writeData
  input  EN_axiw0_writeData;
  output [63 : 0] axiw0_writeData;
  output RDY_axiw0_writeData;

  // value method axiw0_writeDataByteEnable
  output [7 : 0] axiw0_writeDataByteEnable;
  output RDY_axiw0_writeDataByteEnable;

  // value method axiw0_writeLastDataBeat
  output axiw0_writeLastDataBeat;
  output RDY_axiw0_writeLastDataBeat;

  // action method axiw0_writeResponse
  input  [1 : 0] axiw0_writeResponse_responseCode;
  input  axiw0_writeResponse_id;
  input  EN_axiw0_writeResponse;
  output RDY_axiw0_writeResponse;

  // actionvalue method axir0_readAddr
  input  EN_axir0_readAddr;
  output [31 : 0] axir0_readAddr;
  output RDY_axir0_readAddr;

  // value method axir0_readBurstLen
  output [7 : 0] axir0_readBurstLen;
  output RDY_axir0_readBurstLen;

  // value method axir0_readBurstWidth
  output [2 : 0] axir0_readBurstWidth;
  output RDY_axir0_readBurstWidth;

  // value method axir0_readBurstType
  output [1 : 0] axir0_readBurstType;
  output RDY_axir0_readBurstType;

  // value method axir0_readBurstProt
  output [2 : 0] axir0_readBurstProt;
  output RDY_axir0_readBurstProt;

  // value method axir0_readBurstCache
  output [3 : 0] axir0_readBurstCache;
  output RDY_axir0_readBurstCache;

  // value method axir0_readId
  output axir0_readId;
  output RDY_axir0_readId;

  // action method axir0_readData
  input  [63 : 0] axir0_readData_data;
  input  [1 : 0] axir0_readData_resp;
  input  axir0_readData_last;
  input  axir0_readData_id;
  input  EN_axir0_readData;
  output RDY_axir0_readData;

  // actionvalue method axiw1_writeAddr
  input  EN_axiw1_writeAddr;
  output [31 : 0] axiw1_writeAddr;
  output RDY_axiw1_writeAddr;

  // value method axiw1_writeBurstLen
  output [7 : 0] axiw1_writeBurstLen;
  output RDY_axiw1_writeBurstLen;

  // value method axiw1_writeBurstWidth
  output [2 : 0] axiw1_writeBurstWidth;
  output RDY_axiw1_writeBurstWidth;

  // value method axiw1_writeBurstType
  output [1 : 0] axiw1_writeBurstType;
  output RDY_axiw1_writeBurstType;

  // value method axiw1_writeBurstProt
  output [2 : 0] axiw1_writeBurstProt;
  output RDY_axiw1_writeBurstProt;

  // value method axiw1_writeBurstCache
  output [3 : 0] axiw1_writeBurstCache;
  output RDY_axiw1_writeBurstCache;

  // value method axiw1_writeId
  output axiw1_writeId;
  output RDY_axiw1_writeId;

  // actionvalue method axiw1_writeData
  input  EN_axiw1_writeData;
  output [63 : 0] axiw1_writeData;
  output RDY_axiw1_writeData;

  // value method axiw1_writeDataByteEnable
  output [7 : 0] axiw1_writeDataByteEnable;
  output RDY_axiw1_writeDataByteEnable;

  // value method axiw1_writeLastDataBeat
  output axiw1_writeLastDataBeat;
  output RDY_axiw1_writeLastDataBeat;

  // action method axiw1_writeResponse
  input  [1 : 0] axiw1_writeResponse_responseCode;
  input  axiw1_writeResponse_id;
  input  EN_axiw1_writeResponse;
  output RDY_axiw1_writeResponse;

  // actionvalue method axir1_readAddr
  input  EN_axir1_readAddr;
  output [31 : 0] axir1_readAddr;
  output RDY_axir1_readAddr;

  // value method axir1_readBurstLen
  output [7 : 0] axir1_readBurstLen;
  output RDY_axir1_readBurstLen;

  // value method axir1_readBurstWidth
  output [2 : 0] axir1_readBurstWidth;
  output RDY_axir1_readBurstWidth;

  // value method axir1_readBurstType
  output [1 : 0] axir1_readBurstType;
  output RDY_axir1_readBurstType;

  // value method axir1_readBurstProt
  output [2 : 0] axir1_readBurstProt;
  output RDY_axir1_readBurstProt;

  // value method axir1_readBurstCache
  output [3 : 0] axir1_readBurstCache;
  output RDY_axir1_readBurstCache;

  // value method axir1_readId
  output axir1_readId;
  output RDY_axir1_readId;

  // action method axir1_readData
  input  [63 : 0] axir1_readData_data;
  input  [1 : 0] axir1_readData_resp;
  input  axir1_readData_last;
  input  axir1_readData_id;
  input  EN_axir1_readData;
  output RDY_axir1_readData;

  // value method hdmi_hdmi_vsync
  output hdmi_hdmi_vsync;
  output RDY_hdmi_hdmi_vsync;

  // value method hdmi_hdmi_hsync
  output hdmi_hdmi_hsync;
  output RDY_hdmi_hdmi_hsync;

  // value method hdmi_hdmi_de
  output hdmi_hdmi_de;
  output RDY_hdmi_hdmi_de;

  // value method hdmi_hdmi_data
  output [15 : 0] hdmi_hdmi_data;
  output RDY_hdmi_hdmi_data;

  // signals for module outputs
  wire [63 : 0] axiw0_writeData, axiw1_writeData;
  wire [31 : 0] axir0_readAddr,
		axir1_readAddr,
		axiw0_writeAddr,
		axiw1_writeAddr,
		get;
  wire [15 : 0] hdmi_hdmi_data;
  wire [7 : 0] axir0_readBurstLen,
	       axir1_readBurstLen,
	       axiw0_writeBurstLen,
	       axiw0_writeDataByteEnable,
	       axiw1_writeBurstLen,
	       axiw1_writeDataByteEnable;
  wire [3 : 0] axir0_readBurstCache,
	       axir1_readBurstCache,
	       axiw0_writeBurstCache,
	       axiw1_writeBurstCache;
  wire [2 : 0] axir0_readBurstProt,
	       axir0_readBurstWidth,
	       axir1_readBurstProt,
	       axir1_readBurstWidth,
	       axiw0_writeBurstProt,
	       axiw0_writeBurstWidth,
	       axiw1_writeBurstProt,
	       axiw1_writeBurstWidth;
  wire [1 : 0] axir0_readBurstType,
	       axir1_readBurstType,
	       axiw0_writeBurstType,
	       axiw1_writeBurstType;
  wire RDY_axir0_readAddr,
       RDY_axir0_readBurstCache,
       RDY_axir0_readBurstLen,
       RDY_axir0_readBurstProt,
       RDY_axir0_readBurstType,
       RDY_axir0_readBurstWidth,
       RDY_axir0_readData,
       RDY_axir0_readId,
       RDY_axir1_readAddr,
       RDY_axir1_readBurstCache,
       RDY_axir1_readBurstLen,
       RDY_axir1_readBurstProt,
       RDY_axir1_readBurstType,
       RDY_axir1_readBurstWidth,
       RDY_axir1_readData,
       RDY_axir1_readId,
       RDY_axiw0_writeAddr,
       RDY_axiw0_writeBurstCache,
       RDY_axiw0_writeBurstLen,
       RDY_axiw0_writeBurstProt,
       RDY_axiw0_writeBurstType,
       RDY_axiw0_writeBurstWidth,
       RDY_axiw0_writeData,
       RDY_axiw0_writeDataByteEnable,
       RDY_axiw0_writeId,
       RDY_axiw0_writeLastDataBeat,
       RDY_axiw0_writeResponse,
       RDY_axiw1_writeAddr,
       RDY_axiw1_writeBurstCache,
       RDY_axiw1_writeBurstLen,
       RDY_axiw1_writeBurstProt,
       RDY_axiw1_writeBurstType,
       RDY_axiw1_writeBurstWidth,
       RDY_axiw1_writeData,
       RDY_axiw1_writeDataByteEnable,
       RDY_axiw1_writeId,
       RDY_axiw1_writeLastDataBeat,
       RDY_axiw1_writeResponse,
       RDY_error,
       RDY_get,
       RDY_hdmi_hdmi_data,
       RDY_hdmi_hdmi_de,
       RDY_hdmi_hdmi_hsync,
       RDY_hdmi_hdmi_vsync,
       RDY_interrupt,
       RDY_put,
       axir0_readId,
       axir1_readId,
       axiw0_writeId,
       axiw0_writeLastDataBeat,
       axiw1_writeId,
       axiw1_writeLastDataBeat,
       error,
       hdmi_hdmi_de,
       hdmi_hdmi_hsync,
       hdmi_hdmi_vsync,
       interrupt;

  // inlined wires
  wire [63 : 0] dutWrapper_dut_axiMaster_wfifo_wDataIn$wget,
		dutWrapper_dut_frameBuffer_axiMaster_rfifo_wDataOut$wget;
  wire [39 : 0] dutWrapper_dut_axiMaster_raddrFifo_enqw$wget,
		dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_enqw$wget;
  wire [35 : 0] requestFifo_fifo_wDataIn$wget, requestFifo_fifo_wDataOut$wget;
  wire [31 : 0] dutWrapper_dut_fromFifoStatusFifo_wDataOut$wget,
		dutWrapper_dut_readFifo_wDataOut$wget;
  wire dutWrapper_dut_axiMaster_bfifo_pwEnqueue$whas,
       dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas,
       dutWrapper_dut_frameBuffer_axiMaster_bfifo_pwEnqueue$whas,
       dutWrapper_dut_frameBuffer_axiMaster_rfifo_pwDequeue$whas,
       requestFifo_fifo_pwDequeue$whas,
       requestFifo_fifo_pwEnqueue$whas;

  // register dutWrapper_dut_axiMaster_bfifo_rCache
  reg [9 : 0] dutWrapper_dut_axiMaster_bfifo_rCache;
  wire [9 : 0] dutWrapper_dut_axiMaster_bfifo_rCache$D_IN;
  wire dutWrapper_dut_axiMaster_bfifo_rCache$EN;

  // register dutWrapper_dut_axiMaster_bfifo_rRdPtr
  reg [6 : 0] dutWrapper_dut_axiMaster_bfifo_rRdPtr;
  wire [6 : 0] dutWrapper_dut_axiMaster_bfifo_rRdPtr$D_IN;
  wire dutWrapper_dut_axiMaster_bfifo_rRdPtr$EN;

  // register dutWrapper_dut_axiMaster_bfifo_rWrPtr
  reg [6 : 0] dutWrapper_dut_axiMaster_bfifo_rWrPtr;
  wire [6 : 0] dutWrapper_dut_axiMaster_bfifo_rWrPtr$D_IN;
  wire dutWrapper_dut_axiMaster_bfifo_rWrPtr$EN;

  // register dutWrapper_dut_axiMaster_readIdReg
  reg dutWrapper_dut_axiMaster_readIdReg;
  wire dutWrapper_dut_axiMaster_readIdReg$D_IN,
       dutWrapper_dut_axiMaster_readIdReg$EN;

  // register dutWrapper_dut_axiMaster_rfifoWordsAvail
  reg [10 : 0] dutWrapper_dut_axiMaster_rfifoWordsAvail;
  wire [10 : 0] dutWrapper_dut_axiMaster_rfifoWordsAvail$D_IN;
  wire dutWrapper_dut_axiMaster_rfifoWordsAvail$EN;

  // register dutWrapper_dut_axiMaster_rfifo_rCache
  reg [76 : 0] dutWrapper_dut_axiMaster_rfifo_rCache;
  wire [76 : 0] dutWrapper_dut_axiMaster_rfifo_rCache$D_IN;
  wire dutWrapper_dut_axiMaster_rfifo_rCache$EN;

  // register dutWrapper_dut_axiMaster_rfifo_rRdPtr
  reg [11 : 0] dutWrapper_dut_axiMaster_rfifo_rRdPtr;
  wire [11 : 0] dutWrapper_dut_axiMaster_rfifo_rRdPtr$D_IN;
  wire dutWrapper_dut_axiMaster_rfifo_rRdPtr$EN;

  // register dutWrapper_dut_axiMaster_rfifo_rWrPtr
  reg [11 : 0] dutWrapper_dut_axiMaster_rfifo_rWrPtr;
  wire [11 : 0] dutWrapper_dut_axiMaster_rfifo_rWrPtr$D_IN;
  wire dutWrapper_dut_axiMaster_rfifo_rWrPtr$EN;

  // register dutWrapper_dut_axiMaster_wAddrReg
  reg [31 : 0] dutWrapper_dut_axiMaster_wAddrReg;
  wire [31 : 0] dutWrapper_dut_axiMaster_wAddrReg$D_IN;
  wire dutWrapper_dut_axiMaster_wAddrReg$EN;

  // register dutWrapper_dut_axiMaster_wAddressPresented
  reg dutWrapper_dut_axiMaster_wAddressPresented;
  wire dutWrapper_dut_axiMaster_wAddressPresented$D_IN,
       dutWrapper_dut_axiMaster_wAddressPresented$EN;

  // register dutWrapper_dut_axiMaster_wBurstCountReg
  reg [7 : 0] dutWrapper_dut_axiMaster_wBurstCountReg;
  wire [7 : 0] dutWrapper_dut_axiMaster_wBurstCountReg$D_IN;
  wire dutWrapper_dut_axiMaster_wBurstCountReg$EN;

  // register dutWrapper_dut_axiMaster_wfifo_rCache
  reg [71 : 0] dutWrapper_dut_axiMaster_wfifo_rCache;
  wire [71 : 0] dutWrapper_dut_axiMaster_wfifo_rCache$D_IN;
  wire dutWrapper_dut_axiMaster_wfifo_rCache$EN;

  // register dutWrapper_dut_axiMaster_wfifo_rRdPtr
  reg [6 : 0] dutWrapper_dut_axiMaster_wfifo_rRdPtr;
  wire [6 : 0] dutWrapper_dut_axiMaster_wfifo_rRdPtr$D_IN;
  wire dutWrapper_dut_axiMaster_wfifo_rRdPtr$EN;

  // register dutWrapper_dut_axiMaster_wfifo_rWrPtr
  reg [6 : 0] dutWrapper_dut_axiMaster_wfifo_rWrPtr;
  wire [6 : 0] dutWrapper_dut_axiMaster_wfifo_rWrPtr$D_IN;
  wire dutWrapper_dut_axiMaster_wfifo_rWrPtr$EN;

  // register dutWrapper_dut_axiMaster_writeIdReg
  reg dutWrapper_dut_axiMaster_writeIdReg;
  wire dutWrapper_dut_axiMaster_writeIdReg$D_IN,
       dutWrapper_dut_axiMaster_writeIdReg$EN;

  // register dutWrapper_dut_fifoStatusFifo_rCache
  reg [38 : 0] dutWrapper_dut_fifoStatusFifo_rCache;
  wire [38 : 0] dutWrapper_dut_fifoStatusFifo_rCache$D_IN;
  wire dutWrapper_dut_fifoStatusFifo_rCache$EN;

  // register dutWrapper_dut_fifoStatusFifo_rRdPtr
  reg [5 : 0] dutWrapper_dut_fifoStatusFifo_rRdPtr;
  wire [5 : 0] dutWrapper_dut_fifoStatusFifo_rRdPtr$D_IN;
  wire dutWrapper_dut_fifoStatusFifo_rRdPtr$EN;

  // register dutWrapper_dut_fifoStatusFifo_rWrPtr
  reg [5 : 0] dutWrapper_dut_fifoStatusFifo_rWrPtr;
  wire [5 : 0] dutWrapper_dut_fifoStatusFifo_rWrPtr$D_IN;
  wire dutWrapper_dut_fifoStatusFifo_rWrPtr$EN;

  // register dutWrapper_dut_firstReadSent
  reg dutWrapper_dut_firstReadSent;
  wire dutWrapper_dut_firstReadSent$D_IN, dutWrapper_dut_firstReadSent$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache
  reg [9 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache;
  wire [9 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr
  reg [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr;
  wire [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr
  reg [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr;
  wire [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_readIdReg
  reg dutWrapper_dut_frameBuffer_axiMaster_readIdReg;
  wire dutWrapper_dut_frameBuffer_axiMaster_readIdReg$D_IN,
       dutWrapper_dut_frameBuffer_axiMaster_readIdReg$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail
  reg [10 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail;
  wire [10 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache
  reg [76 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache;
  wire [76 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr
  reg [11 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr;
  wire [11 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr
  reg [11 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr;
  wire [11 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_wAddrReg
  reg [31 : 0] dutWrapper_dut_frameBuffer_axiMaster_wAddrReg;
  wire [31 : 0] dutWrapper_dut_frameBuffer_axiMaster_wAddrReg$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_wAddrReg$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented
  reg dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented;
  wire dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented$D_IN,
       dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg
  reg [7 : 0] dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg;
  wire [7 : 0] dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache
  reg [71 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache;
  wire [71 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr
  reg [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr;
  wire [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr
  reg [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr;
  wire [6 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr$D_IN;
  wire dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr$EN;

  // register dutWrapper_dut_frameBuffer_axiMaster_writeIdReg
  reg dutWrapper_dut_frameBuffer_axiMaster_writeIdReg;
  wire dutWrapper_dut_frameBuffer_axiMaster_writeIdReg$D_IN,
       dutWrapper_dut_frameBuffer_axiMaster_writeIdReg$EN;

  // register dutWrapper_dut_frameBuffer_fbc
  reg [67 : 0] dutWrapper_dut_frameBuffer_fbc;
  wire [67 : 0] dutWrapper_dut_frameBuffer_fbc$D_IN;
  wire dutWrapper_dut_frameBuffer_fbc$EN;

  // register dutWrapper_dut_frameBuffer_lineAddrReg
  reg [31 : 0] dutWrapper_dut_frameBuffer_lineAddrReg;
  wire [31 : 0] dutWrapper_dut_frameBuffer_lineAddrReg$D_IN;
  wire dutWrapper_dut_frameBuffer_lineAddrReg$EN;

  // register dutWrapper_dut_frameBuffer_lineCountReg
  reg [11 : 0] dutWrapper_dut_frameBuffer_lineCountReg;
  wire [11 : 0] dutWrapper_dut_frameBuffer_lineCountReg$D_IN;
  wire dutWrapper_dut_frameBuffer_lineCountReg$EN;

  // register dutWrapper_dut_frameBuffer_pixelCountReg
  reg [11 : 0] dutWrapper_dut_frameBuffer_pixelCountReg;
  wire [11 : 0] dutWrapper_dut_frameBuffer_pixelCountReg$D_IN;
  wire dutWrapper_dut_frameBuffer_pixelCountReg$EN;

  // register dutWrapper_dut_frameBuffer_readAddrReg
  reg [31 : 0] dutWrapper_dut_frameBuffer_readAddrReg;
  wire [31 : 0] dutWrapper_dut_frameBuffer_readAddrReg$D_IN;
  wire dutWrapper_dut_frameBuffer_readAddrReg$EN;

  // register dutWrapper_dut_frameBuffer_runningReg
  reg dutWrapper_dut_frameBuffer_runningReg;
  wire dutWrapper_dut_frameBuffer_runningReg$D_IN,
       dutWrapper_dut_frameBuffer_runningReg$EN;

  // register dutWrapper_dut_frameCountReg
  reg [31 : 0] dutWrapper_dut_frameCountReg;
  wire [31 : 0] dutWrapper_dut_frameCountReg$D_IN;
  wire dutWrapper_dut_frameCountReg$EN;

  // register dutWrapper_dut_fromFifoStatusFifo_rCache
  reg [38 : 0] dutWrapper_dut_fromFifoStatusFifo_rCache;
  wire [38 : 0] dutWrapper_dut_fromFifoStatusFifo_rCache$D_IN;
  wire dutWrapper_dut_fromFifoStatusFifo_rCache$EN;

  // register dutWrapper_dut_fromFifoStatusFifo_rRdPtr
  reg [5 : 0] dutWrapper_dut_fromFifoStatusFifo_rRdPtr;
  wire [5 : 0] dutWrapper_dut_fromFifoStatusFifo_rRdPtr$D_IN;
  wire dutWrapper_dut_fromFifoStatusFifo_rRdPtr$EN;

  // register dutWrapper_dut_fromFifoStatusFifo_rWrPtr
  reg [5 : 0] dutWrapper_dut_fromFifoStatusFifo_rWrPtr;
  wire [5 : 0] dutWrapper_dut_fromFifoStatusFifo_rWrPtr$D_IN;
  wire dutWrapper_dut_fromFifoStatusFifo_rWrPtr$EN;

  // register dutWrapper_dut_hdmiTpg_dataCount
  reg [21 : 0] dutWrapper_dut_hdmiTpg_dataCount;
  wire [21 : 0] dutWrapper_dut_hdmiTpg_dataCount$D_IN;
  wire dutWrapper_dut_hdmiTpg_dataCount$EN;

  // register dutWrapper_dut_hdmiTpg_evenOddPixelReg
  reg dutWrapper_dut_hdmiTpg_evenOddPixelReg;
  wire dutWrapper_dut_hdmiTpg_evenOddPixelReg$D_IN,
       dutWrapper_dut_hdmiTpg_evenOddPixelReg$EN;

  // register dutWrapper_dut_hdmiTpg_hsyncReg
  reg dutWrapper_dut_hdmiTpg_hsyncReg;
  wire dutWrapper_dut_hdmiTpg_hsyncReg$D_IN,
       dutWrapper_dut_hdmiTpg_hsyncReg$EN;

  // register dutWrapper_dut_hdmiTpg_lineCount
  reg [10 : 0] dutWrapper_dut_hdmiTpg_lineCount;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_lineCount$D_IN;
  wire dutWrapper_dut_hdmiTpg_lineCount$EN;

  // register dutWrapper_dut_hdmiTpg_patternReg0
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternReg0;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternReg0$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternReg0$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs_1
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_1;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_1$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs_1$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs_2
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_2;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_2$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs_2$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs_3
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_3;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_3$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs_3$EN;

  // register dutWrapper_dut_hdmiTpg_pixelCount
  reg [11 : 0] dutWrapper_dut_hdmiTpg_pixelCount;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_pixelCount$D_IN;
  wire dutWrapper_dut_hdmiTpg_pixelCount$EN;

  // register dutWrapper_dut_hdmiTpg_rgb888StageReg
  reg [26 : 0] dutWrapper_dut_hdmiTpg_rgb888StageReg;
  wire [26 : 0] dutWrapper_dut_hdmiTpg_rgb888StageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_rgb888StageReg$EN;

  // register dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled
  reg dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled;
  wire dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$D_IN,
       dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$EN;

  // register dutWrapper_dut_hdmiTpg_testPatternEnabled
  reg dutWrapper_dut_hdmiTpg_testPatternEnabled;
  wire dutWrapper_dut_hdmiTpg_testPatternEnabled$D_IN,
       dutWrapper_dut_hdmiTpg_testPatternEnabled$EN;

  // register dutWrapper_dut_hdmiTpg_vsyncReg
  reg dutWrapper_dut_hdmiTpg_vsyncReg;
  wire dutWrapper_dut_hdmiTpg_vsyncReg$D_IN,
       dutWrapper_dut_hdmiTpg_vsyncReg$EN;

  // register dutWrapper_dut_hdmiTpg_yuv422StageReg
  reg [18 : 0] dutWrapper_dut_hdmiTpg_yuv422StageReg;
  wire [18 : 0] dutWrapper_dut_hdmiTpg_yuv422StageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_yuv422StageReg$EN;

  // register dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg
  reg [146 : 0] dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg;
  wire [146 : 0] dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$EN;

  // register dutWrapper_dut_hdmiTpg_yuv444StageReg
  reg [26 : 0] dutWrapper_dut_hdmiTpg_yuv444StageReg;
  wire [26 : 0] dutWrapper_dut_hdmiTpg_yuv444StageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_yuv444StageReg$EN;

  // register dutWrapper_dut_numWordsReg
  reg [31 : 0] dutWrapper_dut_numWordsReg;
  wire [31 : 0] dutWrapper_dut_numWordsReg$D_IN;
  wire dutWrapper_dut_numWordsReg$EN;

  // register dutWrapper_dut_rRespFifo_rCache
  reg [9 : 0] dutWrapper_dut_rRespFifo_rCache;
  wire [9 : 0] dutWrapper_dut_rRespFifo_rCache$D_IN;
  wire dutWrapper_dut_rRespFifo_rCache$EN;

  // register dutWrapper_dut_rRespFifo_rRdPtr
  reg [6 : 0] dutWrapper_dut_rRespFifo_rRdPtr;
  wire [6 : 0] dutWrapper_dut_rRespFifo_rRdPtr$D_IN;
  wire dutWrapper_dut_rRespFifo_rRdPtr$EN;

  // register dutWrapper_dut_rRespFifo_rWrPtr
  reg [6 : 0] dutWrapper_dut_rRespFifo_rWrPtr;
  wire [6 : 0] dutWrapper_dut_rRespFifo_rWrPtr$D_IN;
  wire dutWrapper_dut_rRespFifo_rWrPtr$EN;

  // register dutWrapper_dut_readCompletedSent
  reg dutWrapper_dut_readCompletedSent;
  wire dutWrapper_dut_readCompletedSent$D_IN,
       dutWrapper_dut_readCompletedSent$EN;

  // register dutWrapper_dut_readCountReg
  reg [31 : 0] dutWrapper_dut_readCountReg;
  wire [31 : 0] dutWrapper_dut_readCountReg$D_IN;
  wire dutWrapper_dut_readCountReg$EN;

  // register dutWrapper_dut_readFifo_rCache
  reg [39 : 0] dutWrapper_dut_readFifo_rCache;
  wire [39 : 0] dutWrapper_dut_readFifo_rCache$D_IN;
  wire dutWrapper_dut_readFifo_rCache$EN;

  // register dutWrapper_dut_readFifo_rRdPtr
  reg [6 : 0] dutWrapper_dut_readFifo_rRdPtr;
  wire [6 : 0] dutWrapper_dut_readFifo_rRdPtr$D_IN;
  wire dutWrapper_dut_readFifo_rRdPtr$EN;

  // register dutWrapper_dut_readFifo_rWrPtr
  reg [6 : 0] dutWrapper_dut_readFifo_rWrPtr;
  wire [6 : 0] dutWrapper_dut_readFifo_rWrPtr$D_IN;
  wire dutWrapper_dut_readFifo_rWrPtr$EN;

  // register dutWrapper_dut_readTimer_runningReg
  reg dutWrapper_dut_readTimer_runningReg;
  wire dutWrapper_dut_readTimer_runningReg$D_IN,
       dutWrapper_dut_readTimer_runningReg$EN;

  // register dutWrapper_dut_readTimer_timerReg
  reg [31 : 0] dutWrapper_dut_readTimer_timerReg;
  wire [31 : 0] dutWrapper_dut_readTimer_timerReg$D_IN;
  wire dutWrapper_dut_readTimer_timerReg$EN;

  // register dutWrapper_dut_result2Reg
  reg [32 : 0] dutWrapper_dut_result2Reg;
  wire [32 : 0] dutWrapper_dut_result2Reg$D_IN;
  wire dutWrapper_dut_result2Reg$EN;

  // register dutWrapper_dut_resultReg
  reg [32 : 0] dutWrapper_dut_resultReg;
  wire [32 : 0] dutWrapper_dut_resultReg$D_IN;
  wire dutWrapper_dut_resultReg$EN;

  // register dutWrapper_dut_shadowFrameBufferBase
  reg [31 : 0] dutWrapper_dut_shadowFrameBufferBase;
  wire [31 : 0] dutWrapper_dut_shadowFrameBufferBase$D_IN;
  wire dutWrapper_dut_shadowFrameBufferBase$EN;

  // register dutWrapper_dut_testCompletedReg
  reg dutWrapper_dut_testCompletedReg;
  wire dutWrapper_dut_testCompletedReg$D_IN,
       dutWrapper_dut_testCompletedReg$EN;

  // register dutWrapper_dut_testReg
  reg dutWrapper_dut_testReg;
  wire dutWrapper_dut_testReg$D_IN, dutWrapper_dut_testReg$EN;

  // register dutWrapper_dut_testResultReg
  reg [31 : 0] dutWrapper_dut_testResultReg;
  wire [31 : 0] dutWrapper_dut_testResultReg$D_IN;
  wire dutWrapper_dut_testResultReg$EN;

  // register dutWrapper_dut_valueReg
  reg [31 : 0] dutWrapper_dut_valueReg;
  wire [31 : 0] dutWrapper_dut_valueReg$D_IN;
  wire dutWrapper_dut_valueReg$EN;

  // register dutWrapper_dut_vsyncPulseCountReg
  reg [31 : 0] dutWrapper_dut_vsyncPulseCountReg;
  wire [31 : 0] dutWrapper_dut_vsyncPulseCountReg$D_IN;
  wire dutWrapper_dut_vsyncPulseCountReg$EN;

  // register dutWrapper_dut_writeCountReg
  reg [31 : 0] dutWrapper_dut_writeCountReg;
  wire [31 : 0] dutWrapper_dut_writeCountReg$D_IN;
  wire dutWrapper_dut_writeCountReg$EN;

  // register dutWrapper_dut_writeQueuedSent
  reg dutWrapper_dut_writeQueuedSent;
  wire dutWrapper_dut_writeQueuedSent$D_IN, dutWrapper_dut_writeQueuedSent$EN;

  // register dutWrapper_dut_writeTimer_runningReg
  reg dutWrapper_dut_writeTimer_runningReg;
  wire dutWrapper_dut_writeTimer_runningReg$D_IN,
       dutWrapper_dut_writeTimer_runningReg$EN;

  // register dutWrapper_dut_writeTimer_timerReg
  reg [31 : 0] dutWrapper_dut_writeTimer_timerReg;
  wire [31 : 0] dutWrapper_dut_writeTimer_timerReg$D_IN;
  wire dutWrapper_dut_writeTimer_timerReg$EN;

  // register dutWrapper_junkReqReg
  reg [31 : 0] dutWrapper_junkReqReg;
  wire [31 : 0] dutWrapper_junkReqReg$D_IN;
  wire dutWrapper_junkReqReg$EN;

  // register dutWrapper_requestFired
  reg [31 : 0] dutWrapper_requestFired;
  wire [31 : 0] dutWrapper_requestFired$D_IN;
  wire dutWrapper_requestFired$EN;

  // register dutWrapper_requestTimeLimitReg
  reg [15 : 0] dutWrapper_requestTimeLimitReg;
  wire [15 : 0] dutWrapper_requestTimeLimitReg$D_IN;
  wire dutWrapper_requestTimeLimitReg$EN;

  // register dutWrapper_requestTimerReg
  reg [15 : 0] dutWrapper_requestTimerReg;
  wire [15 : 0] dutWrapper_requestTimerReg$D_IN;
  wire dutWrapper_requestTimerReg$EN;

  // register dutWrapper_responseFired
  reg [31 : 0] dutWrapper_responseFired;
  wire [31 : 0] dutWrapper_responseFired$D_IN;
  wire dutWrapper_responseFired$EN;

  // register dutWrapper_responseTimeLimitReg
  reg [15 : 0] dutWrapper_responseTimeLimitReg;
  wire [15 : 0] dutWrapper_responseTimeLimitReg$D_IN;
  wire dutWrapper_responseTimeLimitReg$EN;

  // register dutWrapper_responseTimerReg
  reg [15 : 0] dutWrapper_responseTimerReg;
  wire [15 : 0] dutWrapper_responseTimerReg$D_IN;
  wire dutWrapper_responseTimerReg$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register interruptCleared
  reg interruptCleared;
  wire interruptCleared$D_IN, interruptCleared$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [35 : 0] requestFifo_buff;
  wire [35 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register requestFifo_fifo_rCache
  reg [41 : 0] requestFifo_fifo_rCache;
  wire [41 : 0] requestFifo_fifo_rCache$D_IN;
  wire requestFifo_fifo_rCache$EN;

  // register requestFifo_fifo_rRdPtr
  reg [4 : 0] requestFifo_fifo_rRdPtr;
  wire [4 : 0] requestFifo_fifo_rRdPtr$D_IN;
  wire requestFifo_fifo_rRdPtr$EN;

  // register requestFifo_fifo_rWrPtr
  reg [4 : 0] requestFifo_fifo_rWrPtr;
  wire [4 : 0] requestFifo_fifo_rWrPtr$D_IN;
  wire requestFifo_fifo_rWrPtr$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // register underflowCount
  reg [31 : 0] underflowCount;
  wire [31 : 0] underflowCount$D_IN;
  wire underflowCount$EN;

  // ports of submodule dutWrapper_dut_axiMaster_bfifo_memory
  wire [5 : 0] dutWrapper_dut_axiMaster_bfifo_memory$ADDRA,
	       dutWrapper_dut_axiMaster_bfifo_memory$ADDRB;
  wire [1 : 0] dutWrapper_dut_axiMaster_bfifo_memory$DIA,
	       dutWrapper_dut_axiMaster_bfifo_memory$DIB,
	       dutWrapper_dut_axiMaster_bfifo_memory$DOB;
  wire dutWrapper_dut_axiMaster_bfifo_memory$ENA,
       dutWrapper_dut_axiMaster_bfifo_memory$ENB,
       dutWrapper_dut_axiMaster_bfifo_memory$WEA,
       dutWrapper_dut_axiMaster_bfifo_memory$WEB;

  // ports of submodule dutWrapper_dut_axiMaster_raddrFifo_ff
  wire [39 : 0] dutWrapper_dut_axiMaster_raddrFifo_ff$D_IN,
		dutWrapper_dut_axiMaster_raddrFifo_ff$D_OUT;
  wire dutWrapper_dut_axiMaster_raddrFifo_ff$CLR,
       dutWrapper_dut_axiMaster_raddrFifo_ff$DEQ,
       dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N,
       dutWrapper_dut_axiMaster_raddrFifo_ff$ENQ,
       dutWrapper_dut_axiMaster_raddrFifo_ff$FULL_N;

  // ports of submodule dutWrapper_dut_axiMaster_raddrFifo_firstValid
  wire dutWrapper_dut_axiMaster_raddrFifo_firstValid$D_IN,
       dutWrapper_dut_axiMaster_raddrFifo_firstValid$EN,
       dutWrapper_dut_axiMaster_raddrFifo_firstValid$Q_OUT;

  // ports of submodule dutWrapper_dut_axiMaster_rfifo_memory
  wire [63 : 0] dutWrapper_dut_axiMaster_rfifo_memory$DIA,
		dutWrapper_dut_axiMaster_rfifo_memory$DIB,
		dutWrapper_dut_axiMaster_rfifo_memory$DOB;
  wire [10 : 0] dutWrapper_dut_axiMaster_rfifo_memory$ADDRA,
		dutWrapper_dut_axiMaster_rfifo_memory$ADDRB;
  wire dutWrapper_dut_axiMaster_rfifo_memory$ENA,
       dutWrapper_dut_axiMaster_rfifo_memory$ENB,
       dutWrapper_dut_axiMaster_rfifo_memory$WEA,
       dutWrapper_dut_axiMaster_rfifo_memory$WEB;

  // ports of submodule dutWrapper_dut_axiMaster_wfifo_memory
  wire [63 : 0] dutWrapper_dut_axiMaster_wfifo_memory$DIA,
		dutWrapper_dut_axiMaster_wfifo_memory$DIB,
		dutWrapper_dut_axiMaster_wfifo_memory$DOB;
  wire [5 : 0] dutWrapper_dut_axiMaster_wfifo_memory$ADDRA,
	       dutWrapper_dut_axiMaster_wfifo_memory$ADDRB;
  wire dutWrapper_dut_axiMaster_wfifo_memory$ENA,
       dutWrapper_dut_axiMaster_wfifo_memory$ENB,
       dutWrapper_dut_axiMaster_wfifo_memory$WEA,
       dutWrapper_dut_axiMaster_wfifo_memory$WEB;

  // ports of submodule dutWrapper_dut_commandFifo
  wire [32 : 0] dutWrapper_dut_commandFifo$dD_OUT,
		dutWrapper_dut_commandFifo$sD_IN;
  wire dutWrapper_dut_commandFifo$dDEQ,
       dutWrapper_dut_commandFifo$dEMPTY_N,
       dutWrapper_dut_commandFifo$sENQ,
       dutWrapper_dut_commandFifo$sFULL_N;

  // ports of submodule dutWrapper_dut_fifoStatusFifo_memory
  wire [31 : 0] dutWrapper_dut_fifoStatusFifo_memory$DIA,
		dutWrapper_dut_fifoStatusFifo_memory$DIB;
  wire [4 : 0] dutWrapper_dut_fifoStatusFifo_memory$ADDRA,
	       dutWrapper_dut_fifoStatusFifo_memory$ADDRB;
  wire dutWrapper_dut_fifoStatusFifo_memory$ENA,
       dutWrapper_dut_fifoStatusFifo_memory$ENB,
       dutWrapper_dut_fifoStatusFifo_memory$WEA,
       dutWrapper_dut_fifoStatusFifo_memory$WEB;

  // ports of submodule dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory
  wire [5 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ADDRA,
	       dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ADDRB;
  wire [1 : 0] dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$DIA,
	       dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$DIB;
  wire dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ENA,
       dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ENB,
       dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$WEA,
       dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$WEB;

  // ports of submodule dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff
  wire [39 : 0] dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_IN,
		dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_OUT;
  wire dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$CLR,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$DEQ,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$ENQ,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$FULL_N;

  // ports of submodule dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid
  wire dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$D_IN,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$EN,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$Q_OUT;

  // ports of submodule dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory
  wire [63 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DIA,
		dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DIB,
		dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DOB;
  wire [10 : 0] dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ADDRA,
		dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ADDRB;
  wire dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ENA,
       dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ENB,
       dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$WEA,
       dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$WEB;

  // ports of submodule dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory
  wire [63 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DIA,
		dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DIB,
		dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DOB;
  wire [5 : 0] dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ADDRA,
	       dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ADDRB;
  wire dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ENA,
       dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ENB,
       dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$WEA,
       dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$WEB;

  // ports of submodule dutWrapper_dut_fromFifoStatusFifo_memory
  wire [31 : 0] dutWrapper_dut_fromFifoStatusFifo_memory$DIA,
		dutWrapper_dut_fromFifoStatusFifo_memory$DIB,
		dutWrapper_dut_fromFifoStatusFifo_memory$DOB;
  wire [4 : 0] dutWrapper_dut_fromFifoStatusFifo_memory$ADDRA,
	       dutWrapper_dut_fromFifoStatusFifo_memory$ADDRB;
  wire dutWrapper_dut_fromFifoStatusFifo_memory$ENA,
       dutWrapper_dut_fromFifoStatusFifo_memory$ENB,
       dutWrapper_dut_fromFifoStatusFifo_memory$WEA,
       dutWrapper_dut_fromFifoStatusFifo_memory$WEB;

  // ports of submodule dutWrapper_dut_hdmiTpg_dataFifo
  wire [63 : 0] dutWrapper_dut_hdmiTpg_dataFifo$D_IN,
		dutWrapper_dut_hdmiTpg_dataFifo$D_OUT;
  wire dutWrapper_dut_hdmiTpg_dataFifo$CLR,
       dutWrapper_dut_hdmiTpg_dataFifo$DEQ,
       dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N,
       dutWrapper_dut_hdmiTpg_dataFifo$ENQ,
       dutWrapper_dut_hdmiTpg_dataFifo$FULL_N;

  // ports of submodule dutWrapper_dut_hdmi_reset
  wire dutWrapper_dut_hdmi_reset$OUT_RST;

  // ports of submodule dutWrapper_dut_hsyncPulse
  wire dutWrapper_dut_hsyncPulse$sEN, dutWrapper_dut_hsyncPulse$sRDY;

  // ports of submodule dutWrapper_dut_rRespFifo_memory
  wire [5 : 0] dutWrapper_dut_rRespFifo_memory$ADDRA,
	       dutWrapper_dut_rRespFifo_memory$ADDRB;
  wire [1 : 0] dutWrapper_dut_rRespFifo_memory$DIA,
	       dutWrapper_dut_rRespFifo_memory$DIB,
	       dutWrapper_dut_rRespFifo_memory$DOB;
  wire dutWrapper_dut_rRespFifo_memory$ENA,
       dutWrapper_dut_rRespFifo_memory$ENB,
       dutWrapper_dut_rRespFifo_memory$WEA,
       dutWrapper_dut_rRespFifo_memory$WEB;

  // ports of submodule dutWrapper_dut_readFifo_memory
  wire [31 : 0] dutWrapper_dut_readFifo_memory$DIA,
		dutWrapper_dut_readFifo_memory$DIB,
		dutWrapper_dut_readFifo_memory$DOB;
  wire [5 : 0] dutWrapper_dut_readFifo_memory$ADDRA,
	       dutWrapper_dut_readFifo_memory$ADDRB;
  wire dutWrapper_dut_readFifo_memory$ENA,
       dutWrapper_dut_readFifo_memory$ENB,
       dutWrapper_dut_readFifo_memory$WEA,
       dutWrapper_dut_readFifo_memory$WEB;

  // ports of submodule dutWrapper_dut_rgbrgbFifo
  wire [63 : 0] dutWrapper_dut_rgbrgbFifo$dD_OUT,
		dutWrapper_dut_rgbrgbFifo$sD_IN;
  wire dutWrapper_dut_rgbrgbFifo$dDEQ,
       dutWrapper_dut_rgbrgbFifo$dEMPTY_N,
       dutWrapper_dut_rgbrgbFifo$sENQ,
       dutWrapper_dut_rgbrgbFifo$sFULL_N;

  // ports of submodule dutWrapper_dut_vsyncPulse
  wire dutWrapper_dut_vsyncPulse$dPulse,
       dutWrapper_dut_vsyncPulse$sEN,
       dutWrapper_dut_vsyncPulse$sRDY;

  // ports of submodule requestFifo_fifo_memory
  wire [35 : 0] requestFifo_fifo_memory$DIA,
		requestFifo_fifo_memory$DIB,
		requestFifo_fifo_memory$DOB;
  wire [3 : 0] requestFifo_fifo_memory$ADDRA, requestFifo_fifo_memory$ADDRB;
  wire requestFifo_fifo_memory$ENA,
       requestFifo_fifo_memory$ENB,
       requestFifo_fifo_memory$WEA,
       requestFifo_fifo_memory$WEB;

  // ports of submodule responseFifo_fifo
  reg [35 : 0] responseFifo_fifo$D_IN;
  wire [35 : 0] responseFifo_fifo$D_OUT;
  wire responseFifo_fifo$CLR,
       responseFifo_fifo$DEQ,
       responseFifo_fifo$EMPTY_N,
       responseFifo_fifo$ENQ,
       responseFifo_fifo$FULL_N;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2;
  wire [11 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_dutWrapper_firstReadresponse,
       CAN_FIRE_RL_dutWrapper_readCompletedresponse,
       CAN_FIRE_RL_dutWrapper_writeCompletedresponse,
       CAN_FIRE_RL_dutWrapper_writeQueuedresponse,
       WILL_FIRE_RL_dutWrapper_axiResponseresponse,
       WILL_FIRE_RL_dutWrapper_axirResponseresponse,
       WILL_FIRE_RL_dutWrapper_discardBlockedRequests,
       WILL_FIRE_RL_dutWrapper_discardBlockedResponses,
       WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead,
       WILL_FIRE_RL_dutWrapper_dut_vsync,
       WILL_FIRE_RL_dutWrapper_firstReadresponse,
       WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse,
       WILL_FIRE_RL_dutWrapper_handleconfigurerequest,
       WILL_FIRE_RL_dutWrapper_handleenqrequest,
       WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest,
       WILL_FIRE_RL_dutWrapper_handlereadRangerequest,
       WILL_FIRE_RL_dutWrapper_handlerunTest2request,
       WILL_FIRE_RL_dutWrapper_handlerunTestrequest,
       WILL_FIRE_RL_dutWrapper_handlesetBaserequest,
       WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest,
       WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest,
       WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest,
       WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest,
       WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest,
       WILL_FIRE_RL_dutWrapper_readCompletedresponse,
       WILL_FIRE_RL_dutWrapper_readValueresponse,
       WILL_FIRE_RL_dutWrapper_testCompletedresponse,
       WILL_FIRE_RL_dutWrapper_writeCompletedresponse,
       WILL_FIRE_RL_dutWrapper_writeQueuedresponse;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_responseFifo_fifo$enq_1__VAL_1,
		MUX_responseFifo_fifo$enq_1__VAL_2,
		MUX_responseFifo_fifo$enq_1__VAL_3,
		MUX_responseFifo_fifo$enq_1__VAL_4,
		MUX_responseFifo_fifo$enq_1__VAL_5,
		MUX_responseFifo_fifo$enq_1__VAL_6,
		MUX_responseFifo_fifo$enq_1__VAL_7,
		MUX_responseFifo_fifo$enq_1__VAL_8,
		MUX_responseFifo_fifo$enq_1__VAL_9;
  wire [32 : 0] MUX_dutWrapper_dut_commandFifo$enq_1__VAL_2;
  wire [31 : 0] MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_1,
		MUX_responseFifo_count$write_1__VAL_1;
  wire [26 : 0] MUX_dutWrapper_dut_hdmiTpg_rgb888StageReg$write_1__VAL_1,
		MUX_dutWrapper_dut_hdmiTpg_rgb888StageReg$write_1__VAL_2;
  wire [21 : 0] MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_1,
		MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_2;
  wire [15 : 0] MUX_dutWrapper_requestTimerReg$write_1__VAL_14,
		MUX_dutWrapper_responseTimerReg$write_1__VAL_1;
  wire [11 : 0] MUX_dutWrapper_dut_frameBuffer_lineCountReg$write_1__VAL_2,
		MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__VAL_1,
		MUX_dutWrapper_dut_hdmiTpg_pixelCount$write_1__VAL_1;
  wire [10 : 0] MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__VAL_1;
  wire [7 : 0] MUX_dutWrapper_dut_axiMaster_wBurstCountReg$write_1__VAL_1;
  wire MUX_dutWrapper_dut_commandFifo$enq_1__SEL_1,
       MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_1,
       MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__SEL_1,
       MUX_dutWrapper_dut_frameBuffer_runningReg$write_1__SEL_1,
       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1,
       MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__SEL_1,
       MUX_responseFifo_count$write_1__SEL_1;

  // remaining internal signals
  reg [35 : 0] CASE_requestFifo_fifo_wDataOutwget_BITS_35_TO_ETC__q1;
  reg [31 : 0] IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733,
	       data__h15707;
  wire [143 : 0] IF_dutWrapper_dut_hdmiTpg_rgb888StageReg_25_BI_ETC___d454;
  wire [63 : 0] v__h17695, x__h12890, x__h2043, x__h4266;
  wire [35 : 0] newval__h22666, x__h23074, x__h710;
  wire [31 : 0] _107_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d446,
		_150_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d434,
		_21_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d448,
		_29_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d438,
		_43_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d440,
		_77_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d430,
		_85_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d442,
		lineAddr__h13583,
		result__h23192,
		v___1__h22902,
		v___1__h22916,
		x__h13624,
		x__h19333,
		x__h22767,
		x__h23078,
		x__h7274;
  wire [24 : 0] IF_NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_UL_ETC___d420;
  wire [21 : 0] x__h16317;
  wire [15 : 0] data__h17494,
		x7255_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q2,
		x7318_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q3,
		x7373_MINUS_dutWrapper_dut_hdmiTpg_yuv444Inter_ETC__q4,
		x__h17255,
		x__h17318,
		x__h17320,
		x__h17373,
		x__h17375;
  wire [11 : 0] newPixelCount__h16922,
		pixelCount__h13421,
		x__h12991,
		x__h13608,
		x__h4367;
  wire [10 : 0] _theResult____h13318,
		_theResult____h4694,
		avail___1__h13329,
		avail___1__h4705,
		avail__h13326,
		avail__h4702,
		newLineCount___1__h16889;
  wire [7 : 0] x__h13333, x__h23574, x__h24080, x__h4709;
  wire [6 : 0] x__h10768, x__h2144, x__h3028, x__h7375, x__h8259;
  wire [5 : 0] x__h6496;
  wire [4 : 0] x__h811;
  wire [1 : 0] _theResult____h15706,
	       r__h20614,
	       result__h15889,
	       v__h20081,
	       x__h11551,
	       x__h15873,
	       x__h2927;
  wire NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d405,
       NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823,
       NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525,
       dutWrapper_dut_axiMaster_raddrFifo_ff_i_notEmp_ETC___d773,
       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ETC___d806,
       dutWrapper_dut_hdmiTpg_lineCount_35_ULT_1121___d887,
       dutWrapper_dut_hdmiTpg_lineCount_35_ULT_41___d884,
       dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192_5_ETC___d402,
       dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192___d883,
       dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_2112___d885,
       get_addr_ULT_0x100___d844,
       put_addr_ULT_0x100___d687,
       requestFifo_fifo_rRdPtr_1_PLUS_8_64_EQ_request_ETC___d565,
       x__h15720,
       x__h15750;

  // action method put
  assign RDY_put =
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_64_EQ_request_ETC___d565 ;

  // actionvalue method get
  assign get =
	     get_addr_ULT_0x100___d844 ?
	       IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 :
	       v___1__h22902 ;
  assign RDY_get = 1'd1 ;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = rf$D_OUT_1[0] && !interruptCleared && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // actionvalue method axiw0_writeAddr
  assign axiw0_writeAddr = dutWrapper_dut_axiMaster_wAddrReg ;
  assign RDY_axiw0_writeAddr =
	     dutWrapper_dut_axiMaster_wBurstCountReg != 8'd0 &&
	     !dutWrapper_dut_axiMaster_wAddressPresented ;

  // value method axiw0_writeBurstLen
  assign axiw0_writeBurstLen =
	     dutWrapper_dut_axiMaster_wBurstCountReg - 8'd1 ;
  assign RDY_axiw0_writeBurstLen = 1'd1 ;

  // value method axiw0_writeBurstWidth
  assign axiw0_writeBurstWidth = 3'b011 ;
  assign RDY_axiw0_writeBurstWidth = 1'd1 ;

  // value method axiw0_writeBurstType
  assign axiw0_writeBurstType = 2'b01 ;
  assign RDY_axiw0_writeBurstType = 1'd1 ;

  // value method axiw0_writeBurstProt
  assign axiw0_writeBurstProt = 3'b0 ;
  assign RDY_axiw0_writeBurstProt = 1'd1 ;

  // value method axiw0_writeBurstCache
  assign axiw0_writeBurstCache = 4'b0011 ;
  assign RDY_axiw0_writeBurstCache = 1'd1 ;

  // value method axiw0_writeId
  assign axiw0_writeId = dutWrapper_dut_axiMaster_writeIdReg ;
  assign RDY_axiw0_writeId = 1'd1 ;

  // actionvalue method axiw0_writeData
  assign axiw0_writeData =
	     (dutWrapper_dut_axiMaster_wfifo_rCache[71] &&
	      dutWrapper_dut_axiMaster_wfifo_rCache[70:64] ==
	      dutWrapper_dut_axiMaster_wfifo_rRdPtr) ?
	       dutWrapper_dut_axiMaster_wfifo_rCache[63:0] :
	       dutWrapper_dut_axiMaster_wfifo_memory$DOB ;
  assign RDY_axiw0_writeData =
	     dutWrapper_dut_axiMaster_wfifo_rRdPtr !=
	     dutWrapper_dut_axiMaster_wfifo_rWrPtr &&
	     dutWrapper_dut_axiMaster_wBurstCountReg != 8'd0 ;

  // value method axiw0_writeDataByteEnable
  assign axiw0_writeDataByteEnable = 8'd255 ;
  assign RDY_axiw0_writeDataByteEnable = 1'd1 ;

  // value method axiw0_writeLastDataBeat
  assign axiw0_writeLastDataBeat =
	     dutWrapper_dut_axiMaster_wBurstCountReg == 8'd1 ;
  assign RDY_axiw0_writeLastDataBeat = 1'd1 ;

  // action method axiw0_writeResponse
  assign RDY_axiw0_writeResponse =
	     dutWrapper_dut_axiMaster_bfifo_rRdPtr + 7'd32 !=
	     dutWrapper_dut_axiMaster_bfifo_rWrPtr ;

  // actionvalue method axir0_readAddr
  assign axir0_readAddr =
	     dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N ?
	       dutWrapper_dut_axiMaster_raddrFifo_ff$D_OUT[39:8] :
	       dutWrapper_dut_axiMaster_raddrFifo_enqw$wget[39:8] ;
  assign RDY_axir0_readAddr =
	     dutWrapper_dut_axiMaster_raddrFifo_ff_i_notEmp_ETC___d773 &&
	     dutWrapper_dut_axiMaster_raddrFifo_firstValid$Q_OUT ;

  // value method axir0_readBurstLen
  assign axir0_readBurstLen = x__h23574 - 8'd1 ;
  assign RDY_axir0_readBurstLen =
	     dutWrapper_dut_axiMaster_raddrFifo_firstValid$Q_OUT &&
	     (dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N ||
	      WILL_FIRE_RL_dutWrapper_handlereadRangerequest) ;

  // value method axir0_readBurstWidth
  assign axir0_readBurstWidth = 3'b011 ;
  assign RDY_axir0_readBurstWidth = 1'd1 ;

  // value method axir0_readBurstType
  assign axir0_readBurstType = 2'b01 ;
  assign RDY_axir0_readBurstType = 1'd1 ;

  // value method axir0_readBurstProt
  assign axir0_readBurstProt = 3'b0 ;
  assign RDY_axir0_readBurstProt = 1'd1 ;

  // value method axir0_readBurstCache
  assign axir0_readBurstCache = 4'b0011 ;
  assign RDY_axir0_readBurstCache = 1'd1 ;

  // value method axir0_readId
  assign axir0_readId = dutWrapper_dut_axiMaster_readIdReg ;
  assign RDY_axir0_readId = 1'd1 ;

  // action method axir0_readData
  assign RDY_axir0_readData =
	     dutWrapper_dut_axiMaster_rfifo_rRdPtr + 12'd1024 !=
	     dutWrapper_dut_axiMaster_rfifo_rWrPtr ;

  // actionvalue method axiw1_writeAddr
  assign axiw1_writeAddr = dutWrapper_dut_frameBuffer_axiMaster_wAddrReg ;
  assign RDY_axiw1_writeAddr =
	     dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg != 8'd0 &&
	     !dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented ;

  // value method axiw1_writeBurstLen
  assign axiw1_writeBurstLen =
	     dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg - 8'd1 ;
  assign RDY_axiw1_writeBurstLen = 1'd1 ;

  // value method axiw1_writeBurstWidth
  assign axiw1_writeBurstWidth = 3'b011 ;
  assign RDY_axiw1_writeBurstWidth = 1'd1 ;

  // value method axiw1_writeBurstType
  assign axiw1_writeBurstType = 2'b01 ;
  assign RDY_axiw1_writeBurstType = 1'd1 ;

  // value method axiw1_writeBurstProt
  assign axiw1_writeBurstProt = 3'b0 ;
  assign RDY_axiw1_writeBurstProt = 1'd1 ;

  // value method axiw1_writeBurstCache
  assign axiw1_writeBurstCache = 4'b0011 ;
  assign RDY_axiw1_writeBurstCache = 1'd1 ;

  // value method axiw1_writeId
  assign axiw1_writeId = dutWrapper_dut_frameBuffer_axiMaster_writeIdReg ;
  assign RDY_axiw1_writeId = 1'd1 ;

  // actionvalue method axiw1_writeData
  assign axiw1_writeData =
	     (dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache[71] &&
	      dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache[70:64] ==
	      dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr) ?
	       dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache[63:0] :
	       dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DOB ;
  assign RDY_axiw1_writeData =
	     dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr !=
	     dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr &&
	     dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg != 8'd0 ;

  // value method axiw1_writeDataByteEnable
  assign axiw1_writeDataByteEnable = 8'd255 ;
  assign RDY_axiw1_writeDataByteEnable = 1'd1 ;

  // value method axiw1_writeLastDataBeat
  assign axiw1_writeLastDataBeat =
	     dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg == 8'd1 ;
  assign RDY_axiw1_writeLastDataBeat = 1'd1 ;

  // action method axiw1_writeResponse
  assign RDY_axiw1_writeResponse =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr + 7'd32 !=
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr ;

  // actionvalue method axir1_readAddr
  assign axir1_readAddr =
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N ?
	       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_OUT[39:8] :
	       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_enqw$wget[39:8] ;
  assign RDY_axir1_readAddr =
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ETC___d806 &&
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$Q_OUT ;

  // value method axir1_readBurstLen
  assign axir1_readBurstLen = x__h24080 - 8'd1 ;
  assign RDY_axir1_readBurstLen =
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$Q_OUT &&
	     (dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N ||
	      WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead) ;

  // value method axir1_readBurstWidth
  assign axir1_readBurstWidth = 3'b011 ;
  assign RDY_axir1_readBurstWidth = 1'd1 ;

  // value method axir1_readBurstType
  assign axir1_readBurstType = 2'b01 ;
  assign RDY_axir1_readBurstType = 1'd1 ;

  // value method axir1_readBurstProt
  assign axir1_readBurstProt = 3'b0 ;
  assign RDY_axir1_readBurstProt = 1'd1 ;

  // value method axir1_readBurstCache
  assign axir1_readBurstCache = 4'b0011 ;
  assign RDY_axir1_readBurstCache = 1'd1 ;

  // value method axir1_readId
  assign axir1_readId = dutWrapper_dut_frameBuffer_axiMaster_readIdReg ;
  assign RDY_axir1_readId = 1'd1 ;

  // action method axir1_readData
  assign RDY_axir1_readData =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr + 12'd1024 !=
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr ;

  // value method hdmi_hdmi_vsync
  assign hdmi_hdmi_vsync = dutWrapper_dut_hdmiTpg_yuv422StageReg[18] ;
  assign RDY_hdmi_hdmi_vsync = 1'd1 ;

  // value method hdmi_hdmi_hsync
  assign hdmi_hdmi_hsync = dutWrapper_dut_hdmiTpg_yuv422StageReg[17] ;
  assign RDY_hdmi_hdmi_hsync = 1'd1 ;

  // value method hdmi_hdmi_de
  assign hdmi_hdmi_de = dutWrapper_dut_hdmiTpg_yuv422StageReg[16] ;
  assign RDY_hdmi_hdmi_de = 1'd1 ;

  // value method hdmi_hdmi_data
  assign hdmi_hdmi_data = dutWrapper_dut_hdmiTpg_yuv422StageReg[15:0] ;
  assign RDY_hdmi_hdmi_data = 1'd1 ;

  // submodule dutWrapper_dut_axiMaster_bfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(7'd64)) dutWrapper_dut_axiMaster_bfifo_memory(.CLKA(CLK),
								 .CLKB(CLK),
								 .ADDRA(dutWrapper_dut_axiMaster_bfifo_memory$ADDRA),
								 .ADDRB(dutWrapper_dut_axiMaster_bfifo_memory$ADDRB),
								 .DIA(dutWrapper_dut_axiMaster_bfifo_memory$DIA),
								 .DIB(dutWrapper_dut_axiMaster_bfifo_memory$DIB),
								 .WEA(dutWrapper_dut_axiMaster_bfifo_memory$WEA),
								 .WEB(dutWrapper_dut_axiMaster_bfifo_memory$WEB),
								 .ENA(dutWrapper_dut_axiMaster_bfifo_memory$ENA),
								 .ENB(dutWrapper_dut_axiMaster_bfifo_memory$ENB),
								 .DOA(),
								 .DOB(dutWrapper_dut_axiMaster_bfifo_memory$DOB));

  // submodule dutWrapper_dut_axiMaster_raddrFifo_ff
  SizedFIFO #(.p1width(32'd40),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dutWrapper_dut_axiMaster_raddrFifo_ff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(dutWrapper_dut_axiMaster_raddrFifo_ff$D_IN),
								     .ENQ(dutWrapper_dut_axiMaster_raddrFifo_ff$ENQ),
								     .DEQ(dutWrapper_dut_axiMaster_raddrFifo_ff$DEQ),
								     .CLR(dutWrapper_dut_axiMaster_raddrFifo_ff$CLR),
								     .D_OUT(dutWrapper_dut_axiMaster_raddrFifo_ff$D_OUT),
								     .FULL_N(dutWrapper_dut_axiMaster_raddrFifo_ff$FULL_N),
								     .EMPTY_N(dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N));

  // submodule dutWrapper_dut_axiMaster_raddrFifo_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dutWrapper_dut_axiMaster_raddrFifo_firstValid(.CLK(CLK),
									 .D_IN(dutWrapper_dut_axiMaster_raddrFifo_firstValid$D_IN),
									 .EN(dutWrapper_dut_axiMaster_raddrFifo_firstValid$EN),
									 .Q_OUT(dutWrapper_dut_axiMaster_raddrFifo_firstValid$Q_OUT));

  // submodule dutWrapper_dut_axiMaster_rfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) dutWrapper_dut_axiMaster_rfifo_memory(.CLKA(CLK),
								    .CLKB(CLK),
								    .ADDRA(dutWrapper_dut_axiMaster_rfifo_memory$ADDRA),
								    .ADDRB(dutWrapper_dut_axiMaster_rfifo_memory$ADDRB),
								    .DIA(dutWrapper_dut_axiMaster_rfifo_memory$DIA),
								    .DIB(dutWrapper_dut_axiMaster_rfifo_memory$DIB),
								    .WEA(dutWrapper_dut_axiMaster_rfifo_memory$WEA),
								    .WEB(dutWrapper_dut_axiMaster_rfifo_memory$WEB),
								    .ENA(dutWrapper_dut_axiMaster_rfifo_memory$ENA),
								    .ENB(dutWrapper_dut_axiMaster_rfifo_memory$ENB),
								    .DOA(),
								    .DOB(dutWrapper_dut_axiMaster_rfifo_memory$DOB));

  // submodule dutWrapper_dut_axiMaster_wfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(7'd64)) dutWrapper_dut_axiMaster_wfifo_memory(.CLKA(CLK),
								 .CLKB(CLK),
								 .ADDRA(dutWrapper_dut_axiMaster_wfifo_memory$ADDRA),
								 .ADDRB(dutWrapper_dut_axiMaster_wfifo_memory$ADDRB),
								 .DIA(dutWrapper_dut_axiMaster_wfifo_memory$DIA),
								 .DIB(dutWrapper_dut_axiMaster_wfifo_memory$DIB),
								 .WEA(dutWrapper_dut_axiMaster_wfifo_memory$WEA),
								 .WEB(dutWrapper_dut_axiMaster_wfifo_memory$WEB),
								 .ENA(dutWrapper_dut_axiMaster_wfifo_memory$ENA),
								 .ENB(dutWrapper_dut_axiMaster_wfifo_memory$ENB),
								 .DOA(),
								 .DOB(dutWrapper_dut_axiMaster_wfifo_memory$DOB));

  // submodule dutWrapper_dut_commandFifo
  SyncFIFO #(.dataWidth(32'd33),
	     .depth(32'd2),
	     .indxWidth(32'd1)) dutWrapper_dut_commandFifo(.sCLK(CLK),
							   .dCLK(CLK_hdmi_ref_clk),
							   .sRST(RST_N),
							   .sD_IN(dutWrapper_dut_commandFifo$sD_IN),
							   .sENQ(dutWrapper_dut_commandFifo$sENQ),
							   .dDEQ(dutWrapper_dut_commandFifo$dDEQ),
							   .dD_OUT(dutWrapper_dut_commandFifo$dD_OUT),
							   .sFULL_N(dutWrapper_dut_commandFifo$sFULL_N),
							   .dEMPTY_N(dutWrapper_dut_commandFifo$dEMPTY_N));

  // submodule dutWrapper_dut_fifoStatusFifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(6'd32)) dutWrapper_dut_fifoStatusFifo_memory(.CLKA(CLK),
								.CLKB(CLK),
								.ADDRA(dutWrapper_dut_fifoStatusFifo_memory$ADDRA),
								.ADDRB(dutWrapper_dut_fifoStatusFifo_memory$ADDRB),
								.DIA(dutWrapper_dut_fifoStatusFifo_memory$DIA),
								.DIB(dutWrapper_dut_fifoStatusFifo_memory$DIB),
								.WEA(dutWrapper_dut_fifoStatusFifo_memory$WEA),
								.WEB(dutWrapper_dut_fifoStatusFifo_memory$WEB),
								.ENA(dutWrapper_dut_fifoStatusFifo_memory$ENA),
								.ENB(dutWrapper_dut_fifoStatusFifo_memory$ENB),
								.DOA(),
								.DOB());

  // submodule dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(7'd64)) dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory(.CLKA(CLK),
									     .CLKB(CLK),
									     .ADDRA(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ADDRA),
									     .ADDRB(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ADDRB),
									     .DIA(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$DIA),
									     .DIB(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$DIB),
									     .WEA(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$WEA),
									     .WEB(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$WEB),
									     .ENA(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ENA),
									     .ENB(dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ENB),
									     .DOA(),
									     .DOB());

  // submodule dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff
  SizedFIFO #(.p1width(32'd40),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff(.RST(RST_N),
										 .CLK(CLK),
										 .D_IN(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_IN),
										 .ENQ(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$ENQ),
										 .DEQ(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$DEQ),
										 .CLR(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$CLR),
										 .D_OUT(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_OUT),
										 .FULL_N(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$FULL_N),
										 .EMPTY_N(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N));

  // submodule dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid(.CLK(CLK),
										     .D_IN(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$D_IN),
										     .EN(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$EN),
										     .Q_OUT(dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$Q_OUT));

  // submodule dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory(.CLKA(CLK),
										.CLKB(CLK),
										.ADDRA(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ADDRA),
										.ADDRB(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ADDRB),
										.DIA(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DIA),
										.DIB(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DIB),
										.WEA(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$WEA),
										.WEB(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$WEB),
										.ENA(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ENA),
										.ENB(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ENB),
										.DOA(),
										.DOB(dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DOB));

  // submodule dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(7'd64)) dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory(.CLKA(CLK),
									     .CLKB(CLK),
									     .ADDRA(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ADDRA),
									     .ADDRB(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ADDRB),
									     .DIA(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DIA),
									     .DIB(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DIB),
									     .WEA(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$WEA),
									     .WEB(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$WEB),
									     .ENA(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ENA),
									     .ENB(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ENB),
									     .DOA(),
									     .DOB(dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DOB));

  // submodule dutWrapper_dut_fromFifoStatusFifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(6'd32)) dutWrapper_dut_fromFifoStatusFifo_memory(.CLKA(CLK),
								    .CLKB(CLK),
								    .ADDRA(dutWrapper_dut_fromFifoStatusFifo_memory$ADDRA),
								    .ADDRB(dutWrapper_dut_fromFifoStatusFifo_memory$ADDRB),
								    .DIA(dutWrapper_dut_fromFifoStatusFifo_memory$DIA),
								    .DIB(dutWrapper_dut_fromFifoStatusFifo_memory$DIB),
								    .WEA(dutWrapper_dut_fromFifoStatusFifo_memory$WEA),
								    .WEB(dutWrapper_dut_fromFifoStatusFifo_memory$WEB),
								    .ENA(dutWrapper_dut_fromFifoStatusFifo_memory$ENA),
								    .ENB(dutWrapper_dut_fromFifoStatusFifo_memory$ENB),
								    .DOA(),
								    .DOB(dutWrapper_dut_fromFifoStatusFifo_memory$DOB));

  // submodule dutWrapper_dut_hdmiTpg_dataFifo
  SizedFIFO #(.p1width(32'd64),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) dutWrapper_dut_hdmiTpg_dataFifo(.RST(dutWrapper_dut_hdmi_reset$OUT_RST),
							       .CLK(CLK_hdmi_ref_clk),
							       .D_IN(dutWrapper_dut_hdmiTpg_dataFifo$D_IN),
							       .ENQ(dutWrapper_dut_hdmiTpg_dataFifo$ENQ),
							       .DEQ(dutWrapper_dut_hdmiTpg_dataFifo$DEQ),
							       .CLR(dutWrapper_dut_hdmiTpg_dataFifo$CLR),
							       .D_OUT(dutWrapper_dut_hdmiTpg_dataFifo$D_OUT),
							       .FULL_N(dutWrapper_dut_hdmiTpg_dataFifo$FULL_N),
							       .EMPTY_N(dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N));

  // submodule dutWrapper_dut_hdmi_reset
  SyncResetA #(.RSTDELAY(32'd1)) dutWrapper_dut_hdmi_reset(.CLK(CLK_hdmi_ref_clk),
							   .IN_RST(RST_N),
							   .OUT_RST(dutWrapper_dut_hdmi_reset$OUT_RST));

  // submodule dutWrapper_dut_hsyncPulse
  SyncHandshake dutWrapper_dut_hsyncPulse(.sCLK(CLK_hdmi_ref_clk),
					  .dCLK(CLK),
					  .sRST(dutWrapper_dut_hdmi_reset$OUT_RST),
					  .sEN(dutWrapper_dut_hsyncPulse$sEN),
					  .dPulse(),
					  .sRDY(dutWrapper_dut_hsyncPulse$sRDY));

  // submodule dutWrapper_dut_rRespFifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(7'd64)) dutWrapper_dut_rRespFifo_memory(.CLKA(CLK),
							   .CLKB(CLK),
							   .ADDRA(dutWrapper_dut_rRespFifo_memory$ADDRA),
							   .ADDRB(dutWrapper_dut_rRespFifo_memory$ADDRB),
							   .DIA(dutWrapper_dut_rRespFifo_memory$DIA),
							   .DIB(dutWrapper_dut_rRespFifo_memory$DIB),
							   .WEA(dutWrapper_dut_rRespFifo_memory$WEA),
							   .WEB(dutWrapper_dut_rRespFifo_memory$WEB),
							   .ENA(dutWrapper_dut_rRespFifo_memory$ENA),
							   .ENB(dutWrapper_dut_rRespFifo_memory$ENB),
							   .DOA(),
							   .DOB(dutWrapper_dut_rRespFifo_memory$DOB));

  // submodule dutWrapper_dut_readFifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) dutWrapper_dut_readFifo_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(dutWrapper_dut_readFifo_memory$ADDRA),
							  .ADDRB(dutWrapper_dut_readFifo_memory$ADDRB),
							  .DIA(dutWrapper_dut_readFifo_memory$DIA),
							  .DIB(dutWrapper_dut_readFifo_memory$DIB),
							  .WEA(dutWrapper_dut_readFifo_memory$WEA),
							  .WEB(dutWrapper_dut_readFifo_memory$WEB),
							  .ENA(dutWrapper_dut_readFifo_memory$ENA),
							  .ENB(dutWrapper_dut_readFifo_memory$ENB),
							  .DOA(),
							  .DOB(dutWrapper_dut_readFifo_memory$DOB));

  // submodule dutWrapper_dut_rgbrgbFifo
  SyncFIFO #(.dataWidth(32'd64),
	     .depth(32'd4),
	     .indxWidth(32'd2)) dutWrapper_dut_rgbrgbFifo(.sCLK(CLK),
							  .dCLK(CLK_hdmi_ref_clk),
							  .sRST(RST_N),
							  .sD_IN(dutWrapper_dut_rgbrgbFifo$sD_IN),
							  .sENQ(dutWrapper_dut_rgbrgbFifo$sENQ),
							  .dDEQ(dutWrapper_dut_rgbrgbFifo$dDEQ),
							  .dD_OUT(dutWrapper_dut_rgbrgbFifo$dD_OUT),
							  .sFULL_N(dutWrapper_dut_rgbrgbFifo$sFULL_N),
							  .dEMPTY_N(dutWrapper_dut_rgbrgbFifo$dEMPTY_N));

  // submodule dutWrapper_dut_vsyncPulse
  SyncHandshake dutWrapper_dut_vsyncPulse(.sCLK(CLK_hdmi_ref_clk),
					  .dCLK(CLK),
					  .sRST(dutWrapper_dut_hdmi_reset$OUT_RST),
					  .sEN(dutWrapper_dut_vsyncPulse$sEN),
					  .dPulse(dutWrapper_dut_vsyncPulse$dPulse),
					  .sRDY(dutWrapper_dut_vsyncPulse$sRDY));

  // submodule requestFifo_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd36),
	  .MEMSIZE(5'd16)) requestFifo_fifo_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(requestFifo_fifo_memory$ADDRA),
						   .ADDRB(requestFifo_fifo_memory$ADDRB),
						   .DIA(requestFifo_fifo_memory$DIA),
						   .DIB(requestFifo_fifo_memory$DIB),
						   .WEA(requestFifo_fifo_memory$WEA),
						   .WEB(requestFifo_fifo_memory$WEB),
						   .ENA(requestFifo_fifo_memory$ENA),
						   .ENB(requestFifo_fifo_memory$ENB),
						   .DOA(),
						   .DOB(requestFifo_fifo_memory$DOB));

  // submodule responseFifo_fifo
  SizedFIFO #(.p1width(32'd36),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd0)) responseFifo_fifo(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(responseFifo_fifo$D_IN),
						 .ENQ(responseFifo_fifo$ENQ),
						 .DEQ(responseFifo_fifo$DEQ),
						 .CLR(responseFifo_fifo$CLR),
						 .D_OUT(responseFifo_fifo$D_OUT),
						 .FULL_N(responseFifo_fifo$FULL_N),
						 .EMPTY_N(responseFifo_fifo$EMPTY_N));

  // submodule rf
  RegFile #(.addr_width(32'd12),
	    .data_width(32'd32),
	    .lo(12'd0),
	    .hi(12'h00F)) rf(.CLK(CLK),
			     .ADDR_1(rf$ADDR_1),
			     .ADDR_2(rf$ADDR_2),
			     .ADDR_3(rf$ADDR_3),
			     .ADDR_4(rf$ADDR_4),
			     .ADDR_5(rf$ADDR_5),
			     .ADDR_IN(rf$ADDR_IN),
			     .D_IN(rf$D_IN),
			     .WE(rf$WE),
			     .D_OUT_1(rf$D_OUT_1),
			     .D_OUT_2(rf$D_OUT_2),
			     .D_OUT_3(),
			     .D_OUT_4(),
			     .D_OUT_5());

  // rule RL_dutWrapper_writeQueuedresponse
  assign CAN_FIRE_RL_dutWrapper_writeQueuedresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     !dutWrapper_dut_writeQueuedSent &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_writeQueuedresponse =
	     CAN_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_writeCompletedresponse
  assign CAN_FIRE_RL_dutWrapper_writeCompletedresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     dutWrapper_dut_writeTimer_runningReg &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_writeCompletedresponse =
	     CAN_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_firstReadresponse
  assign CAN_FIRE_RL_dutWrapper_firstReadresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_writeCountReg == dutWrapper_dut_numWordsReg &&
	     !dutWrapper_dut_firstReadSent &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_firstReadresponse =
	     CAN_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_readCompletedresponse
  assign CAN_FIRE_RL_dutWrapper_readCompletedresponse =
	     dutWrapper_dut_testReg &&
	     dutWrapper_dut_readCountReg == dutWrapper_dut_numWordsReg &&
	     !dutWrapper_dut_readCompletedSent &&
	     responseFifo_fifo$FULL_N ;
  assign WILL_FIRE_RL_dutWrapper_readCompletedresponse =
	     CAN_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_handlesetBaserequest
  assign WILL_FIRE_RL_dutWrapper_handlesetBaserequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     dutWrapper_dut_axiMaster_wBurstCountReg == 8'd0 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd0 ;

  // rule RL_dutWrapper_handlesetBoundsrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd1 ;

  // rule RL_dutWrapper_handlesetThresholdrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd2 ;

  // rule RL_dutWrapper_handlesetEnabledrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd3 ;

  // rule RL_dutWrapper_handleenqrequest
  assign WILL_FIRE_RL_dutWrapper_handleenqrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     dutWrapper_dut_axiMaster_wfifo_rRdPtr + 7'd32 !=
	     dutWrapper_dut_axiMaster_wfifo_rWrPtr &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd4 ;

  // rule RL_dutWrapper_handleconfigurerequest
  assign WILL_FIRE_RL_dutWrapper_handleconfigurerequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd6 ;

  // rule RL_dutWrapper_handlereadRangerequest
  assign WILL_FIRE_RL_dutWrapper_handlereadRangerequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     dutWrapper_dut_axiMaster_raddrFifo_ff$FULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd7 ;

  // rule RL_dutWrapper_handlereadFromFifoStatusrequest
  assign WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd8 ;

  // rule RL_dutWrapper_handlerunTestrequest
  assign WILL_FIRE_RL_dutWrapper_handlerunTestrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     !dutWrapper_dut_testReg &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd9 ;

  // rule RL_dutWrapper_testCompletedresponse
  assign WILL_FIRE_RL_dutWrapper_testCompletedresponse =
	     responseFifo_fifo$FULL_N && dutWrapper_dut_testCompletedReg ;

  // rule RL_dutWrapper_handlerunTest2request
  assign WILL_FIRE_RL_dutWrapper_handlerunTest2request =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd10 ;

  // rule RL_dutWrapper_handlesetPatternRegrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd11 ;

  // rule RL_dutWrapper_discardBlockedRequests
  assign WILL_FIRE_RL_dutWrapper_discardBlockedRequests =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     dutWrapper_requestTimerReg > dutWrapper_requestTimeLimitReg &&
	     !(!requestFifo_fifo_rRdPtr_1_PLUS_8_64_EQ_request_ETC___d565) &&
	     !WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlerunTest2request &&
	     !WILL_FIRE_RL_dutWrapper_handlerunTestrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     !WILL_FIRE_RL_dutWrapper_handleconfigurerequest &&
	     !WILL_FIRE_RL_dutWrapper_handleenqrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest &&
	     !WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // rule RL_dutWrapper_discardBlockedResponses
  assign WILL_FIRE_RL_dutWrapper_discardBlockedResponses =
	     dutWrapper_responseTimerReg > dutWrapper_responseTimeLimitReg &&
	     !responseFifo_fifo$FULL_N &&
	     !(!responseFifo_fifo$FULL_N) &&
	     !EN_get ;

  // rule RL_dutWrapper_dut_vsync
  assign WILL_FIRE_RL_dutWrapper_dut_vsync =
	     !dutWrapper_dut_frameBuffer_runningReg &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     !WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ;

  // rule RL_dutWrapper_handlestartFrameBufferrequest
  assign WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd12 ;

  // rule RL_dutWrapper_axiResponseresponse
  assign WILL_FIRE_RL_dutWrapper_axiResponseresponse =
	     dutWrapper_dut_axiMaster_bfifo_rRdPtr !=
	     dutWrapper_dut_axiMaster_bfifo_rWrPtr &&
	     responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_fromFifoStatusresponse
  assign WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse =
	     dutWrapper_dut_fromFifoStatusFifo_rRdPtr !=
	     dutWrapper_dut_fromFifoStatusFifo_rWrPtr &&
	     responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_readValueresponse
  assign WILL_FIRE_RL_dutWrapper_readValueresponse =
	     dutWrapper_dut_readFifo_rRdPtr !=
	     dutWrapper_dut_readFifo_rWrPtr &&
	     responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_axirResponseresponse
  assign WILL_FIRE_RL_dutWrapper_axirResponseresponse =
	     dutWrapper_dut_rRespFifo_rRdPtr !=
	     dutWrapper_dut_rRespFifo_rWrPtr &&
	     responseFifo_fifo$FULL_N &&
	     !WILL_FIRE_RL_dutWrapper_readValueresponse &&
	     !WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse &&
	     !WILL_FIRE_RL_dutWrapper_axiResponseresponse &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_firstReadresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse &&
	     !WILL_FIRE_RL_dutWrapper_writeQueuedresponse &&
	     !WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // rule RL_dutWrapper_dut_frameBuffer_issueRead
  assign WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead =
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$FULL_N &&
	     dutWrapper_dut_frameBuffer_runningReg ;

  // inputs to muxes for submodule ports
  assign MUX_dutWrapper_dut_commandFifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ;
  assign MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64 &&
	     dutWrapper_dut_frameBuffer_lineCountReg != 12'd1 ;
  assign MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     (dutWrapper_dut_frameBuffer_lineCountReg != 12'd1 ||
	      dutWrapper_dut_frameBuffer_pixelCountReg != 12'd64) ;
  assign MUX_dutWrapper_dut_frameBuffer_runningReg$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64 &&
	     dutWrapper_dut_frameBuffer_lineCountReg == 12'd1 ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1 =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     (NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 ||
	      x__h15720) ;
  assign MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__SEL_1 =
	     !dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     (!dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N ||
	      dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192_5_ETC___d402) ;
  assign MUX_responseFifo_count$write_1__SEL_1 =
	     EN_get && !get_addr_ULT_0x100___d844 &&
	     responseFifo_fifo$EMPTY_N ;
  assign MUX_dutWrapper_dut_axiMaster_wBurstCountReg$write_1__VAL_1 =
	     dutWrapper_dut_axiMaster_wBurstCountReg - 8'd1 ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_2 =
	     { 1'd0, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_frameBuffer_lineCountReg$write_1__VAL_2 =
	     dutWrapper_dut_frameBuffer_lineCountReg - 12'd1 ;
  assign MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__VAL_1 =
	     (dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64) ?
	       dutWrapper_dut_frameBuffer_fbc[23:12] :
	       pixelCount__h13421 ;
  assign MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_1 =
	     (dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64) ?
	       lineAddr__h13583 :
	       x__h13624 ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_1 =
	     NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 ?
	       x__h16317 :
	       22'd0 ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_2 =
	     (NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 &&
	      dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N) ?
	       x__h16317 :
	       22'd0 ;
  assign MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__VAL_1 =
	     (dutWrapper_dut_hdmiTpg_pixelCount == 12'd2198) ?
	       ((dutWrapper_dut_hdmiTpg_lineCount == 11'd1123) ?
		  11'd0 :
		  newLineCount___1__h16889) :
	       dutWrapper_dut_hdmiTpg_lineCount ;
  assign MUX_dutWrapper_dut_hdmiTpg_pixelCount$write_1__VAL_1 =
	     (dutWrapper_dut_hdmiTpg_pixelCount == 12'd2198) ?
	       12'd0 :
	       newPixelCount__h16922 ;
  assign MUX_dutWrapper_dut_hdmiTpg_rgb888StageReg$write_1__VAL_1 =
	     { x__h15720,
	       x__h15750,
	       NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823,
	       data__h15707[23:0] } ;
  assign MUX_dutWrapper_dut_hdmiTpg_rgb888StageReg$write_1__VAL_2 =
	     { x__h15720,
	       x__h15750,
	       IF_NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_UL_ETC___d420 } ;
  assign MUX_dutWrapper_requestTimerReg$write_1__VAL_14 =
	     dutWrapper_requestTimerReg + 16'd1 ;
  assign MUX_dutWrapper_responseTimerReg$write_1__VAL_1 =
	     dutWrapper_responseTimerReg + 16'd1 ;
  assign MUX_responseFifo_count$write_1__VAL_1 =
	     (responseFifo_count == 32'd1) ? 32'd0 : x__h19333 ;
  assign MUX_responseFifo_fifo$enq_1__VAL_1 =
	     { 4'd2, dutWrapper_dut_fromFifoStatusFifo_wDataOut$wget } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_2 =
	     { 4'd4, dutWrapper_dut_readFifo_wDataOut$wget } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_3 =
	     { 4'd5, dutWrapper_dut_testResultReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_4 =
	     { 4'd6, dutWrapper_dut_writeTimer_timerReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_5 =
	     { 4'd7, dutWrapper_dut_writeTimer_timerReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_6 =
	     { 4'd8, dutWrapper_dut_readTimer_timerReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_7 =
	     { 4'd9, dutWrapper_dut_readTimer_timerReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_8 = { 34'd1073741824, v__h20081 } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_9 = { 34'h0C0000000, r__h20614 } ;

  // inlined wires
  assign requestFifo_fifo_wDataIn$wget =
	     { put_v[3:0], requestFifo_buff[35:4] } ;
  assign requestFifo_fifo_wDataOut$wget =
	     (requestFifo_fifo_rCache[41] &&
	      requestFifo_fifo_rCache[40:36] == requestFifo_fifo_rRdPtr) ?
	       requestFifo_fifo_rCache[35:0] :
	       requestFifo_fifo_memory$DOB ;
  assign dutWrapper_dut_axiMaster_wfifo_wDataIn$wget =
	     { 32'd0, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign dutWrapper_dut_axiMaster_raddrFifo_enqw$wget =
	     { requestFifo_fifo_wDataOut$wget[31:0], 8'd8 } ;
  assign dutWrapper_dut_fromFifoStatusFifo_wDataOut$wget =
	     (dutWrapper_dut_fromFifoStatusFifo_rCache[38] &&
	      dutWrapper_dut_fromFifoStatusFifo_rCache[37:32] ==
	      dutWrapper_dut_fromFifoStatusFifo_rRdPtr) ?
	       dutWrapper_dut_fromFifoStatusFifo_rCache[31:0] :
	       dutWrapper_dut_fromFifoStatusFifo_memory$DOB ;
  assign dutWrapper_dut_readFifo_wDataOut$wget =
	     (dutWrapper_dut_readFifo_rCache[39] &&
	      dutWrapper_dut_readFifo_rCache[38:32] ==
	      dutWrapper_dut_readFifo_rRdPtr) ?
	       dutWrapper_dut_readFifo_rCache[31:0] :
	       dutWrapper_dut_readFifo_memory$DOB ;
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_enqw$wget =
	     { dutWrapper_dut_frameBuffer_readAddrReg, 8'd32 } ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_wDataOut$wget =
	     (dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache[76] &&
	      dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache[75:64] ==
	      dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr) ?
	       dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache[63:0] :
	       dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DOB ;
  assign requestFifo_fifo_pwDequeue$whas =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ||
	     WILL_FIRE_RL_dutWrapper_handlerunTest2request ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedRequests ||
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     CASE_requestFifo_fifo_wDataOutwget_BITS_35_TO_ETC__q1[35:32] >
	     4'd13 ;
  assign requestFifo_fifo_pwEnqueue$whas =
	     EN_put && !put_addr_ULT_0x100___d687 &&
	     requestFifo_count == 32'd1 ;
  assign dutWrapper_dut_axiMaster_bfifo_pwEnqueue$whas =
	     EN_axiw0_writeResponse &&
	     axiw0_writeResponse_responseCode != 2'd0 ;
  assign dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas =
	     dutWrapper_dut_axiMaster_rfifo_rRdPtr !=
	     dutWrapper_dut_axiMaster_rfifo_rWrPtr &&
	     dutWrapper_dut_readFifo_rRdPtr + 7'd32 !=
	     dutWrapper_dut_readFifo_rWrPtr ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_pwEnqueue$whas =
	     EN_axiw1_writeResponse &&
	     axiw1_writeResponse_responseCode != 2'd0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_pwDequeue$whas =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr !=
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr &&
	     dutWrapper_dut_rgbrgbFifo$sFULL_N ;

  // register dutWrapper_dut_axiMaster_bfifo_rCache
  assign dutWrapper_dut_axiMaster_bfifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_axiMaster_bfifo_rWrPtr, x__h2927 } ;
  assign dutWrapper_dut_axiMaster_bfifo_rCache$EN =
	     dutWrapper_dut_axiMaster_bfifo_pwEnqueue$whas ;

  // register dutWrapper_dut_axiMaster_bfifo_rRdPtr
  assign dutWrapper_dut_axiMaster_bfifo_rRdPtr$D_IN = x__h3028 ;
  assign dutWrapper_dut_axiMaster_bfifo_rRdPtr$EN =
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ;

  // register dutWrapper_dut_axiMaster_bfifo_rWrPtr
  assign dutWrapper_dut_axiMaster_bfifo_rWrPtr$D_IN =
	     dutWrapper_dut_axiMaster_bfifo_rWrPtr + 7'd1 ;
  assign dutWrapper_dut_axiMaster_bfifo_rWrPtr$EN =
	     dutWrapper_dut_axiMaster_bfifo_pwEnqueue$whas ;

  // register dutWrapper_dut_axiMaster_readIdReg
  assign dutWrapper_dut_axiMaster_readIdReg$D_IN =
	     dutWrapper_dut_axiMaster_readIdReg + 1'd1 ;
  assign dutWrapper_dut_axiMaster_readIdReg$EN = EN_axir0_readAddr ;

  // register dutWrapper_dut_axiMaster_rfifoWordsAvail
  assign dutWrapper_dut_axiMaster_rfifoWordsAvail$D_IN =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ?
	       avail__h4702 :
	       _theResult____h4694 ;
  assign dutWrapper_dut_axiMaster_rfifoWordsAvail$EN = 1'd1 ;

  // register dutWrapper_dut_axiMaster_rfifo_rCache
  assign dutWrapper_dut_axiMaster_rfifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_axiMaster_rfifo_rWrPtr, x__h4266 } ;
  assign dutWrapper_dut_axiMaster_rfifo_rCache$EN = EN_axir0_readData ;

  // register dutWrapper_dut_axiMaster_rfifo_rRdPtr
  assign dutWrapper_dut_axiMaster_rfifo_rRdPtr$D_IN = x__h4367 ;
  assign dutWrapper_dut_axiMaster_rfifo_rRdPtr$EN =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ;

  // register dutWrapper_dut_axiMaster_rfifo_rWrPtr
  assign dutWrapper_dut_axiMaster_rfifo_rWrPtr$D_IN =
	     dutWrapper_dut_axiMaster_rfifo_rWrPtr + 12'd1 ;
  assign dutWrapper_dut_axiMaster_rfifo_rWrPtr$EN = EN_axir0_readData ;

  // register dutWrapper_dut_axiMaster_wAddrReg
  assign dutWrapper_dut_axiMaster_wAddrReg$D_IN =
	     requestFifo_fifo_wDataOut$wget[31:0] ;
  assign dutWrapper_dut_axiMaster_wAddrReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // register dutWrapper_dut_axiMaster_wAddressPresented
  assign dutWrapper_dut_axiMaster_wAddressPresented$D_IN =
	     !WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;
  assign dutWrapper_dut_axiMaster_wAddressPresented$EN =
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ||
	     EN_axiw0_writeAddr ;

  // register dutWrapper_dut_axiMaster_wBurstCountReg
  assign dutWrapper_dut_axiMaster_wBurstCountReg$D_IN =
	     EN_axiw0_writeData ?
	       MUX_dutWrapper_dut_axiMaster_wBurstCountReg$write_1__VAL_1 :
	       8'd8 ;
  assign dutWrapper_dut_axiMaster_wBurstCountReg$EN =
	     EN_axiw0_writeData ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // register dutWrapper_dut_axiMaster_wfifo_rCache
  assign dutWrapper_dut_axiMaster_wfifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_axiMaster_wfifo_rWrPtr, x__h2043 } ;
  assign dutWrapper_dut_axiMaster_wfifo_rCache$EN =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ;

  // register dutWrapper_dut_axiMaster_wfifo_rRdPtr
  assign dutWrapper_dut_axiMaster_wfifo_rRdPtr$D_IN = x__h2144 ;
  assign dutWrapper_dut_axiMaster_wfifo_rRdPtr$EN = EN_axiw0_writeData ;

  // register dutWrapper_dut_axiMaster_wfifo_rWrPtr
  assign dutWrapper_dut_axiMaster_wfifo_rWrPtr$D_IN =
	     dutWrapper_dut_axiMaster_wfifo_rWrPtr + 7'd1 ;
  assign dutWrapper_dut_axiMaster_wfifo_rWrPtr$EN =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ;

  // register dutWrapper_dut_axiMaster_writeIdReg
  assign dutWrapper_dut_axiMaster_writeIdReg$D_IN =
	     dutWrapper_dut_axiMaster_writeIdReg + 1'd1 ;
  assign dutWrapper_dut_axiMaster_writeIdReg$EN = EN_axiw0_writeAddr ;

  // register dutWrapper_dut_fifoStatusFifo_rCache
  assign dutWrapper_dut_fifoStatusFifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_fifoStatusFifo_rWrPtr, 32'd0 } ;
  assign dutWrapper_dut_fifoStatusFifo_rCache$EN = 1'b0 ;

  // register dutWrapper_dut_fifoStatusFifo_rRdPtr
  assign dutWrapper_dut_fifoStatusFifo_rRdPtr$D_IN =
	     dutWrapper_dut_fifoStatusFifo_rRdPtr + 6'd1 ;
  assign dutWrapper_dut_fifoStatusFifo_rRdPtr$EN = 1'b0 ;

  // register dutWrapper_dut_fifoStatusFifo_rWrPtr
  assign dutWrapper_dut_fifoStatusFifo_rWrPtr$D_IN =
	     dutWrapper_dut_fifoStatusFifo_rWrPtr + 6'd1 ;
  assign dutWrapper_dut_fifoStatusFifo_rWrPtr$EN = 1'b0 ;

  // register dutWrapper_dut_firstReadSent
  assign dutWrapper_dut_firstReadSent$D_IN = 1'd1 ;
  assign dutWrapper_dut_firstReadSent$EN =
	     WILL_FIRE_RL_dutWrapper_firstReadresponse ;

  // register dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache$D_IN =
	     { 1'd1,
	       dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr,
	       x__h11551 } ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache$EN =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_pwEnqueue$whas ;

  // register dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr + 7'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr$EN = 1'b0 ;

  // register dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr + 7'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr$EN =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_pwEnqueue$whas ;

  // register dutWrapper_dut_frameBuffer_axiMaster_readIdReg
  assign dutWrapper_dut_frameBuffer_axiMaster_readIdReg$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_readIdReg + 1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_readIdReg$EN =
	     EN_axir1_readAddr ;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_pwDequeue$whas ?
	       avail__h13326 :
	       _theResult____h13318 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail$EN = 1'd1 ;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache$D_IN =
	     { 1'd1,
	       dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr,
	       x__h12890 } ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache$EN =
	     EN_axir1_readData ;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr$D_IN = x__h12991 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr$EN =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_pwDequeue$whas ;

  // register dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr + 12'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr$EN =
	     EN_axir1_readData ;

  // register dutWrapper_dut_frameBuffer_axiMaster_wAddrReg
  assign dutWrapper_dut_frameBuffer_axiMaster_wAddrReg$D_IN = 32'h0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wAddrReg$EN = 1'b0 ;

  // register dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented
  assign dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented$D_IN = 1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented$EN =
	     EN_axiw1_writeAddr ;

  // register dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg
  assign dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg - 8'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg$EN =
	     EN_axiw1_writeData ;

  // register dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache$D_IN =
	     { 1'd1,
	       dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr,
	       64'd0 } ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache$EN = 1'b0 ;

  // register dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr$D_IN = x__h10768 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr$EN =
	     EN_axiw1_writeData ;

  // register dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr + 7'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr$EN = 1'b0 ;

  // register dutWrapper_dut_frameBuffer_axiMaster_writeIdReg
  assign dutWrapper_dut_frameBuffer_axiMaster_writeIdReg$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_writeIdReg + 1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_writeIdReg$EN =
	     EN_axiw1_writeAddr ;

  // register dutWrapper_dut_frameBuffer_fbc
  assign dutWrapper_dut_frameBuffer_fbc$D_IN =
	     { dutWrapper_dut_shadowFrameBufferBase, 36'h438780E00 } ;
  assign dutWrapper_dut_frameBuffer_fbc$EN =
	     MUX_dutWrapper_dut_commandFifo$enq_1__SEL_1 ;

  // register dutWrapper_dut_frameBuffer_lineAddrReg
  assign dutWrapper_dut_frameBuffer_lineAddrReg$D_IN =
	     MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_1 ?
	       lineAddr__h13583 :
	       dutWrapper_dut_shadowFrameBufferBase ;
  assign dutWrapper_dut_frameBuffer_lineAddrReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64 &&
	     dutWrapper_dut_frameBuffer_lineCountReg != 12'd1 ||
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ;

  // register dutWrapper_dut_frameBuffer_lineCountReg
  assign dutWrapper_dut_frameBuffer_lineCountReg$D_IN =
	     MUX_dutWrapper_dut_commandFifo$enq_1__SEL_1 ?
	       12'd1080 :
	       MUX_dutWrapper_dut_frameBuffer_lineCountReg$write_1__VAL_2 ;
  assign dutWrapper_dut_frameBuffer_lineCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64 ;

  // register dutWrapper_dut_frameBuffer_pixelCountReg
  assign dutWrapper_dut_frameBuffer_pixelCountReg$D_IN =
	     MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__VAL_1 :
	       12'd1920 ;
  assign dutWrapper_dut_frameBuffer_pixelCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     (dutWrapper_dut_frameBuffer_lineCountReg != 12'd1 ||
	      dutWrapper_dut_frameBuffer_pixelCountReg != 12'd64) ||
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ;

  // register dutWrapper_dut_frameBuffer_readAddrReg
  assign dutWrapper_dut_frameBuffer_readAddrReg$D_IN =
	     MUX_dutWrapper_dut_frameBuffer_pixelCountReg$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_1 :
	       dutWrapper_dut_shadowFrameBufferBase ;
  assign dutWrapper_dut_frameBuffer_readAddrReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     (dutWrapper_dut_frameBuffer_lineCountReg != 12'd1 ||
	      dutWrapper_dut_frameBuffer_pixelCountReg != 12'd64) ||
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ;

  // register dutWrapper_dut_frameBuffer_runningReg
  assign dutWrapper_dut_frameBuffer_runningReg$D_IN =
	     !MUX_dutWrapper_dut_frameBuffer_runningReg$write_1__SEL_1 ;
  assign dutWrapper_dut_frameBuffer_runningReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64 &&
	     dutWrapper_dut_frameBuffer_lineCountReg == 12'd1 ||
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ;

  // register dutWrapper_dut_frameCountReg
  assign dutWrapper_dut_frameCountReg$D_IN =
	     dutWrapper_dut_frameCountReg + 32'd1 ;
  assign dutWrapper_dut_frameCountReg$EN =
	     MUX_dutWrapper_dut_commandFifo$enq_1__SEL_1 ;

  // register dutWrapper_dut_fromFifoStatusFifo_rCache
  assign dutWrapper_dut_fromFifoStatusFifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_fromFifoStatusFifo_rWrPtr, 32'd0 } ;
  assign dutWrapper_dut_fromFifoStatusFifo_rCache$EN = 1'b0 ;

  // register dutWrapper_dut_fromFifoStatusFifo_rRdPtr
  assign dutWrapper_dut_fromFifoStatusFifo_rRdPtr$D_IN = x__h6496 ;
  assign dutWrapper_dut_fromFifoStatusFifo_rRdPtr$EN =
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ;

  // register dutWrapper_dut_fromFifoStatusFifo_rWrPtr
  assign dutWrapper_dut_fromFifoStatusFifo_rWrPtr$D_IN =
	     dutWrapper_dut_fromFifoStatusFifo_rWrPtr + 6'd1 ;
  assign dutWrapper_dut_fromFifoStatusFifo_rWrPtr$EN = 1'b0 ;

  // register dutWrapper_dut_hdmiTpg_dataCount
  assign dutWrapper_dut_hdmiTpg_dataCount$D_IN =
	     MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_1 :
	       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_2 ;
  assign dutWrapper_dut_hdmiTpg_dataCount$EN =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     (NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 ||
	      x__h15720) ||
	     !dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d405 ;

  // register dutWrapper_dut_hdmiTpg_evenOddPixelReg
  assign dutWrapper_dut_hdmiTpg_evenOddPixelReg$D_IN =
	     !dutWrapper_dut_hdmiTpg_evenOddPixelReg ;
  assign dutWrapper_dut_hdmiTpg_evenOddPixelReg$EN =
	     dutWrapper_dut_hdmiTpg_yuv444StageReg[24] ;

  // register dutWrapper_dut_hdmiTpg_hsyncReg
  assign dutWrapper_dut_hdmiTpg_hsyncReg$D_IN = x__h15750 ;
  assign dutWrapper_dut_hdmiTpg_hsyncReg$EN = 1'b1 ;

  // register dutWrapper_dut_hdmiTpg_lineCount
  assign dutWrapper_dut_hdmiTpg_lineCount$D_IN =
	     MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__VAL_1 :
	       MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__VAL_1 ;
  assign dutWrapper_dut_hdmiTpg_lineCount$EN =
	     !dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     (!dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N ||
	      dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192_5_ETC___d402) ||
	     dutWrapper_dut_hdmiTpg_testPatternEnabled ;

  // register dutWrapper_dut_hdmiTpg_patternReg0
  assign dutWrapper_dut_hdmiTpg_patternReg0$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[31:0] ;
  assign dutWrapper_dut_hdmiTpg_patternReg0$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     !dutWrapper_dut_commandFifo$dD_OUT[32] ;

  // register dutWrapper_dut_hdmiTpg_patternRegs
  assign dutWrapper_dut_hdmiTpg_patternRegs$D_IN =
	     dutWrapper_dut_hdmiTpg_patternReg0 ;
  assign dutWrapper_dut_hdmiTpg_patternRegs$EN =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs_1
  assign dutWrapper_dut_hdmiTpg_patternRegs_1$D_IN = 32'h00FF0000 ;
  assign dutWrapper_dut_hdmiTpg_patternRegs_1$EN =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs_2
  assign dutWrapper_dut_hdmiTpg_patternRegs_2$D_IN = 32'h0000FF00 ;
  assign dutWrapper_dut_hdmiTpg_patternRegs_2$EN =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs_3
  assign dutWrapper_dut_hdmiTpg_patternRegs_3$D_IN = 32'h000000FF ;
  assign dutWrapper_dut_hdmiTpg_patternRegs_3$EN =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_pixelCount
  assign dutWrapper_dut_hdmiTpg_pixelCount$D_IN =
	     MUX_dutWrapper_dut_hdmiTpg_lineCount$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_hdmiTpg_pixelCount$write_1__VAL_1 :
	       MUX_dutWrapper_dut_hdmiTpg_pixelCount$write_1__VAL_1 ;
  assign dutWrapper_dut_hdmiTpg_pixelCount$EN =
	     !dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     (!dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N ||
	      dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192_5_ETC___d402) ||
	     dutWrapper_dut_hdmiTpg_testPatternEnabled ;

  // register dutWrapper_dut_hdmiTpg_rgb888StageReg
  assign dutWrapper_dut_hdmiTpg_rgb888StageReg$D_IN =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled ?
	       MUX_dutWrapper_dut_hdmiTpg_rgb888StageReg$write_1__VAL_1 :
	       MUX_dutWrapper_dut_hdmiTpg_rgb888StageReg$write_1__VAL_2 ;
  assign dutWrapper_dut_hdmiTpg_rgb888StageReg$EN = 1'b1 ;

  // register dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled
  assign dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[0] ;
  assign dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[32] ;

  // register dutWrapper_dut_hdmiTpg_testPatternEnabled
  assign dutWrapper_dut_hdmiTpg_testPatternEnabled$D_IN =
	     dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled ;
  assign dutWrapper_dut_hdmiTpg_testPatternEnabled$EN =
	     1'b1 && dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_vsyncReg
  assign dutWrapper_dut_hdmiTpg_vsyncReg$D_IN = x__h15720 ;
  assign dutWrapper_dut_hdmiTpg_vsyncReg$EN = 1'b1 ;

  // register dutWrapper_dut_hdmiTpg_yuv422StageReg
  assign dutWrapper_dut_hdmiTpg_yuv422StageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_yuv444StageReg[26:24], data__h17494 } ;
  assign dutWrapper_dut_hdmiTpg_yuv422StageReg$EN = 1'd1 ;

  // register dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg
  assign dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_rgb888StageReg[26:24],
	       IF_dutWrapper_dut_hdmiTpg_rgb888StageReg_25_BI_ETC___d454 } ;
  assign dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$EN = 1'd1 ;

  // register dutWrapper_dut_hdmiTpg_yuv444StageReg
  assign dutWrapper_dut_hdmiTpg_yuv444StageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[146:144],
	       dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[144] ?
		 { x7255_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q2[15:8],
		   x7318_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q3[15:8],
		   x7373_MINUS_dutWrapper_dut_hdmiTpg_yuv444Inter_ETC__q4[15:8] } :
		 24'd0 } ;
  assign dutWrapper_dut_hdmiTpg_yuv444StageReg$EN = 1'd1 ;

  // register dutWrapper_dut_numWordsReg
  assign dutWrapper_dut_numWordsReg$D_IN = 32'h0 ;
  assign dutWrapper_dut_numWordsReg$EN = 1'b0 ;

  // register dutWrapper_dut_rRespFifo_rCache
  assign dutWrapper_dut_rRespFifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_rRespFifo_rWrPtr, 2'd0 } ;
  assign dutWrapper_dut_rRespFifo_rCache$EN = 1'b0 ;

  // register dutWrapper_dut_rRespFifo_rRdPtr
  assign dutWrapper_dut_rRespFifo_rRdPtr$D_IN = x__h8259 ;
  assign dutWrapper_dut_rRespFifo_rRdPtr$EN =
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ;

  // register dutWrapper_dut_rRespFifo_rWrPtr
  assign dutWrapper_dut_rRespFifo_rWrPtr$D_IN =
	     dutWrapper_dut_rRespFifo_rWrPtr + 7'd1 ;
  assign dutWrapper_dut_rRespFifo_rWrPtr$EN = 1'b0 ;

  // register dutWrapper_dut_readCompletedSent
  assign dutWrapper_dut_readCompletedSent$D_IN = 1'd1 ;
  assign dutWrapper_dut_readCompletedSent$EN =
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ;

  // register dutWrapper_dut_readCountReg
  assign dutWrapper_dut_readCountReg$D_IN = 32'h0 ;
  assign dutWrapper_dut_readCountReg$EN = 1'b0 ;

  // register dutWrapper_dut_readFifo_rCache
  assign dutWrapper_dut_readFifo_rCache$D_IN =
	     { 1'd1, dutWrapper_dut_readFifo_rWrPtr, x__h7274 } ;
  assign dutWrapper_dut_readFifo_rCache$EN =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ;

  // register dutWrapper_dut_readFifo_rRdPtr
  assign dutWrapper_dut_readFifo_rRdPtr$D_IN = x__h7375 ;
  assign dutWrapper_dut_readFifo_rRdPtr$EN =
	     WILL_FIRE_RL_dutWrapper_readValueresponse ;

  // register dutWrapper_dut_readFifo_rWrPtr
  assign dutWrapper_dut_readFifo_rWrPtr$D_IN =
	     dutWrapper_dut_readFifo_rWrPtr + 7'd1 ;
  assign dutWrapper_dut_readFifo_rWrPtr$EN =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ;

  // register dutWrapper_dut_readTimer_runningReg
  assign dutWrapper_dut_readTimer_runningReg$D_IN = 1'd0 ;
  assign dutWrapper_dut_readTimer_runningReg$EN =
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ;

  // register dutWrapper_dut_readTimer_timerReg
  assign dutWrapper_dut_readTimer_timerReg$D_IN =
	     dutWrapper_dut_readTimer_timerReg + 32'd1 ;
  assign dutWrapper_dut_readTimer_timerReg$EN =
	     dutWrapper_dut_readTimer_runningReg &&
	     !WILL_FIRE_RL_dutWrapper_readCompletedresponse ;

  // register dutWrapper_dut_result2Reg
  assign dutWrapper_dut_result2Reg$D_IN = 33'h0 ;
  assign dutWrapper_dut_result2Reg$EN = 1'b0 ;

  // register dutWrapper_dut_resultReg
  assign dutWrapper_dut_resultReg$D_IN = 33'h0 ;
  assign dutWrapper_dut_resultReg$EN = 1'b0 ;

  // register dutWrapper_dut_shadowFrameBufferBase
  assign dutWrapper_dut_shadowFrameBufferBase$D_IN =
	     requestFifo_fifo_wDataOut$wget[31:0] ;
  assign dutWrapper_dut_shadowFrameBufferBase$EN =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ;

  // register dutWrapper_dut_testCompletedReg
  assign dutWrapper_dut_testCompletedReg$D_IN = 1'd0 ;
  assign dutWrapper_dut_testCompletedReg$EN =
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // register dutWrapper_dut_testReg
  assign dutWrapper_dut_testReg$D_IN = 1'd0 ;
  assign dutWrapper_dut_testReg$EN =
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ;

  // register dutWrapper_dut_testResultReg
  assign dutWrapper_dut_testResultReg$D_IN = 32'h0 ;
  assign dutWrapper_dut_testResultReg$EN = 1'b0 ;

  // register dutWrapper_dut_valueReg
  assign dutWrapper_dut_valueReg$D_IN = 32'h0 ;
  assign dutWrapper_dut_valueReg$EN = 1'b0 ;

  // register dutWrapper_dut_vsyncPulseCountReg
  assign dutWrapper_dut_vsyncPulseCountReg$D_IN =
	     dutWrapper_dut_vsyncPulseCountReg + 32'd1 ;
  assign dutWrapper_dut_vsyncPulseCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse ;

  // register dutWrapper_dut_writeCountReg
  assign dutWrapper_dut_writeCountReg$D_IN = 32'h0 ;
  assign dutWrapper_dut_writeCountReg$EN = 1'b0 ;

  // register dutWrapper_dut_writeQueuedSent
  assign dutWrapper_dut_writeQueuedSent$D_IN = 1'd1 ;
  assign dutWrapper_dut_writeQueuedSent$EN =
	     WILL_FIRE_RL_dutWrapper_writeQueuedresponse ;

  // register dutWrapper_dut_writeTimer_runningReg
  assign dutWrapper_dut_writeTimer_runningReg$D_IN = 1'd0 ;
  assign dutWrapper_dut_writeTimer_runningReg$EN =
	     WILL_FIRE_RL_dutWrapper_writeCompletedresponse ;

  // register dutWrapper_dut_writeTimer_timerReg
  assign dutWrapper_dut_writeTimer_timerReg$D_IN =
	     dutWrapper_dut_writeTimer_timerReg + 32'd1 ;
  assign dutWrapper_dut_writeTimer_timerReg$EN =
	     dutWrapper_dut_writeTimer_runningReg &&
	     !WILL_FIRE_RL_dutWrapper_writeCompletedresponse ;

  // register dutWrapper_junkReqReg
  assign dutWrapper_junkReqReg$D_IN = dutWrapper_junkReqReg + 32'd1 ;
  assign dutWrapper_junkReqReg$EN =
	     NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 &&
	     CASE_requestFifo_fifo_wDataOutwget_BITS_35_TO_ETC__q1[35:32] >
	     4'd13 ;

  // register dutWrapper_requestFired
  assign dutWrapper_requestFired$D_IN = dutWrapper_requestFired + 32'd1 ;
  assign dutWrapper_requestFired$EN =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ||
	     WILL_FIRE_RL_dutWrapper_handlerunTest2request ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ;

  // register dutWrapper_requestTimeLimitReg
  assign dutWrapper_requestTimeLimitReg$D_IN = 16'h0 ;
  assign dutWrapper_requestTimeLimitReg$EN = 1'b0 ;

  // register dutWrapper_requestTimerReg
  assign dutWrapper_requestTimerReg$D_IN =
	     (WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	      WILL_FIRE_RL_dutWrapper_discardBlockedRequests ||
	      WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ||
	      WILL_FIRE_RL_dutWrapper_handlerunTest2request ||
	      WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	      WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	      WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	      WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	      WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetBaserequest) ?
	       16'd0 :
	       MUX_dutWrapper_requestTimerReg$write_1__VAL_14 ;
  assign dutWrapper_requestTimerReg$EN =
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_64_EQ_request_ETC___d565 ||
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ||
	     WILL_FIRE_RL_dutWrapper_handlerunTest2request ||
	     WILL_FIRE_RL_dutWrapper_handlerunTestrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadFromFifoStatusrequest ||
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest ||
	     WILL_FIRE_RL_dutWrapper_handleconfigurerequest ||
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetEnabledrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetThresholdrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBoundsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetBaserequest ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedRequests ;

  // register dutWrapper_responseFired
  assign dutWrapper_responseFired$D_IN = dutWrapper_responseFired + 32'd1 ;
  assign dutWrapper_responseFired$EN =
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_firstReadresponse ||
	     WILL_FIRE_RL_dutWrapper_writeCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_writeQueuedresponse ||
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_readValueresponse ||
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ||
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ||
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ;

  // register dutWrapper_responseTimeLimitReg
  assign dutWrapper_responseTimeLimitReg$D_IN = 16'h0 ;
  assign dutWrapper_responseTimeLimitReg$EN = 1'b0 ;

  // register dutWrapper_responseTimerReg
  assign dutWrapper_responseTimerReg$D_IN =
	     (!responseFifo_fifo$FULL_N) ?
	       MUX_dutWrapper_responseTimerReg$write_1__VAL_1 :
	       16'd0 ;
  assign dutWrapper_responseTimerReg$EN =
	     !responseFifo_fifo$FULL_N ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedResponses ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN = MUX_responseFifo_count$write_1__SEL_1 ;

  // register interruptCleared
  assign interruptCleared$D_IN = !(!interrupted) ;
  assign interruptCleared$EN =
	     EN_put && put_addr == 12'h0 && put_v[0] && interrupted ||
	     !interrupted ;

  // register interrupted
  assign interrupted$D_IN = responseFifo_fifo$EMPTY_N ;
  assign interrupted$EN = 1'd1 ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN = EN_put && !put_addr_ULT_0x100___d687 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { put_v, requestFifo_buff[35:32] } :
	       newval__h22666 ;
  assign requestFifo_buff$EN = EN_put && !put_addr_ULT_0x100___d687 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h22767 ;
  assign requestFifo_count$EN = EN_put && !put_addr_ULT_0x100___d687 ;

  // register requestFifo_fifo_rCache
  assign requestFifo_fifo_rCache$D_IN =
	     { 1'd1, requestFifo_fifo_rWrPtr, x__h710 } ;
  assign requestFifo_fifo_rCache$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register requestFifo_fifo_rRdPtr
  assign requestFifo_fifo_rRdPtr$D_IN = x__h811 ;
  assign requestFifo_fifo_rRdPtr$EN = requestFifo_fifo_pwDequeue$whas ;

  // register requestFifo_fifo_rWrPtr
  assign requestFifo_fifo_rWrPtr$D_IN = requestFifo_fifo_rWrPtr + 5'd1 ;
  assign requestFifo_fifo_rWrPtr$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     MUX_responseFifo_count$write_1__SEL_1 ?
	       MUX_responseFifo_count$write_1__VAL_1 :
	       MUX_responseFifo_count$write_1__VAL_1 ;
  assign responseFifo_count$EN =
	     EN_get && !get_addr_ULT_0x100___d844 &&
	     responseFifo_fifo$EMPTY_N ||
	     WILL_FIRE_RL_dutWrapper_discardBlockedResponses &&
	     responseFifo_fifo$EMPTY_N ;

  // register underflowCount
  assign underflowCount$D_IN = underflowCount + 32'd1 ;
  assign underflowCount$EN =
	     EN_get && !get_addr_ULT_0x100___d844 &&
	     !responseFifo_fifo$EMPTY_N ;

  // submodule dutWrapper_dut_axiMaster_bfifo_memory
  assign dutWrapper_dut_axiMaster_bfifo_memory$ADDRA =
	     dutWrapper_dut_axiMaster_bfifo_rWrPtr[5:0] ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$ADDRB =
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ?
	       x__h3028[5:0] :
	       dutWrapper_dut_axiMaster_bfifo_rRdPtr[5:0] ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$DIA = x__h2927 ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$DIB =
	     2'b10 /* unspecified value */  ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$WEA =
	     dutWrapper_dut_axiMaster_bfifo_pwEnqueue$whas ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_axiMaster_bfifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_axiMaster_raddrFifo_ff
  assign dutWrapper_dut_axiMaster_raddrFifo_ff$D_IN =
	     dutWrapper_dut_axiMaster_raddrFifo_enqw$wget ;
  assign dutWrapper_dut_axiMaster_raddrFifo_ff$ENQ =
	     WILL_FIRE_RL_dutWrapper_handlereadRangerequest &&
	     (!EN_axir0_readAddr ||
	      dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N) ;
  assign dutWrapper_dut_axiMaster_raddrFifo_ff$DEQ =
	     EN_axir0_readAddr &&
	     dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N ;
  assign dutWrapper_dut_axiMaster_raddrFifo_ff$CLR = 1'b0 ;

  // submodule dutWrapper_dut_axiMaster_raddrFifo_firstValid
  assign dutWrapper_dut_axiMaster_raddrFifo_firstValid$D_IN = 1'd1 ;
  assign dutWrapper_dut_axiMaster_raddrFifo_firstValid$EN =
	     EN_axir0_readAddr ;

  // submodule dutWrapper_dut_axiMaster_rfifo_memory
  assign dutWrapper_dut_axiMaster_rfifo_memory$ADDRA =
	     dutWrapper_dut_axiMaster_rfifo_rWrPtr[10:0] ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$ADDRB =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ?
	       x__h4367[10:0] :
	       dutWrapper_dut_axiMaster_rfifo_rRdPtr[10:0] ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$DIA = x__h4266 ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$WEA = EN_axir0_readData ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_axiMaster_rfifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_axiMaster_wfifo_memory
  assign dutWrapper_dut_axiMaster_wfifo_memory$ADDRA =
	     dutWrapper_dut_axiMaster_wfifo_rWrPtr[5:0] ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$ADDRB =
	     EN_axiw0_writeData ?
	       x__h2144[5:0] :
	       dutWrapper_dut_axiMaster_wfifo_rRdPtr[5:0] ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$DIA = x__h2043 ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$WEA =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_axiMaster_wfifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_commandFifo
  assign dutWrapper_dut_commandFifo$sD_IN =
	     MUX_dutWrapper_dut_commandFifo$enq_1__SEL_1 ?
	       33'h155555554 :
	       MUX_dutWrapper_dut_commandFifo$enq_1__VAL_2 ;
  assign dutWrapper_dut_commandFifo$sENQ =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_vsyncPulse$dPulse &&
	     dutWrapper_dut_shadowFrameBufferBase != 32'd0 ||
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ;
  assign dutWrapper_dut_commandFifo$dDEQ =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[32] ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     !dutWrapper_dut_commandFifo$dD_OUT[32] ;

  // submodule dutWrapper_dut_fifoStatusFifo_memory
  assign dutWrapper_dut_fifoStatusFifo_memory$ADDRA =
	     dutWrapper_dut_fifoStatusFifo_rWrPtr[4:0] ;
  assign dutWrapper_dut_fifoStatusFifo_memory$ADDRB =
	     dutWrapper_dut_fifoStatusFifo_rRdPtr[4:0] ;
  assign dutWrapper_dut_fifoStatusFifo_memory$DIA = 32'd0 ;
  assign dutWrapper_dut_fifoStatusFifo_memory$DIB =
	     32'hAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_fifoStatusFifo_memory$WEA = 1'b0 ;
  assign dutWrapper_dut_fifoStatusFifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_fifoStatusFifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_fifoStatusFifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ADDRA =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr[5:0] ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ADDRB =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr[5:0] ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$DIA = x__h11551 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$DIB =
	     2'b10 /* unspecified value */  ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$WEA =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_pwEnqueue$whas ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_bfifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_enqw$wget ;
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$ENQ =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	     (!EN_axir1_readAddr ||
	      dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N) ;
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$DEQ =
	     EN_axir1_readAddr &&
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N ;
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$CLR = 1'b0 ;

  // submodule dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$D_IN =
	     1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_firstValid$EN =
	     EN_axir1_readAddr ;

  // submodule dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ADDRA =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr[10:0] ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ADDRB =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_pwDequeue$whas ?
	       x__h12991[10:0] :
	       dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr[10:0] ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DIA = x__h12890 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$WEA =
	     EN_axir1_readData ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_rfifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ADDRA =
	     dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr[5:0] ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ADDRB =
	     EN_axiw1_writeData ?
	       x__h10768[5:0] :
	       dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr[5:0] ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DIA = 64'd0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$DIB =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$WEA = 1'b0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_frameBuffer_axiMaster_wfifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_fromFifoStatusFifo_memory
  assign dutWrapper_dut_fromFifoStatusFifo_memory$ADDRA =
	     dutWrapper_dut_fromFifoStatusFifo_rWrPtr[4:0] ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$ADDRB =
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ?
	       x__h6496[4:0] :
	       dutWrapper_dut_fromFifoStatusFifo_rRdPtr[4:0] ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$DIA = 32'd0 ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$DIB =
	     32'hAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$WEA = 1'b0 ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_fromFifoStatusFifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_hdmiTpg_dataFifo
  assign dutWrapper_dut_hdmiTpg_dataFifo$D_IN =
	     dutWrapper_dut_rgbrgbFifo$dD_OUT ;
  assign dutWrapper_dut_hdmiTpg_dataFifo$ENQ =
	     dutWrapper_dut_rgbrgbFifo$dEMPTY_N &&
	     dutWrapper_dut_hdmiTpg_dataFifo$FULL_N ;
  assign dutWrapper_dut_hdmiTpg_dataFifo$DEQ =
	     !dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	     NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 &&
	     dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N &&
	     dutWrapper_dut_hdmiTpg_dataCount[0] ;
  assign dutWrapper_dut_hdmiTpg_dataFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_hsyncPulse
  assign dutWrapper_dut_hsyncPulse$sEN =
	     dutWrapper_dut_hsyncPulse$sRDY &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // submodule dutWrapper_dut_rRespFifo_memory
  assign dutWrapper_dut_rRespFifo_memory$ADDRA =
	     dutWrapper_dut_rRespFifo_rWrPtr[5:0] ;
  assign dutWrapper_dut_rRespFifo_memory$ADDRB =
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ?
	       x__h8259[5:0] :
	       dutWrapper_dut_rRespFifo_rRdPtr[5:0] ;
  assign dutWrapper_dut_rRespFifo_memory$DIA = 2'd0 ;
  assign dutWrapper_dut_rRespFifo_memory$DIB =
	     2'b10 /* unspecified value */  ;
  assign dutWrapper_dut_rRespFifo_memory$WEA = 1'b0 ;
  assign dutWrapper_dut_rRespFifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_rRespFifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_rRespFifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_readFifo_memory
  assign dutWrapper_dut_readFifo_memory$ADDRA =
	     dutWrapper_dut_readFifo_rWrPtr[5:0] ;
  assign dutWrapper_dut_readFifo_memory$ADDRB =
	     WILL_FIRE_RL_dutWrapper_readValueresponse ?
	       x__h7375[5:0] :
	       dutWrapper_dut_readFifo_rRdPtr[5:0] ;
  assign dutWrapper_dut_readFifo_memory$DIA = x__h7274 ;
  assign dutWrapper_dut_readFifo_memory$DIB =
	     32'hAAAAAAAA /* unspecified value */  ;
  assign dutWrapper_dut_readFifo_memory$WEA =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ;
  assign dutWrapper_dut_readFifo_memory$WEB = 1'd0 ;
  assign dutWrapper_dut_readFifo_memory$ENA = 1'd1 ;
  assign dutWrapper_dut_readFifo_memory$ENB = 1'd1 ;

  // submodule dutWrapper_dut_rgbrgbFifo
  assign dutWrapper_dut_rgbrgbFifo$sD_IN =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_wDataOut$wget ;
  assign dutWrapper_dut_rgbrgbFifo$sENQ =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_pwDequeue$whas ;
  assign dutWrapper_dut_rgbrgbFifo$dDEQ =
	     dutWrapper_dut_rgbrgbFifo$dEMPTY_N &&
	     dutWrapper_dut_hdmiTpg_dataFifo$FULL_N ;

  // submodule dutWrapper_dut_vsyncPulse
  assign dutWrapper_dut_vsyncPulse$sEN =
	     dutWrapper_dut_vsyncPulse$sRDY &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // submodule requestFifo_fifo_memory
  assign requestFifo_fifo_memory$ADDRA = requestFifo_fifo_rWrPtr[3:0] ;
  assign requestFifo_fifo_memory$ADDRB =
	     requestFifo_fifo_pwDequeue$whas ?
	       x__h811[3:0] :
	       requestFifo_fifo_rRdPtr[3:0] ;
  assign requestFifo_fifo_memory$DIA = x__h710 ;
  assign requestFifo_fifo_memory$DIB =
	     36'hAAAAAAAAA /* unspecified value */  ;
  assign requestFifo_fifo_memory$WEA = requestFifo_fifo_pwEnqueue$whas ;
  assign requestFifo_fifo_memory$WEB = 1'd0 ;
  assign requestFifo_fifo_memory$ENA = 1'd1 ;
  assign requestFifo_fifo_memory$ENB = 1'd1 ;

  // submodule responseFifo_fifo
  always@(WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_1 or
	  WILL_FIRE_RL_dutWrapper_readValueresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_dutWrapper_testCompletedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_3 or
	  WILL_FIRE_RL_dutWrapper_writeQueuedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_4 or
	  WILL_FIRE_RL_dutWrapper_writeCompletedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_5 or
	  WILL_FIRE_RL_dutWrapper_firstReadresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_6 or
	  WILL_FIRE_RL_dutWrapper_readCompletedresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_7 or
	  WILL_FIRE_RL_dutWrapper_axiResponseresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_8 or
	  WILL_FIRE_RL_dutWrapper_axirResponseresponse or
	  MUX_responseFifo_fifo$enq_1__VAL_9)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_1;
      WILL_FIRE_RL_dutWrapper_readValueresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_dutWrapper_testCompletedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_3;
      WILL_FIRE_RL_dutWrapper_writeQueuedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_4;
      WILL_FIRE_RL_dutWrapper_writeCompletedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_5;
      WILL_FIRE_RL_dutWrapper_firstReadresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_6;
      WILL_FIRE_RL_dutWrapper_readCompletedresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_7;
      WILL_FIRE_RL_dutWrapper_axiResponseresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_8;
      WILL_FIRE_RL_dutWrapper_axirResponseresponse:
	  responseFifo_fifo$D_IN = MUX_responseFifo_fifo$enq_1__VAL_9;
      default: responseFifo_fifo$D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign responseFifo_fifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_fromFifoStatusresponse ||
	     WILL_FIRE_RL_dutWrapper_readValueresponse ||
	     WILL_FIRE_RL_dutWrapper_testCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_writeQueuedresponse ||
	     WILL_FIRE_RL_dutWrapper_writeCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_firstReadresponse ||
	     WILL_FIRE_RL_dutWrapper_readCompletedresponse ||
	     WILL_FIRE_RL_dutWrapper_axiResponseresponse ||
	     WILL_FIRE_RL_dutWrapper_axirResponseresponse ;
  assign responseFifo_fifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_discardBlockedResponses &&
	     responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd1 ||
	     EN_get && !get_addr_ULT_0x100___d844 &&
	     responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd1 ;
  assign responseFifo_fifo$CLR = 1'b0 ;

  // submodule rf
  assign rf$ADDR_1 = 12'h004 ;
  assign rf$ADDR_2 = get_addr ;
  assign rf$ADDR_3 = 12'h0 ;
  assign rf$ADDR_4 = 12'h0 ;
  assign rf$ADDR_5 = 12'h0 ;
  assign rf$ADDR_IN = put_addr ;
  assign rf$D_IN = put_v ;
  assign rf$WE = EN_put && put_addr_ULT_0x100___d687 ;

  // remaining internal signals
  assign IF_NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_UL_ETC___d420 =
	     (NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 &&
	      dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N) ?
	       { NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823,
		 dutWrapper_dut_hdmiTpg_dataCount[0] ?
		   dutWrapper_dut_hdmiTpg_dataFifo$D_OUT[55:32] :
		   dutWrapper_dut_hdmiTpg_dataFifo$D_OUT[23:0] } :
	       { dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N &&
		 NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823,
		 (NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 &&
		  !dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N) ?
		   24'd461325 :
		   24'd0 } ;
  assign IF_dutWrapper_dut_hdmiTpg_rgb888StageReg_25_BI_ETC___d454 =
	     dutWrapper_dut_hdmiTpg_rgb888StageReg[24] ?
	       { _77_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d430[15:0],
		 _150_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d434[15:0],
		 _29_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d438[15:0],
		 _43_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d440[15:0],
		 _85_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d442[15:0],
		 1'd0,
		 dutWrapper_dut_hdmiTpg_rgb888StageReg[23:16],
		 8'd0,
		 dutWrapper_dut_hdmiTpg_rgb888StageReg[7:0],
		 7'd0,
		 _107_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d446[15:0],
		 _21_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d448[15:0] } :
	       144'd0 ;
  assign NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d405 =
	     NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 &&
	     dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N ||
	     (dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192_5_ETC___d402 ||
	      dutWrapper_dut_hdmiTpg_dataFifo$EMPTY_N) &&
	     x__h15720 ;
  assign NOT_dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_1_ETC___d823 =
	     !dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192___d883 &&
	     dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_2112___d885 &&
	     !dutWrapper_dut_hdmiTpg_lineCount_35_ULT_41___d884 &&
	     dutWrapper_dut_hdmiTpg_lineCount_35_ULT_1121___d887 ;
  assign NOT_requestFifo_fifo_rRdPtr_1_EQ_requestFifo_f_ETC___d525 =
	     requestFifo_fifo_rRdPtr != requestFifo_fifo_rWrPtr ;
  assign _107_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d446 =
	     16'd107 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[15:8] } ;
  assign _150_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d434 =
	     16'd150 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[15:8] } ;
  assign _21_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d448 =
	     16'd21 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[23:16] } ;
  assign _29_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d438 =
	     16'd29 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[23:16] } ;
  assign _43_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d440 =
	     16'd43 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[7:0] } ;
  assign _77_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d430 =
	     16'd77 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[7:0] } ;
  assign _85_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d442 =
	     16'd85 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[15:8] } ;
  assign _theResult____h13318 =
	     EN_axir1_readAddr ?
	       avail___1__h13329 :
	       dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail ;
  assign _theResult____h15706 =
	     (dutWrapper_dut_hdmiTpg_pixelCount < 12'd1152) ? 2'd0 : 2'd1 ;
  assign _theResult____h4694 =
	     EN_axir0_readAddr ?
	       avail___1__h4705 :
	       dutWrapper_dut_axiMaster_rfifoWordsAvail ;
  assign avail___1__h13329 =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail -
	     { 3'd0, x__h13333 } ;
  assign avail___1__h4705 =
	     dutWrapper_dut_axiMaster_rfifoWordsAvail - { 3'd0, x__h4709 } ;
  assign avail__h13326 = _theResult____h13318 + 11'd1 ;
  assign avail__h4702 = _theResult____h4694 + 11'd1 ;
  assign data__h17494 =
	     { dutWrapper_dut_hdmiTpg_evenOddPixelReg ?
		 dutWrapper_dut_hdmiTpg_yuv444StageReg[15:8] :
		 dutWrapper_dut_hdmiTpg_yuv444StageReg[7:0],
	       dutWrapper_dut_hdmiTpg_yuv444StageReg[23:16] } ;
  assign dutWrapper_dut_axiMaster_raddrFifo_ff_i_notEmp_ETC___d773 =
	     (dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N ||
	      WILL_FIRE_RL_dutWrapper_handlereadRangerequest) &&
	     { 3'd0, x__h23574 } <= dutWrapper_dut_axiMaster_rfifoWordsAvail ;
  assign dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ETC___d806 =
	     (dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N ||
	      WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead) &&
	     { 3'd0, x__h24080 } <=
	     dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail ;
  assign dutWrapper_dut_hdmiTpg_lineCount_35_ULT_1121___d887 =
	     dutWrapper_dut_hdmiTpg_lineCount < 11'd1121 ;
  assign dutWrapper_dut_hdmiTpg_lineCount_35_ULT_41___d884 =
	     dutWrapper_dut_hdmiTpg_lineCount < 11'd41 ;
  assign dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192_5_ETC___d402 =
	     dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192___d883 ||
	     !dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_2112___d885 ||
	     dutWrapper_dut_hdmiTpg_lineCount_35_ULT_41___d884 ||
	     !dutWrapper_dut_hdmiTpg_lineCount_35_ULT_1121___d887 ;
  assign dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_192___d883 =
	     dutWrapper_dut_hdmiTpg_pixelCount < 12'd192 ;
  assign dutWrapper_dut_hdmiTpg_pixelCount_37_ULT_2112___d885 =
	     dutWrapper_dut_hdmiTpg_pixelCount < 12'd2112 ;
  assign get_addr_ULT_0x100___d844 = get_addr < 12'h100 ;
  assign lineAddr__h13583 =
	     dutWrapper_dut_frameBuffer_lineAddrReg + { 20'd0, x__h13608 } ;
  assign newLineCount___1__h16889 = dutWrapper_dut_hdmiTpg_lineCount + 11'd1 ;
  assign newPixelCount__h16922 = dutWrapper_dut_hdmiTpg_pixelCount + 12'd1 ;
  assign newval__h22666 = { put_v, requestFifo_buff[35:32] } ;
  assign pixelCount__h13421 =
	     dutWrapper_dut_frameBuffer_pixelCountReg - 12'd64 ;
  assign put_addr_ULT_0x100___d687 = put_addr < 12'h100 ;
  assign r__h20614 =
	     (dutWrapper_dut_rRespFifo_rCache[9] &&
	      dutWrapper_dut_rRespFifo_rCache[8:2] ==
	      dutWrapper_dut_rRespFifo_rRdPtr) ?
	       dutWrapper_dut_rRespFifo_rCache[1:0] :
	       dutWrapper_dut_rRespFifo_memory$DOB ;
  assign requestFifo_fifo_rRdPtr_1_PLUS_8_64_EQ_request_ETC___d565 =
	     requestFifo_fifo_rRdPtr + 5'd8 == requestFifo_fifo_rWrPtr ;
  assign result__h15889 = { 1'd1, _theResult____h15706[0] } ;
  assign result__h23192 =
	     { rf$D_OUT_2[31:17],
	       responseFifo_fifo$FULL_N,
	       rf$D_OUT_2[15:1],
	       interrupted } ;
  assign v___1__h22902 =
	     responseFifo_fifo$EMPTY_N ? v___1__h22916 : 32'h050A050A ;
  assign v___1__h22916 =
	     responseFifo_fifo$EMPTY_N ? x__h23074[31:0] : 32'h050A050A ;
  assign v__h17695 =
	     (dutWrapper_dut_axiMaster_rfifo_rCache[76] &&
	      dutWrapper_dut_axiMaster_rfifo_rCache[75:64] ==
	      dutWrapper_dut_axiMaster_rfifo_rRdPtr) ?
	       dutWrapper_dut_axiMaster_rfifo_rCache[63:0] :
	       dutWrapper_dut_axiMaster_rfifo_memory$DOB ;
  assign v__h20081 =
	     (dutWrapper_dut_axiMaster_bfifo_rCache[9] &&
	      dutWrapper_dut_axiMaster_bfifo_rCache[8:2] ==
	      dutWrapper_dut_axiMaster_bfifo_rRdPtr) ?
	       dutWrapper_dut_axiMaster_bfifo_rCache[1:0] :
	       dutWrapper_dut_axiMaster_bfifo_memory$DOB ;
  assign x7255_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q2 =
	     x__h17255 +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[111:96] ;
  assign x7318_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q3 =
	     x__h17318 +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[63:48] ;
  assign x7373_MINUS_dutWrapper_dut_hdmiTpg_yuv444Inter_ETC__q4 =
	     x__h17373 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[15:0] ;
  assign x__h10768 =
	     dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr + 7'd1 ;
  assign x__h11551 =
	     dutWrapper_dut_frameBuffer_axiMaster_bfifo_pwEnqueue$whas ?
	       axiw1_writeResponse_responseCode :
	       2'd0 ;
  assign x__h12890 = EN_axir1_readData ? axir1_readData_data : 64'd0 ;
  assign x__h12991 =
	     dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr + 12'd1 ;
  assign x__h13333 = EN_axir1_readAddr ? x__h24080 : 8'd0 ;
  assign x__h13608 = dutWrapper_dut_frameBuffer_fbc[11:0] >> 3 ;
  assign x__h13624 = dutWrapper_dut_frameBuffer_readAddrReg + 32'd256 ;
  assign x__h15720 = dutWrapper_dut_hdmiTpg_lineCount < 11'd5 ;
  assign x__h15750 = dutWrapper_dut_hdmiTpg_pixelCount < 12'd44 ;
  assign x__h15873 =
	     (dutWrapper_dut_hdmiTpg_lineCount < 11'd581) ?
	       _theResult____h15706 :
	       result__h15889 ;
  assign x__h16317 = dutWrapper_dut_hdmiTpg_dataCount + 22'd1 ;
  assign x__h17255 =
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[143:128] +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[127:112] ;
  assign x__h17318 =
	     x__h17320 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[79:64] ;
  assign x__h17320 =
	     16'd32768 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[95:80] ;
  assign x__h17373 =
	     x__h17375 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[31:16] ;
  assign x__h17375 =
	     16'd32768 +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[47:32] ;
  assign x__h19333 = responseFifo_count + 32'd1 ;
  assign x__h2043 =
	     WILL_FIRE_RL_dutWrapper_handleenqrequest ?
	       dutWrapper_dut_axiMaster_wfifo_wDataIn$wget :
	       64'd0 ;
  assign x__h2144 = dutWrapper_dut_axiMaster_wfifo_rRdPtr + 7'd1 ;
  assign x__h22767 = requestFifo_count + 32'd1 ;
  assign x__h23074 = responseFifo_fifo$D_OUT >> x__h23078 ;
  assign x__h23078 = { responseFifo_count[26:0], 5'd0 } ;
  assign x__h23574 =
	     dutWrapper_dut_axiMaster_raddrFifo_ff$EMPTY_N ?
	       dutWrapper_dut_axiMaster_raddrFifo_ff$D_OUT[7:0] :
	       dutWrapper_dut_axiMaster_raddrFifo_enqw$wget[7:0] ;
  assign x__h24080 =
	     dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$EMPTY_N ?
	       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_ff$D_OUT[7:0] :
	       dutWrapper_dut_frameBuffer_axiMaster_raddrFifo_enqw$wget[7:0] ;
  assign x__h2927 =
	     dutWrapper_dut_axiMaster_bfifo_pwEnqueue$whas ?
	       axiw0_writeResponse_responseCode :
	       2'd0 ;
  assign x__h3028 = dutWrapper_dut_axiMaster_bfifo_rRdPtr + 7'd1 ;
  assign x__h4266 = EN_axir0_readData ? axir0_readData_data : 64'd0 ;
  assign x__h4367 = dutWrapper_dut_axiMaster_rfifo_rRdPtr + 12'd1 ;
  assign x__h4709 = EN_axir0_readAddr ? x__h23574 : 8'd0 ;
  assign x__h6496 = dutWrapper_dut_fromFifoStatusFifo_rRdPtr + 6'd1 ;
  assign x__h710 =
	     requestFifo_fifo_pwEnqueue$whas ?
	       requestFifo_fifo_wDataIn$wget :
	       36'd0 ;
  assign x__h7274 =
	     dutWrapper_dut_axiMaster_rfifo_pwDequeue$whas ?
	       v__h17695[31:0] :
	       32'd0 ;
  assign x__h7375 = dutWrapper_dut_readFifo_rRdPtr + 7'd1 ;
  assign x__h811 = requestFifo_fifo_rRdPtr + 5'd1 ;
  assign x__h8259 = dutWrapper_dut_rRespFifo_rRdPtr + 7'd1 ;
  always@(x__h15873 or
	  dutWrapper_dut_hdmiTpg_patternRegs_3 or
	  dutWrapper_dut_hdmiTpg_patternRegs or
	  dutWrapper_dut_hdmiTpg_patternRegs_1 or
	  dutWrapper_dut_hdmiTpg_patternRegs_2)
  begin
    case (x__h15873)
      2'd0: data__h15707 = dutWrapper_dut_hdmiTpg_patternRegs;
      2'd1: data__h15707 = dutWrapper_dut_hdmiTpg_patternRegs_1;
      2'd2: data__h15707 = dutWrapper_dut_hdmiTpg_patternRegs_2;
      2'd3: data__h15707 = dutWrapper_dut_hdmiTpg_patternRegs_3;
    endcase
  end
  always@(get_addr or
	  rf$D_OUT_2 or
	  result__h23192 or
	  dutWrapper_junkReqReg or
	  dutWrapper_requestFired or
	  dutWrapper_responseFired or
	  underflowCount or
	  dutWrapper_dut_vsyncPulseCountReg or dutWrapper_dut_frameCountReg)
  begin
    case (get_addr)
      12'h0:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      result__h23192;
      12'h008:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      32'h02142011;
      12'h00C:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      dutWrapper_junkReqReg;
      12'h010:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      dutWrapper_requestFired;
      12'h014:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      dutWrapper_responseFired;
      12'h018:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      underflowCount;
      12'h020:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      dutWrapper_dut_vsyncPulseCountReg;
      12'h024:
	  IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
	      dutWrapper_dut_frameCountReg;
      default: IF_get_addr_EQ_0x24_14_THEN_dutWrapper_dut_fra_ETC___d733 =
		   rf$D_OUT_2;
    endcase
  end
  always@(requestFifo_fifo_wDataOut$wget)
  begin
    case (requestFifo_fifo_wDataOut$wget[35:32])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd10,
      4'd11,
      4'd12:
	  CASE_requestFifo_fifo_wDataOutwget_BITS_35_TO_ETC__q1 =
	      requestFifo_fifo_wDataOut$wget;
      default: CASE_requestFifo_fifo_wDataOutwget_BITS_35_TO_ETC__q1 =
		   { 4'd13, requestFifo_fifo_wDataOut$wget[31:0] };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dutWrapper_dut_axiMaster_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	dutWrapper_dut_axiMaster_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_axiMaster_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_axiMaster_readIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_axiMaster_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	    11'd1024;
	dutWrapper_dut_axiMaster_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    77'h0AAAAAAAAAAAAAAAAAAA;
	dutWrapper_dut_axiMaster_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dutWrapper_dut_axiMaster_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dutWrapper_dut_axiMaster_wAddrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_axiMaster_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_axiMaster_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dutWrapper_dut_axiMaster_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	dutWrapper_dut_axiMaster_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_axiMaster_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_axiMaster_writeIdReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_fifoStatusFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    39'h2AAAAAAAAA;
	dutWrapper_dut_fifoStatusFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	dutWrapper_dut_fifoStatusFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	dutWrapper_dut_firstReadSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	    7'd0;
	dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	    7'd0;
	dutWrapper_dut_frameBuffer_axiMaster_readIdReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	    11'd1024;
	dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    77'h0AAAAAAAAAAAAAAAAAAA;
	dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	dutWrapper_dut_frameBuffer_axiMaster_wAddrReg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	    7'd0;
	dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	    7'd0;
	dutWrapper_dut_frameBuffer_axiMaster_writeIdReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_frameBuffer_fbc <= `BSV_ASSIGNMENT_DELAY 68'd0;
	dutWrapper_dut_frameBuffer_lineAddrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_frameBuffer_lineCountReg <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	dutWrapper_dut_frameBuffer_pixelCountReg <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	dutWrapper_dut_frameBuffer_readAddrReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_frameBuffer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_frameCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_fromFifoStatusFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    39'h2AAAAAAAAA;
	dutWrapper_dut_fromFifoStatusFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	    6'd0;
	dutWrapper_dut_fromFifoStatusFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	    6'd0;
	dutWrapper_dut_numWordsReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_rRespFifo_rCache <= `BSV_ASSIGNMENT_DELAY 10'd170;
	dutWrapper_dut_rRespFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_rRespFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_readCompletedSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_readCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_readFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    40'h2AAAAAAAAA;
	dutWrapper_dut_readFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_readFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dutWrapper_dut_readTimer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_readTimer_timerReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_result2Reg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	dutWrapper_dut_shadowFrameBufferBase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_testCompletedReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_testReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_testResultReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_valueReg <= `BSV_ASSIGNMENT_DELAY 32'd13;
	dutWrapper_dut_vsyncPulseCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_writeCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_writeQueuedSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_writeTimer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_writeTimer_timerReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dutWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dutWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interruptCleared <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 36'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 42'h0AAAAAAAAAA;
	requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	underflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dutWrapper_dut_axiMaster_bfifo_rCache$EN)
	  dutWrapper_dut_axiMaster_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_bfifo_rCache$D_IN;
	if (dutWrapper_dut_axiMaster_bfifo_rRdPtr$EN)
	  dutWrapper_dut_axiMaster_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_bfifo_rRdPtr$D_IN;
	if (dutWrapper_dut_axiMaster_bfifo_rWrPtr$EN)
	  dutWrapper_dut_axiMaster_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_bfifo_rWrPtr$D_IN;
	if (dutWrapper_dut_axiMaster_readIdReg$EN)
	  dutWrapper_dut_axiMaster_readIdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_readIdReg$D_IN;
	if (dutWrapper_dut_axiMaster_rfifoWordsAvail$EN)
	  dutWrapper_dut_axiMaster_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_rfifoWordsAvail$D_IN;
	if (dutWrapper_dut_axiMaster_rfifo_rCache$EN)
	  dutWrapper_dut_axiMaster_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_rfifo_rCache$D_IN;
	if (dutWrapper_dut_axiMaster_rfifo_rRdPtr$EN)
	  dutWrapper_dut_axiMaster_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_rfifo_rRdPtr$D_IN;
	if (dutWrapper_dut_axiMaster_rfifo_rWrPtr$EN)
	  dutWrapper_dut_axiMaster_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_rfifo_rWrPtr$D_IN;
	if (dutWrapper_dut_axiMaster_wAddrReg$EN)
	  dutWrapper_dut_axiMaster_wAddrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_wAddrReg$D_IN;
	if (dutWrapper_dut_axiMaster_wAddressPresented$EN)
	  dutWrapper_dut_axiMaster_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_wAddressPresented$D_IN;
	if (dutWrapper_dut_axiMaster_wBurstCountReg$EN)
	  dutWrapper_dut_axiMaster_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_wBurstCountReg$D_IN;
	if (dutWrapper_dut_axiMaster_wfifo_rCache$EN)
	  dutWrapper_dut_axiMaster_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_wfifo_rCache$D_IN;
	if (dutWrapper_dut_axiMaster_wfifo_rRdPtr$EN)
	  dutWrapper_dut_axiMaster_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_wfifo_rRdPtr$D_IN;
	if (dutWrapper_dut_axiMaster_wfifo_rWrPtr$EN)
	  dutWrapper_dut_axiMaster_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_wfifo_rWrPtr$D_IN;
	if (dutWrapper_dut_axiMaster_writeIdReg$EN)
	  dutWrapper_dut_axiMaster_writeIdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_axiMaster_writeIdReg$D_IN;
	if (dutWrapper_dut_fifoStatusFifo_rCache$EN)
	  dutWrapper_dut_fifoStatusFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoStatusFifo_rCache$D_IN;
	if (dutWrapper_dut_fifoStatusFifo_rRdPtr$EN)
	  dutWrapper_dut_fifoStatusFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoStatusFifo_rRdPtr$D_IN;
	if (dutWrapper_dut_fifoStatusFifo_rWrPtr$EN)
	  dutWrapper_dut_fifoStatusFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fifoStatusFifo_rWrPtr$D_IN;
	if (dutWrapper_dut_firstReadSent$EN)
	  dutWrapper_dut_firstReadSent <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_firstReadSent$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_readIdReg$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_readIdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_readIdReg$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_wAddrReg$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_wAddrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_wAddrReg$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr$D_IN;
	if (dutWrapper_dut_frameBuffer_axiMaster_writeIdReg$EN)
	  dutWrapper_dut_frameBuffer_axiMaster_writeIdReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_axiMaster_writeIdReg$D_IN;
	if (dutWrapper_dut_frameBuffer_fbc$EN)
	  dutWrapper_dut_frameBuffer_fbc <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_fbc$D_IN;
	if (dutWrapper_dut_frameBuffer_lineAddrReg$EN)
	  dutWrapper_dut_frameBuffer_lineAddrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_lineAddrReg$D_IN;
	if (dutWrapper_dut_frameBuffer_lineCountReg$EN)
	  dutWrapper_dut_frameBuffer_lineCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_lineCountReg$D_IN;
	if (dutWrapper_dut_frameBuffer_pixelCountReg$EN)
	  dutWrapper_dut_frameBuffer_pixelCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_pixelCountReg$D_IN;
	if (dutWrapper_dut_frameBuffer_readAddrReg$EN)
	  dutWrapper_dut_frameBuffer_readAddrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_readAddrReg$D_IN;
	if (dutWrapper_dut_frameBuffer_runningReg$EN)
	  dutWrapper_dut_frameBuffer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_runningReg$D_IN;
	if (dutWrapper_dut_frameCountReg$EN)
	  dutWrapper_dut_frameCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameCountReg$D_IN;
	if (dutWrapper_dut_fromFifoStatusFifo_rCache$EN)
	  dutWrapper_dut_fromFifoStatusFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fromFifoStatusFifo_rCache$D_IN;
	if (dutWrapper_dut_fromFifoStatusFifo_rRdPtr$EN)
	  dutWrapper_dut_fromFifoStatusFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fromFifoStatusFifo_rRdPtr$D_IN;
	if (dutWrapper_dut_fromFifoStatusFifo_rWrPtr$EN)
	  dutWrapper_dut_fromFifoStatusFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_fromFifoStatusFifo_rWrPtr$D_IN;
	if (dutWrapper_dut_numWordsReg$EN)
	  dutWrapper_dut_numWordsReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_numWordsReg$D_IN;
	if (dutWrapper_dut_rRespFifo_rCache$EN)
	  dutWrapper_dut_rRespFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_rRespFifo_rCache$D_IN;
	if (dutWrapper_dut_rRespFifo_rRdPtr$EN)
	  dutWrapper_dut_rRespFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_rRespFifo_rRdPtr$D_IN;
	if (dutWrapper_dut_rRespFifo_rWrPtr$EN)
	  dutWrapper_dut_rRespFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_rRespFifo_rWrPtr$D_IN;
	if (dutWrapper_dut_readCompletedSent$EN)
	  dutWrapper_dut_readCompletedSent <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readCompletedSent$D_IN;
	if (dutWrapper_dut_readCountReg$EN)
	  dutWrapper_dut_readCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readCountReg$D_IN;
	if (dutWrapper_dut_readFifo_rCache$EN)
	  dutWrapper_dut_readFifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readFifo_rCache$D_IN;
	if (dutWrapper_dut_readFifo_rRdPtr$EN)
	  dutWrapper_dut_readFifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readFifo_rRdPtr$D_IN;
	if (dutWrapper_dut_readFifo_rWrPtr$EN)
	  dutWrapper_dut_readFifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readFifo_rWrPtr$D_IN;
	if (dutWrapper_dut_readTimer_runningReg$EN)
	  dutWrapper_dut_readTimer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readTimer_runningReg$D_IN;
	if (dutWrapper_dut_readTimer_timerReg$EN)
	  dutWrapper_dut_readTimer_timerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_readTimer_timerReg$D_IN;
	if (dutWrapper_dut_result2Reg$EN)
	  dutWrapper_dut_result2Reg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_result2Reg$D_IN;
	if (dutWrapper_dut_resultReg$EN)
	  dutWrapper_dut_resultReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_resultReg$D_IN;
	if (dutWrapper_dut_shadowFrameBufferBase$EN)
	  dutWrapper_dut_shadowFrameBufferBase <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_shadowFrameBufferBase$D_IN;
	if (dutWrapper_dut_testCompletedReg$EN)
	  dutWrapper_dut_testCompletedReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_testCompletedReg$D_IN;
	if (dutWrapper_dut_testReg$EN)
	  dutWrapper_dut_testReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_testReg$D_IN;
	if (dutWrapper_dut_testResultReg$EN)
	  dutWrapper_dut_testResultReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_testResultReg$D_IN;
	if (dutWrapper_dut_valueReg$EN)
	  dutWrapper_dut_valueReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_valueReg$D_IN;
	if (dutWrapper_dut_vsyncPulseCountReg$EN)
	  dutWrapper_dut_vsyncPulseCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_vsyncPulseCountReg$D_IN;
	if (dutWrapper_dut_writeCountReg$EN)
	  dutWrapper_dut_writeCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeCountReg$D_IN;
	if (dutWrapper_dut_writeQueuedSent$EN)
	  dutWrapper_dut_writeQueuedSent <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeQueuedSent$D_IN;
	if (dutWrapper_dut_writeTimer_runningReg$EN)
	  dutWrapper_dut_writeTimer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeTimer_runningReg$D_IN;
	if (dutWrapper_dut_writeTimer_timerReg$EN)
	  dutWrapper_dut_writeTimer_timerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_writeTimer_timerReg$D_IN;
	if (dutWrapper_junkReqReg$EN)
	  dutWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_junkReqReg$D_IN;
	if (dutWrapper_requestFired$EN)
	  dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestFired$D_IN;
	if (dutWrapper_requestTimeLimitReg$EN)
	  dutWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestTimeLimitReg$D_IN;
	if (dutWrapper_requestTimerReg$EN)
	  dutWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestTimerReg$D_IN;
	if (dutWrapper_responseFired$EN)
	  dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseFired$D_IN;
	if (dutWrapper_responseTimeLimitReg$EN)
	  dutWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseTimeLimitReg$D_IN;
	if (dutWrapper_responseTimerReg$EN)
	  dutWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseTimerReg$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (interruptCleared$EN)
	  interruptCleared <= `BSV_ASSIGNMENT_DELAY interruptCleared$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (requestFifo_fifo_rCache$EN)
	  requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rCache$D_IN;
	if (requestFifo_fifo_rRdPtr$EN)
	  requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rRdPtr$D_IN;
	if (requestFifo_fifo_rWrPtr$EN)
	  requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rWrPtr$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
	if (underflowCount$EN)
	  underflowCount <= `BSV_ASSIGNMENT_DELAY underflowCount$D_IN;
      end
  end

  always@(posedge CLK_hdmi_ref_clk)
  begin
    if (dutWrapper_dut_hdmi_reset$OUT_RST == `BSV_RESET_VALUE)
      begin
        dutWrapper_dut_hdmiTpg_dataCount <= `BSV_ASSIGNMENT_DELAY 22'd0;
	dutWrapper_dut_hdmiTpg_evenOddPixelReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_hdmiTpg_hsyncReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_hdmiTpg_lineCount <= `BSV_ASSIGNMENT_DELAY 11'd0;
	dutWrapper_dut_hdmiTpg_patternReg0 <= `BSV_ASSIGNMENT_DELAY
	    32'h00FFFFFF;
	dutWrapper_dut_hdmiTpg_patternRegs <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_patternRegs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_patternRegs_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_patternRegs_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_pixelCount <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dutWrapper_dut_hdmiTpg_rgb888StageReg <= `BSV_ASSIGNMENT_DELAY 27'd0;
	dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	dutWrapper_dut_hdmiTpg_testPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	dutWrapper_dut_hdmiTpg_vsyncReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_hdmiTpg_yuv422StageReg <= `BSV_ASSIGNMENT_DELAY 19'd0;
	dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg <= `BSV_ASSIGNMENT_DELAY
	    147'd0;
	dutWrapper_dut_hdmiTpg_yuv444StageReg <= `BSV_ASSIGNMENT_DELAY 27'd0;
      end
    else
      begin
        if (dutWrapper_dut_hdmiTpg_dataCount$EN)
	  dutWrapper_dut_hdmiTpg_dataCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_dataCount$D_IN;
	if (dutWrapper_dut_hdmiTpg_evenOddPixelReg$EN)
	  dutWrapper_dut_hdmiTpg_evenOddPixelReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_evenOddPixelReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_hsyncReg$EN)
	  dutWrapper_dut_hdmiTpg_hsyncReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_hsyncReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_lineCount$EN)
	  dutWrapper_dut_hdmiTpg_lineCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_lineCount$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternReg0$EN)
	  dutWrapper_dut_hdmiTpg_patternReg0 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternReg0$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs_1$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs_1 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs_1$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs_2$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs_2 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs_2$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs_3$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs_3 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs_3$D_IN;
	if (dutWrapper_dut_hdmiTpg_pixelCount$EN)
	  dutWrapper_dut_hdmiTpg_pixelCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_pixelCount$D_IN;
	if (dutWrapper_dut_hdmiTpg_rgb888StageReg$EN)
	  dutWrapper_dut_hdmiTpg_rgb888StageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_rgb888StageReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$EN)
	  dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$D_IN;
	if (dutWrapper_dut_hdmiTpg_testPatternEnabled$EN)
	  dutWrapper_dut_hdmiTpg_testPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_testPatternEnabled$D_IN;
	if (dutWrapper_dut_hdmiTpg_vsyncReg$EN)
	  dutWrapper_dut_hdmiTpg_vsyncReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_vsyncReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_yuv422StageReg$EN)
	  dutWrapper_dut_hdmiTpg_yuv422StageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_yuv422StageReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$EN)
	  dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_yuv444StageReg$EN)
	  dutWrapper_dut_hdmiTpg_yuv444StageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_yuv444StageReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dutWrapper_dut_axiMaster_bfifo_rCache = 10'h2AA;
    dutWrapper_dut_axiMaster_bfifo_rRdPtr = 7'h2A;
    dutWrapper_dut_axiMaster_bfifo_rWrPtr = 7'h2A;
    dutWrapper_dut_axiMaster_readIdReg = 1'h0;
    dutWrapper_dut_axiMaster_rfifoWordsAvail = 11'h2AA;
    dutWrapper_dut_axiMaster_rfifo_rCache = 77'h0AAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_axiMaster_rfifo_rRdPtr = 12'hAAA;
    dutWrapper_dut_axiMaster_rfifo_rWrPtr = 12'hAAA;
    dutWrapper_dut_axiMaster_wAddrReg = 32'hAAAAAAAA;
    dutWrapper_dut_axiMaster_wAddressPresented = 1'h0;
    dutWrapper_dut_axiMaster_wBurstCountReg = 8'hAA;
    dutWrapper_dut_axiMaster_wfifo_rCache = 72'hAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_axiMaster_wfifo_rRdPtr = 7'h2A;
    dutWrapper_dut_axiMaster_wfifo_rWrPtr = 7'h2A;
    dutWrapper_dut_axiMaster_writeIdReg = 1'h0;
    dutWrapper_dut_fifoStatusFifo_rCache = 39'h2AAAAAAAAA;
    dutWrapper_dut_fifoStatusFifo_rRdPtr = 6'h2A;
    dutWrapper_dut_fifoStatusFifo_rWrPtr = 6'h2A;
    dutWrapper_dut_firstReadSent = 1'h0;
    dutWrapper_dut_frameBuffer_axiMaster_bfifo_rCache = 10'h2AA;
    dutWrapper_dut_frameBuffer_axiMaster_bfifo_rRdPtr = 7'h2A;
    dutWrapper_dut_frameBuffer_axiMaster_bfifo_rWrPtr = 7'h2A;
    dutWrapper_dut_frameBuffer_axiMaster_readIdReg = 1'h0;
    dutWrapper_dut_frameBuffer_axiMaster_rfifoWordsAvail = 11'h2AA;
    dutWrapper_dut_frameBuffer_axiMaster_rfifo_rCache =
	77'h0AAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_frameBuffer_axiMaster_rfifo_rRdPtr = 12'hAAA;
    dutWrapper_dut_frameBuffer_axiMaster_rfifo_rWrPtr = 12'hAAA;
    dutWrapper_dut_frameBuffer_axiMaster_wAddrReg = 32'hAAAAAAAA;
    dutWrapper_dut_frameBuffer_axiMaster_wAddressPresented = 1'h0;
    dutWrapper_dut_frameBuffer_axiMaster_wBurstCountReg = 8'hAA;
    dutWrapper_dut_frameBuffer_axiMaster_wfifo_rCache =
	72'hAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_frameBuffer_axiMaster_wfifo_rRdPtr = 7'h2A;
    dutWrapper_dut_frameBuffer_axiMaster_wfifo_rWrPtr = 7'h2A;
    dutWrapper_dut_frameBuffer_axiMaster_writeIdReg = 1'h0;
    dutWrapper_dut_frameBuffer_fbc = 68'hAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_frameBuffer_lineAddrReg = 32'hAAAAAAAA;
    dutWrapper_dut_frameBuffer_lineCountReg = 12'hAAA;
    dutWrapper_dut_frameBuffer_pixelCountReg = 12'hAAA;
    dutWrapper_dut_frameBuffer_readAddrReg = 32'hAAAAAAAA;
    dutWrapper_dut_frameBuffer_runningReg = 1'h0;
    dutWrapper_dut_frameCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_fromFifoStatusFifo_rCache = 39'h2AAAAAAAAA;
    dutWrapper_dut_fromFifoStatusFifo_rRdPtr = 6'h2A;
    dutWrapper_dut_fromFifoStatusFifo_rWrPtr = 6'h2A;
    dutWrapper_dut_hdmiTpg_dataCount = 22'h2AAAAA;
    dutWrapper_dut_hdmiTpg_evenOddPixelReg = 1'h0;
    dutWrapper_dut_hdmiTpg_hsyncReg = 1'h0;
    dutWrapper_dut_hdmiTpg_lineCount = 11'h2AA;
    dutWrapper_dut_hdmiTpg_patternReg0 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs_1 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs_2 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs_3 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_pixelCount = 12'hAAA;
    dutWrapper_dut_hdmiTpg_rgb888StageReg = 27'h2AAAAAA;
    dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled = 1'h0;
    dutWrapper_dut_hdmiTpg_testPatternEnabled = 1'h0;
    dutWrapper_dut_hdmiTpg_vsyncReg = 1'h0;
    dutWrapper_dut_hdmiTpg_yuv422StageReg = 19'h2AAAA;
    dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg =
	147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_hdmiTpg_yuv444StageReg = 27'h2AAAAAA;
    dutWrapper_dut_numWordsReg = 32'hAAAAAAAA;
    dutWrapper_dut_rRespFifo_rCache = 10'h2AA;
    dutWrapper_dut_rRespFifo_rRdPtr = 7'h2A;
    dutWrapper_dut_rRespFifo_rWrPtr = 7'h2A;
    dutWrapper_dut_readCompletedSent = 1'h0;
    dutWrapper_dut_readCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_readFifo_rCache = 40'hAAAAAAAAAA;
    dutWrapper_dut_readFifo_rRdPtr = 7'h2A;
    dutWrapper_dut_readFifo_rWrPtr = 7'h2A;
    dutWrapper_dut_readTimer_runningReg = 1'h0;
    dutWrapper_dut_readTimer_timerReg = 32'hAAAAAAAA;
    dutWrapper_dut_result2Reg = 33'h0AAAAAAAA;
    dutWrapper_dut_resultReg = 33'h0AAAAAAAA;
    dutWrapper_dut_shadowFrameBufferBase = 32'hAAAAAAAA;
    dutWrapper_dut_testCompletedReg = 1'h0;
    dutWrapper_dut_testReg = 1'h0;
    dutWrapper_dut_testResultReg = 32'hAAAAAAAA;
    dutWrapper_dut_valueReg = 32'hAAAAAAAA;
    dutWrapper_dut_vsyncPulseCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_writeCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_writeQueuedSent = 1'h0;
    dutWrapper_dut_writeTimer_runningReg = 1'h0;
    dutWrapper_dut_writeTimer_timerReg = 32'hAAAAAAAA;
    dutWrapper_junkReqReg = 32'hAAAAAAAA;
    dutWrapper_requestFired = 32'hAAAAAAAA;
    dutWrapper_requestTimeLimitReg = 16'hAAAA;
    dutWrapper_requestTimerReg = 16'hAAAA;
    dutWrapper_responseFired = 32'hAAAAAAAA;
    dutWrapper_responseTimeLimitReg = 16'hAAAA;
    dutWrapper_responseTimerReg = 16'hAAAA;
    getWordCount = 32'hAAAAAAAA;
    interruptCleared = 1'h0;
    interrupted = 1'h0;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 36'hAAAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    requestFifo_fifo_rCache = 42'h2AAAAAAAAAA;
    requestFifo_fifo_rRdPtr = 5'h0A;
    requestFifo_fifo_rWrPtr = 5'h0A;
    responseFifo_count = 32'hAAAAAAAA;
    underflowCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_vsync &&
	  dutWrapper_dut_vsyncPulse$dPulse)
	$display("vsync pulse received %h",
		 dutWrapper_dut_shadowFrameBufferBase);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_vsync &&
	  dutWrapper_dut_vsyncPulse$dPulse &&
	  dutWrapper_dut_shadowFrameBufferBase != 32'd0)
	$display("frame started");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest)
	$display("startFrameBuffer %h", requestFifo_fifo_wDataOut$wget[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_frameBuffer_issueRead &&
	  dutWrapper_dut_frameBuffer_pixelCountReg == 12'd64 &&
	  dutWrapper_dut_frameBuffer_lineCountReg == 12'd1)
	$display("issuing last read of frame");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_hdmi_ref_clk)
  begin
    #0;
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (dutWrapper_dut_vsyncPulse$sRDY &&
	  dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("vsync pulse sent");
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (dutWrapper_dut_hsyncPulse$sRDY &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("hsync pulse sent");
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("tpg line %d", dutWrapper_dut_hdmiTpg_lineCount);
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	  dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("testPatternEnabled %d",
		 dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled);
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (!dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("fb line %d", dutWrapper_dut_hdmiTpg_lineCount);
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (!dutWrapper_dut_hdmiTpg_testPatternEnabled &&
	  dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("testPatternEnabled %d",
		 dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled);
  end
  // synopsys translate_on
endmodule  // mkIpSlaveWithMaster

