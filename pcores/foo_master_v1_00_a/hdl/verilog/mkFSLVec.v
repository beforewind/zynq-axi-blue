//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Tue Nov 20 14:04:59 EST 2012
//
// Method conflict info:
// Method: fsls_0_canPut
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_0_put
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_0_put
//
// Method: fsls_0_canGet
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_0_get
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_0_get
//
// Method: fsls_0_getID
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_0_getTxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_0_getRxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_1_canPut
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_1_put
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_1_put
//
// Method: fsls_1_canGet
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_1_get
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_1_get
//
// Method: fsls_1_getID
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_1_getTxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_1_getRxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_2_canPut
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_2_put
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_2_put
//
// Method: fsls_2_canGet
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_2_get
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_2_get
//
// Method: fsls_2_getID
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_2_getTxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_2_getRxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_3_canPut
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_3_put
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_3_put
//
// Method: fsls_3_canGet
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_3_get
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
// Conflicts: fsls_3_get
//
// Method: fsls_3_getID
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_3_getTxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: fsls_3_getRxBSZ
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: device_interrupt
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: device_led
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
// Method: device_hw_cnt_read
// Conflict-free: fsls_0_canPut,
// 	       fsls_0_put,
// 	       fsls_0_canGet,
// 	       fsls_0_get,
// 	       fsls_0_getID,
// 	       fsls_0_getTxBSZ,
// 	       fsls_0_getRxBSZ,
// 	       fsls_1_canPut,
// 	       fsls_1_put,
// 	       fsls_1_canGet,
// 	       fsls_1_get,
// 	       fsls_1_getID,
// 	       fsls_1_getTxBSZ,
// 	       fsls_1_getRxBSZ,
// 	       fsls_2_canPut,
// 	       fsls_2_put,
// 	       fsls_2_canGet,
// 	       fsls_2_get,
// 	       fsls_2_getID,
// 	       fsls_2_getTxBSZ,
// 	       fsls_2_getRxBSZ,
// 	       fsls_3_canPut,
// 	       fsls_3_put,
// 	       fsls_3_canGet,
// 	       fsls_3_get,
// 	       fsls_3_getID,
// 	       fsls_3_getTxBSZ,
// 	       fsls_3_getRxBSZ,
// 	       device_interrupt,
// 	       device_led,
// 	       device_hw_cnt_read
//
//
// Ports:
// Name                         I/O  size props
// fsls_0_canPut                  O     1 reg
// RDY_fsls_0_canPut              O     1 const
// RDY_fsls_0_put                 O     1 reg
// fsls_0_canGet                  O     1 reg
// RDY_fsls_0_canGet              O     1 const
// fsls_0_get                     O    32
// RDY_fsls_0_get                 O     1 reg
// fsls_0_getID                   O    32 const
// RDY_fsls_0_getID               O     1 const
// fsls_0_getTxBSZ                O    32 const
// RDY_fsls_0_getTxBSZ            O     1 const
// fsls_0_getRxBSZ                O    32 const
// RDY_fsls_0_getRxBSZ            O     1 const
// fsls_1_canPut                  O     1 reg
// RDY_fsls_1_canPut              O     1 const
// RDY_fsls_1_put                 O     1 reg
// fsls_1_canGet                  O     1 reg
// RDY_fsls_1_canGet              O     1 const
// fsls_1_get                     O    32
// RDY_fsls_1_get                 O     1 reg
// fsls_1_getID                   O    32 const
// RDY_fsls_1_getID               O     1 const
// fsls_1_getTxBSZ                O    32 const
// RDY_fsls_1_getTxBSZ            O     1 const
// fsls_1_getRxBSZ                O    32 const
// RDY_fsls_1_getRxBSZ            O     1 const
// fsls_2_canPut                  O     1 reg
// RDY_fsls_2_canPut              O     1 const
// RDY_fsls_2_put                 O     1 reg
// fsls_2_canGet                  O     1 reg
// RDY_fsls_2_canGet              O     1 const
// fsls_2_get                     O    32
// RDY_fsls_2_get                 O     1 reg
// fsls_2_getID                   O    32 const
// RDY_fsls_2_getID               O     1 const
// fsls_2_getTxBSZ                O    32 const
// RDY_fsls_2_getTxBSZ            O     1 const
// fsls_2_getRxBSZ                O    32 const
// RDY_fsls_2_getRxBSZ            O     1 const
// fsls_3_canPut                  O     1 reg
// RDY_fsls_3_canPut              O     1 const
// RDY_fsls_3_put                 O     1 reg
// fsls_3_canGet                  O     1 reg
// RDY_fsls_3_canGet              O     1 const
// fsls_3_get                     O    32
// RDY_fsls_3_get                 O     1 reg
// fsls_3_getID                   O    32 const
// RDY_fsls_3_getID               O     1 const
// fsls_3_getTxBSZ                O    32 const
// RDY_fsls_3_getTxBSZ            O     1 const
// fsls_3_getRxBSZ                O    32 const
// RDY_fsls_3_getRxBSZ            O     1 const
// device_interrupt               O     1 const
// RDY_device_interrupt           O     1 const
// device_led                     O     4 reg
// RDY_device_led                 O     1 const
// device_hw_cnt_read             O    32 reg
// RDY_device_hw_cnt_read         O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// fsls_0_put_v                   I    32 reg
// fsls_1_put_v                   I    32
// fsls_2_put_v                   I    32
// fsls_3_put_v                   I    32
// EN_fsls_0_put                  I     1
// EN_fsls_1_put                  I     1
// EN_fsls_2_put                  I     1
// EN_fsls_3_put                  I     1
// EN_fsls_0_get                  I     1
// EN_fsls_1_get                  I     1
// EN_fsls_2_get                  I     1
// EN_fsls_3_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFSLVec(CLK,
		RST_N,

		fsls_0_canPut,
		RDY_fsls_0_canPut,

		fsls_0_put_v,
		EN_fsls_0_put,
		RDY_fsls_0_put,

		fsls_0_canGet,
		RDY_fsls_0_canGet,

		EN_fsls_0_get,
		fsls_0_get,
		RDY_fsls_0_get,

		fsls_0_getID,
		RDY_fsls_0_getID,

		fsls_0_getTxBSZ,
		RDY_fsls_0_getTxBSZ,

		fsls_0_getRxBSZ,
		RDY_fsls_0_getRxBSZ,

		fsls_1_canPut,
		RDY_fsls_1_canPut,

		fsls_1_put_v,
		EN_fsls_1_put,
		RDY_fsls_1_put,

		fsls_1_canGet,
		RDY_fsls_1_canGet,

		EN_fsls_1_get,
		fsls_1_get,
		RDY_fsls_1_get,

		fsls_1_getID,
		RDY_fsls_1_getID,

		fsls_1_getTxBSZ,
		RDY_fsls_1_getTxBSZ,

		fsls_1_getRxBSZ,
		RDY_fsls_1_getRxBSZ,

		fsls_2_canPut,
		RDY_fsls_2_canPut,

		fsls_2_put_v,
		EN_fsls_2_put,
		RDY_fsls_2_put,

		fsls_2_canGet,
		RDY_fsls_2_canGet,

		EN_fsls_2_get,
		fsls_2_get,
		RDY_fsls_2_get,

		fsls_2_getID,
		RDY_fsls_2_getID,

		fsls_2_getTxBSZ,
		RDY_fsls_2_getTxBSZ,

		fsls_2_getRxBSZ,
		RDY_fsls_2_getRxBSZ,

		fsls_3_canPut,
		RDY_fsls_3_canPut,

		fsls_3_put_v,
		EN_fsls_3_put,
		RDY_fsls_3_put,

		fsls_3_canGet,
		RDY_fsls_3_canGet,

		EN_fsls_3_get,
		fsls_3_get,
		RDY_fsls_3_get,

		fsls_3_getID,
		RDY_fsls_3_getID,

		fsls_3_getTxBSZ,
		RDY_fsls_3_getTxBSZ,

		fsls_3_getRxBSZ,
		RDY_fsls_3_getRxBSZ,

		device_interrupt,
		RDY_device_interrupt,

		device_led,
		RDY_device_led,

		device_hw_cnt_read,
		RDY_device_hw_cnt_read);
  input  CLK;
  input  RST_N;

  // value method fsls_0_canPut
  output fsls_0_canPut;
  output RDY_fsls_0_canPut;

  // action method fsls_0_put
  input  [31 : 0] fsls_0_put_v;
  input  EN_fsls_0_put;
  output RDY_fsls_0_put;

  // value method fsls_0_canGet
  output fsls_0_canGet;
  output RDY_fsls_0_canGet;

  // actionvalue method fsls_0_get
  input  EN_fsls_0_get;
  output [31 : 0] fsls_0_get;
  output RDY_fsls_0_get;

  // value method fsls_0_getID
  output [31 : 0] fsls_0_getID;
  output RDY_fsls_0_getID;

  // value method fsls_0_getTxBSZ
  output [31 : 0] fsls_0_getTxBSZ;
  output RDY_fsls_0_getTxBSZ;

  // value method fsls_0_getRxBSZ
  output [31 : 0] fsls_0_getRxBSZ;
  output RDY_fsls_0_getRxBSZ;

  // value method fsls_1_canPut
  output fsls_1_canPut;
  output RDY_fsls_1_canPut;

  // action method fsls_1_put
  input  [31 : 0] fsls_1_put_v;
  input  EN_fsls_1_put;
  output RDY_fsls_1_put;

  // value method fsls_1_canGet
  output fsls_1_canGet;
  output RDY_fsls_1_canGet;

  // actionvalue method fsls_1_get
  input  EN_fsls_1_get;
  output [31 : 0] fsls_1_get;
  output RDY_fsls_1_get;

  // value method fsls_1_getID
  output [31 : 0] fsls_1_getID;
  output RDY_fsls_1_getID;

  // value method fsls_1_getTxBSZ
  output [31 : 0] fsls_1_getTxBSZ;
  output RDY_fsls_1_getTxBSZ;

  // value method fsls_1_getRxBSZ
  output [31 : 0] fsls_1_getRxBSZ;
  output RDY_fsls_1_getRxBSZ;

  // value method fsls_2_canPut
  output fsls_2_canPut;
  output RDY_fsls_2_canPut;

  // action method fsls_2_put
  input  [31 : 0] fsls_2_put_v;
  input  EN_fsls_2_put;
  output RDY_fsls_2_put;

  // value method fsls_2_canGet
  output fsls_2_canGet;
  output RDY_fsls_2_canGet;

  // actionvalue method fsls_2_get
  input  EN_fsls_2_get;
  output [31 : 0] fsls_2_get;
  output RDY_fsls_2_get;

  // value method fsls_2_getID
  output [31 : 0] fsls_2_getID;
  output RDY_fsls_2_getID;

  // value method fsls_2_getTxBSZ
  output [31 : 0] fsls_2_getTxBSZ;
  output RDY_fsls_2_getTxBSZ;

  // value method fsls_2_getRxBSZ
  output [31 : 0] fsls_2_getRxBSZ;
  output RDY_fsls_2_getRxBSZ;

  // value method fsls_3_canPut
  output fsls_3_canPut;
  output RDY_fsls_3_canPut;

  // action method fsls_3_put
  input  [31 : 0] fsls_3_put_v;
  input  EN_fsls_3_put;
  output RDY_fsls_3_put;

  // value method fsls_3_canGet
  output fsls_3_canGet;
  output RDY_fsls_3_canGet;

  // actionvalue method fsls_3_get
  input  EN_fsls_3_get;
  output [31 : 0] fsls_3_get;
  output RDY_fsls_3_get;

  // value method fsls_3_getID
  output [31 : 0] fsls_3_getID;
  output RDY_fsls_3_getID;

  // value method fsls_3_getTxBSZ
  output [31 : 0] fsls_3_getTxBSZ;
  output RDY_fsls_3_getTxBSZ;

  // value method fsls_3_getRxBSZ
  output [31 : 0] fsls_3_getRxBSZ;
  output RDY_fsls_3_getRxBSZ;

  // value method device_interrupt
  output device_interrupt;
  output RDY_device_interrupt;

  // value method device_led
  output [3 : 0] device_led;
  output RDY_device_led;

  // value method device_hw_cnt_read
  output [31 : 0] device_hw_cnt_read;
  output RDY_device_hw_cnt_read;

  // signals for module outputs
  wire [31 : 0] device_hw_cnt_read,
		fsls_0_get,
		fsls_0_getID,
		fsls_0_getRxBSZ,
		fsls_0_getTxBSZ,
		fsls_1_get,
		fsls_1_getID,
		fsls_1_getRxBSZ,
		fsls_1_getTxBSZ,
		fsls_2_get,
		fsls_2_getID,
		fsls_2_getRxBSZ,
		fsls_2_getTxBSZ,
		fsls_3_get,
		fsls_3_getID,
		fsls_3_getRxBSZ,
		fsls_3_getTxBSZ;
  wire [3 : 0] device_led;
  wire RDY_device_hw_cnt_read,
       RDY_device_interrupt,
       RDY_device_led,
       RDY_fsls_0_canGet,
       RDY_fsls_0_canPut,
       RDY_fsls_0_get,
       RDY_fsls_0_getID,
       RDY_fsls_0_getRxBSZ,
       RDY_fsls_0_getTxBSZ,
       RDY_fsls_0_put,
       RDY_fsls_1_canGet,
       RDY_fsls_1_canPut,
       RDY_fsls_1_get,
       RDY_fsls_1_getID,
       RDY_fsls_1_getRxBSZ,
       RDY_fsls_1_getTxBSZ,
       RDY_fsls_1_put,
       RDY_fsls_2_canGet,
       RDY_fsls_2_canPut,
       RDY_fsls_2_get,
       RDY_fsls_2_getID,
       RDY_fsls_2_getRxBSZ,
       RDY_fsls_2_getTxBSZ,
       RDY_fsls_2_put,
       RDY_fsls_3_canGet,
       RDY_fsls_3_canPut,
       RDY_fsls_3_get,
       RDY_fsls_3_getID,
       RDY_fsls_3_getRxBSZ,
       RDY_fsls_3_getTxBSZ,
       RDY_fsls_3_put,
       device_interrupt,
       fsls_0_canGet,
       fsls_0_canPut,
       fsls_1_canGet,
       fsls_1_canPut,
       fsls_2_canGet,
       fsls_2_canPut,
       fsls_3_canGet,
       fsls_3_canPut;

  // register tb_hw_cnt
  reg [31 : 0] tb_hw_cnt;
  wire [31 : 0] tb_hw_cnt$D_IN;
  wire tb_hw_cnt$EN;

  // register tb_ledReg
  reg [3 : 0] tb_ledReg;
  wire [3 : 0] tb_ledReg$D_IN;
  wire tb_ledReg$EN;

  // register tb_portal0_from_bits_buff
  reg [31 : 0] tb_portal0_from_bits_buff;
  wire [31 : 0] tb_portal0_from_bits_buff$D_IN;
  wire tb_portal0_from_bits_buff$EN;

  // register tb_portal0_from_bits_count
  reg [31 : 0] tb_portal0_from_bits_count;
  wire [31 : 0] tb_portal0_from_bits_count$D_IN;
  wire tb_portal0_from_bits_count$EN;

  // register tb_portal0_to_bits_count
  reg [31 : 0] tb_portal0_to_bits_count;
  wire [31 : 0] tb_portal0_to_bits_count$D_IN;
  wire tb_portal0_to_bits_count$EN;

  // register tb_portal1_from_bits_buff
  reg [63 : 0] tb_portal1_from_bits_buff;
  wire [63 : 0] tb_portal1_from_bits_buff$D_IN;
  wire tb_portal1_from_bits_buff$EN;

  // register tb_portal1_from_bits_count
  reg [31 : 0] tb_portal1_from_bits_count;
  wire [31 : 0] tb_portal1_from_bits_count$D_IN;
  wire tb_portal1_from_bits_count$EN;

  // register tb_portal1_to_bits_count
  reg [31 : 0] tb_portal1_to_bits_count;
  wire [31 : 0] tb_portal1_to_bits_count$D_IN;
  wire tb_portal1_to_bits_count$EN;

  // register tb_portal2_from_bits_buff
  reg [63 : 0] tb_portal2_from_bits_buff;
  wire [63 : 0] tb_portal2_from_bits_buff$D_IN;
  wire tb_portal2_from_bits_buff$EN;

  // register tb_portal2_from_bits_count
  reg [31 : 0] tb_portal2_from_bits_count;
  wire [31 : 0] tb_portal2_from_bits_count$D_IN;
  wire tb_portal2_from_bits_count$EN;

  // register tb_portal2_to_bits_count
  reg [31 : 0] tb_portal2_to_bits_count;
  wire [31 : 0] tb_portal2_to_bits_count$D_IN;
  wire tb_portal2_to_bits_count$EN;

  // register tb_portal3_from_bits_buff
  reg [63 : 0] tb_portal3_from_bits_buff;
  wire [63 : 0] tb_portal3_from_bits_buff$D_IN;
  wire tb_portal3_from_bits_buff$EN;

  // register tb_portal3_from_bits_count
  reg [31 : 0] tb_portal3_from_bits_count;
  wire [31 : 0] tb_portal3_from_bits_count$D_IN;
  wire tb_portal3_from_bits_count$EN;

  // register tb_portal3_to_bits_count
  reg [31 : 0] tb_portal3_to_bits_count;
  wire [31 : 0] tb_portal3_to_bits_count$D_IN;
  wire tb_portal3_to_bits_count$EN;

  // ports of submodule tb_portal0_from_bits_fifo
  wire [31 : 0] tb_portal0_from_bits_fifo$D_IN,
		tb_portal0_from_bits_fifo$D_OUT;
  wire tb_portal0_from_bits_fifo$CLR,
       tb_portal0_from_bits_fifo$DEQ,
       tb_portal0_from_bits_fifo$EMPTY_N,
       tb_portal0_from_bits_fifo$ENQ,
       tb_portal0_from_bits_fifo$FULL_N;

  // ports of submodule tb_portal0_to_bits_fifo
  wire [31 : 0] tb_portal0_to_bits_fifo$D_IN, tb_portal0_to_bits_fifo$D_OUT;
  wire tb_portal0_to_bits_fifo$CLR,
       tb_portal0_to_bits_fifo$DEQ,
       tb_portal0_to_bits_fifo$EMPTY_N,
       tb_portal0_to_bits_fifo$ENQ;

  // ports of submodule tb_portal1_from_bits_fifo
  wire [63 : 0] tb_portal1_from_bits_fifo$D_IN;
  wire tb_portal1_from_bits_fifo$CLR,
       tb_portal1_from_bits_fifo$DEQ,
       tb_portal1_from_bits_fifo$EMPTY_N,
       tb_portal1_from_bits_fifo$ENQ,
       tb_portal1_from_bits_fifo$FULL_N;

  // ports of submodule tb_portal1_to_bits_fifo
  wire [63 : 0] tb_portal1_to_bits_fifo$D_IN, tb_portal1_to_bits_fifo$D_OUT;
  wire tb_portal1_to_bits_fifo$CLR,
       tb_portal1_to_bits_fifo$DEQ,
       tb_portal1_to_bits_fifo$EMPTY_N,
       tb_portal1_to_bits_fifo$ENQ;

  // ports of submodule tb_portal2_from_bits_fifo
  wire [63 : 0] tb_portal2_from_bits_fifo$D_IN;
  wire tb_portal2_from_bits_fifo$CLR,
       tb_portal2_from_bits_fifo$DEQ,
       tb_portal2_from_bits_fifo$EMPTY_N,
       tb_portal2_from_bits_fifo$ENQ,
       tb_portal2_from_bits_fifo$FULL_N;

  // ports of submodule tb_portal2_to_bits_fifo
  wire [63 : 0] tb_portal2_to_bits_fifo$D_IN, tb_portal2_to_bits_fifo$D_OUT;
  wire tb_portal2_to_bits_fifo$CLR,
       tb_portal2_to_bits_fifo$DEQ,
       tb_portal2_to_bits_fifo$EMPTY_N,
       tb_portal2_to_bits_fifo$ENQ;

  // ports of submodule tb_portal3_from_bits_fifo
  wire [63 : 0] tb_portal3_from_bits_fifo$D_IN;
  wire tb_portal3_from_bits_fifo$CLR,
       tb_portal3_from_bits_fifo$DEQ,
       tb_portal3_from_bits_fifo$EMPTY_N,
       tb_portal3_from_bits_fifo$ENQ,
       tb_portal3_from_bits_fifo$FULL_N;

  // ports of submodule tb_portal3_to_bits_fifo
  wire [63 : 0] tb_portal3_to_bits_fifo$D_IN, tb_portal3_to_bits_fifo$D_OUT;
  wire tb_portal3_to_bits_fifo$CLR,
       tb_portal3_to_bits_fifo$DEQ,
       tb_portal3_to_bits_fifo$EMPTY_N,
       tb_portal3_to_bits_fifo$ENQ;

  // remaining internal signals
  wire [63 : 0] longval__h4721,
		longval__h5217,
		longval__h5713,
		x__h4968,
		x__h5464,
		x__h5960;
  wire [31 : 0] x__h4182,
		x__h4386,
		x__h4478,
		x__h4675,
		x__h4882,
		x__h4974,
		x__h5171,
		x__h5378,
		x__h5470,
		x__h5667,
		x__h5874,
		x__h5966;

  // value method fsls_0_canPut
  assign fsls_0_canPut = tb_portal0_from_bits_fifo$FULL_N ;
  assign RDY_fsls_0_canPut = 1'd1 ;

  // action method fsls_0_put
  assign RDY_fsls_0_put = tb_portal0_from_bits_fifo$FULL_N ;

  // value method fsls_0_canGet
  assign fsls_0_canGet = tb_portal0_to_bits_fifo$EMPTY_N ;
  assign RDY_fsls_0_canGet = 1'd1 ;

  // actionvalue method fsls_0_get
  assign fsls_0_get = tb_portal0_to_bits_fifo$D_OUT >> x__h4478 ;
  assign RDY_fsls_0_get = tb_portal0_to_bits_fifo$EMPTY_N ;

  // value method fsls_0_getID
  assign fsls_0_getID = 32'd0 ;
  assign RDY_fsls_0_getID = 1'd1 ;

  // value method fsls_0_getTxBSZ
  assign fsls_0_getTxBSZ = 32'd1 ;
  assign RDY_fsls_0_getTxBSZ = 1'd1 ;

  // value method fsls_0_getRxBSZ
  assign fsls_0_getRxBSZ = 32'd1 ;
  assign RDY_fsls_0_getRxBSZ = 1'd1 ;

  // value method fsls_1_canPut
  assign fsls_1_canPut = tb_portal1_from_bits_fifo$FULL_N ;
  assign RDY_fsls_1_canPut = 1'd1 ;

  // action method fsls_1_put
  assign RDY_fsls_1_put = tb_portal1_from_bits_fifo$FULL_N ;

  // value method fsls_1_canGet
  assign fsls_1_canGet = tb_portal1_to_bits_fifo$EMPTY_N ;
  assign RDY_fsls_1_canGet = 1'd1 ;

  // actionvalue method fsls_1_get
  assign fsls_1_get = x__h4968[31:0] ;
  assign RDY_fsls_1_get = tb_portal1_to_bits_fifo$EMPTY_N ;

  // value method fsls_1_getID
  assign fsls_1_getID = 32'd1 ;
  assign RDY_fsls_1_getID = 1'd1 ;

  // value method fsls_1_getTxBSZ
  assign fsls_1_getTxBSZ = 32'd2 ;
  assign RDY_fsls_1_getTxBSZ = 1'd1 ;

  // value method fsls_1_getRxBSZ
  assign fsls_1_getRxBSZ = 32'd2 ;
  assign RDY_fsls_1_getRxBSZ = 1'd1 ;

  // value method fsls_2_canPut
  assign fsls_2_canPut = tb_portal2_from_bits_fifo$FULL_N ;
  assign RDY_fsls_2_canPut = 1'd1 ;

  // action method fsls_2_put
  assign RDY_fsls_2_put = tb_portal2_from_bits_fifo$FULL_N ;

  // value method fsls_2_canGet
  assign fsls_2_canGet = tb_portal2_to_bits_fifo$EMPTY_N ;
  assign RDY_fsls_2_canGet = 1'd1 ;

  // actionvalue method fsls_2_get
  assign fsls_2_get = x__h5464[31:0] ;
  assign RDY_fsls_2_get = tb_portal2_to_bits_fifo$EMPTY_N ;

  // value method fsls_2_getID
  assign fsls_2_getID = 32'd2 ;
  assign RDY_fsls_2_getID = 1'd1 ;

  // value method fsls_2_getTxBSZ
  assign fsls_2_getTxBSZ = 32'd2 ;
  assign RDY_fsls_2_getTxBSZ = 1'd1 ;

  // value method fsls_2_getRxBSZ
  assign fsls_2_getRxBSZ = 32'd2 ;
  assign RDY_fsls_2_getRxBSZ = 1'd1 ;

  // value method fsls_3_canPut
  assign fsls_3_canPut = tb_portal3_from_bits_fifo$FULL_N ;
  assign RDY_fsls_3_canPut = 1'd1 ;

  // action method fsls_3_put
  assign RDY_fsls_3_put = tb_portal3_from_bits_fifo$FULL_N ;

  // value method fsls_3_canGet
  assign fsls_3_canGet = tb_portal3_to_bits_fifo$EMPTY_N ;
  assign RDY_fsls_3_canGet = 1'd1 ;

  // actionvalue method fsls_3_get
  assign fsls_3_get = x__h5960[31:0] ;
  assign RDY_fsls_3_get = tb_portal3_to_bits_fifo$EMPTY_N ;

  // value method fsls_3_getID
  assign fsls_3_getID = 32'd3 ;
  assign RDY_fsls_3_getID = 1'd1 ;

  // value method fsls_3_getTxBSZ
  assign fsls_3_getTxBSZ = 32'd2 ;
  assign RDY_fsls_3_getTxBSZ = 1'd1 ;

  // value method fsls_3_getRxBSZ
  assign fsls_3_getRxBSZ = 32'd2 ;
  assign RDY_fsls_3_getRxBSZ = 1'd1 ;

  // value method device_interrupt
  assign device_interrupt = 1'd0 ;
  assign RDY_device_interrupt = 1'd1 ;

  // value method device_led
  assign device_led = tb_ledReg ;
  assign RDY_device_led = 1'd1 ;

  // value method device_hw_cnt_read
  assign device_hw_cnt_read = tb_hw_cnt ;
  assign RDY_device_hw_cnt_read = 1'd1 ;

  // submodule tb_portal0_from_bits_fifo
  FIFO2 #(.width(32'd32),
	  .guarded(32'd0)) tb_portal0_from_bits_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(tb_portal0_from_bits_fifo$D_IN),
						     .ENQ(tb_portal0_from_bits_fifo$ENQ),
						     .DEQ(tb_portal0_from_bits_fifo$DEQ),
						     .CLR(tb_portal0_from_bits_fifo$CLR),
						     .D_OUT(tb_portal0_from_bits_fifo$D_OUT),
						     .FULL_N(tb_portal0_from_bits_fifo$FULL_N),
						     .EMPTY_N(tb_portal0_from_bits_fifo$EMPTY_N));

  // submodule tb_portal0_to_bits_fifo
  FIFO2 #(.width(32'd32),
	  .guarded(32'd0)) tb_portal0_to_bits_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(tb_portal0_to_bits_fifo$D_IN),
						   .ENQ(tb_portal0_to_bits_fifo$ENQ),
						   .DEQ(tb_portal0_to_bits_fifo$DEQ),
						   .CLR(tb_portal0_to_bits_fifo$CLR),
						   .D_OUT(tb_portal0_to_bits_fifo$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(tb_portal0_to_bits_fifo$EMPTY_N));

  // submodule tb_portal1_from_bits_fifo
  FIFO2 #(.width(32'd64),
	  .guarded(32'd0)) tb_portal1_from_bits_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(tb_portal1_from_bits_fifo$D_IN),
						     .ENQ(tb_portal1_from_bits_fifo$ENQ),
						     .DEQ(tb_portal1_from_bits_fifo$DEQ),
						     .CLR(tb_portal1_from_bits_fifo$CLR),
						     .D_OUT(),
						     .FULL_N(tb_portal1_from_bits_fifo$FULL_N),
						     .EMPTY_N(tb_portal1_from_bits_fifo$EMPTY_N));

  // submodule tb_portal1_to_bits_fifo
  FIFO2 #(.width(32'd64),
	  .guarded(32'd0)) tb_portal1_to_bits_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(tb_portal1_to_bits_fifo$D_IN),
						   .ENQ(tb_portal1_to_bits_fifo$ENQ),
						   .DEQ(tb_portal1_to_bits_fifo$DEQ),
						   .CLR(tb_portal1_to_bits_fifo$CLR),
						   .D_OUT(tb_portal1_to_bits_fifo$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(tb_portal1_to_bits_fifo$EMPTY_N));

  // submodule tb_portal2_from_bits_fifo
  FIFO2 #(.width(32'd64),
	  .guarded(32'd0)) tb_portal2_from_bits_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(tb_portal2_from_bits_fifo$D_IN),
						     .ENQ(tb_portal2_from_bits_fifo$ENQ),
						     .DEQ(tb_portal2_from_bits_fifo$DEQ),
						     .CLR(tb_portal2_from_bits_fifo$CLR),
						     .D_OUT(),
						     .FULL_N(tb_portal2_from_bits_fifo$FULL_N),
						     .EMPTY_N(tb_portal2_from_bits_fifo$EMPTY_N));

  // submodule tb_portal2_to_bits_fifo
  FIFO2 #(.width(32'd64),
	  .guarded(32'd0)) tb_portal2_to_bits_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(tb_portal2_to_bits_fifo$D_IN),
						   .ENQ(tb_portal2_to_bits_fifo$ENQ),
						   .DEQ(tb_portal2_to_bits_fifo$DEQ),
						   .CLR(tb_portal2_to_bits_fifo$CLR),
						   .D_OUT(tb_portal2_to_bits_fifo$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(tb_portal2_to_bits_fifo$EMPTY_N));

  // submodule tb_portal3_from_bits_fifo
  FIFO2 #(.width(32'd64),
	  .guarded(32'd0)) tb_portal3_from_bits_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(tb_portal3_from_bits_fifo$D_IN),
						     .ENQ(tb_portal3_from_bits_fifo$ENQ),
						     .DEQ(tb_portal3_from_bits_fifo$DEQ),
						     .CLR(tb_portal3_from_bits_fifo$CLR),
						     .D_OUT(),
						     .FULL_N(tb_portal3_from_bits_fifo$FULL_N),
						     .EMPTY_N(tb_portal3_from_bits_fifo$EMPTY_N));

  // submodule tb_portal3_to_bits_fifo
  FIFO2 #(.width(32'd64),
	  .guarded(32'd0)) tb_portal3_to_bits_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(tb_portal3_to_bits_fifo$D_IN),
						   .ENQ(tb_portal3_to_bits_fifo$ENQ),
						   .DEQ(tb_portal3_to_bits_fifo$DEQ),
						   .CLR(tb_portal3_to_bits_fifo$CLR),
						   .D_OUT(tb_portal3_to_bits_fifo$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(tb_portal3_to_bits_fifo$EMPTY_N));

  // register tb_hw_cnt
  assign tb_hw_cnt$D_IN = tb_hw_cnt + 32'd1 ;
  assign tb_hw_cnt$EN = tb_portal0_from_bits_fifo$EMPTY_N ;

  // register tb_ledReg
  assign tb_ledReg$D_IN = tb_portal0_from_bits_fifo$D_OUT[3:0] ;
  assign tb_ledReg$EN = tb_portal0_from_bits_fifo$EMPTY_N ;

  // register tb_portal0_from_bits_buff
  assign tb_portal0_from_bits_buff$D_IN = fsls_0_put_v ;
  assign tb_portal0_from_bits_buff$EN = EN_fsls_0_put ;

  // register tb_portal0_from_bits_count
  assign tb_portal0_from_bits_count$D_IN =
	     (tb_portal0_from_bits_count == 32'd0) ?
	       tb_portal0_from_bits_count :
	       x__h4182 ;
  assign tb_portal0_from_bits_count$EN = EN_fsls_0_put ;

  // register tb_portal0_to_bits_count
  assign tb_portal0_to_bits_count$D_IN =
	     (tb_portal0_to_bits_count == 32'd0) ?
	       tb_portal0_to_bits_count :
	       x__h4386 ;
  assign tb_portal0_to_bits_count$EN = EN_fsls_0_get ;

  // register tb_portal1_from_bits_buff
  assign tb_portal1_from_bits_buff$D_IN =
	     (tb_portal1_from_bits_count == 32'd1) ?
	       { fsls_1_put_v, tb_portal1_from_bits_buff[63:32] } :
	       longval__h4721 ;
  assign tb_portal1_from_bits_buff$EN = EN_fsls_1_put ;

  // register tb_portal1_from_bits_count
  assign tb_portal1_from_bits_count$D_IN =
	     (tb_portal1_from_bits_count == 32'd1) ? 32'd0 : x__h4675 ;
  assign tb_portal1_from_bits_count$EN = EN_fsls_1_put ;

  // register tb_portal1_to_bits_count
  assign tb_portal1_to_bits_count$D_IN =
	     (tb_portal1_to_bits_count == 32'd1) ? 32'd0 : x__h4882 ;
  assign tb_portal1_to_bits_count$EN = EN_fsls_1_get ;

  // register tb_portal2_from_bits_buff
  assign tb_portal2_from_bits_buff$D_IN =
	     (tb_portal2_from_bits_count == 32'd1) ?
	       { fsls_2_put_v, tb_portal2_from_bits_buff[63:32] } :
	       longval__h5217 ;
  assign tb_portal2_from_bits_buff$EN = EN_fsls_2_put ;

  // register tb_portal2_from_bits_count
  assign tb_portal2_from_bits_count$D_IN =
	     (tb_portal2_from_bits_count == 32'd1) ? 32'd0 : x__h5171 ;
  assign tb_portal2_from_bits_count$EN = EN_fsls_2_put ;

  // register tb_portal2_to_bits_count
  assign tb_portal2_to_bits_count$D_IN =
	     (tb_portal2_to_bits_count == 32'd1) ? 32'd0 : x__h5378 ;
  assign tb_portal2_to_bits_count$EN = EN_fsls_2_get ;

  // register tb_portal3_from_bits_buff
  assign tb_portal3_from_bits_buff$D_IN =
	     (tb_portal3_from_bits_count == 32'd1) ?
	       { fsls_3_put_v, tb_portal3_from_bits_buff[63:32] } :
	       longval__h5713 ;
  assign tb_portal3_from_bits_buff$EN = EN_fsls_3_put ;

  // register tb_portal3_from_bits_count
  assign tb_portal3_from_bits_count$D_IN =
	     (tb_portal3_from_bits_count == 32'd1) ? 32'd0 : x__h5667 ;
  assign tb_portal3_from_bits_count$EN = EN_fsls_3_put ;

  // register tb_portal3_to_bits_count
  assign tb_portal3_to_bits_count$D_IN =
	     (tb_portal3_to_bits_count == 32'd1) ? 32'd0 : x__h5874 ;
  assign tb_portal3_to_bits_count$EN = EN_fsls_3_get ;

  // submodule tb_portal0_from_bits_fifo
  assign tb_portal0_from_bits_fifo$D_IN = fsls_0_put_v ;
  assign tb_portal0_from_bits_fifo$ENQ =
	     EN_fsls_0_put && tb_portal0_from_bits_count == 32'd0 ;
  assign tb_portal0_from_bits_fifo$DEQ = tb_portal0_from_bits_fifo$EMPTY_N ;
  assign tb_portal0_from_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal0_to_bits_fifo
  assign tb_portal0_to_bits_fifo$D_IN = 32'h0 ;
  assign tb_portal0_to_bits_fifo$ENQ = 1'b0 ;
  assign tb_portal0_to_bits_fifo$DEQ =
	     EN_fsls_0_get && tb_portal0_to_bits_count == 32'd0 ;
  assign tb_portal0_to_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal1_from_bits_fifo
  assign tb_portal1_from_bits_fifo$D_IN = longval__h4721 ;
  assign tb_portal1_from_bits_fifo$ENQ =
	     EN_fsls_1_put && tb_portal1_from_bits_count == 32'd1 ;
  assign tb_portal1_from_bits_fifo$DEQ = tb_portal1_from_bits_fifo$EMPTY_N ;
  assign tb_portal1_from_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal1_to_bits_fifo
  assign tb_portal1_to_bits_fifo$D_IN = 64'h0 ;
  assign tb_portal1_to_bits_fifo$ENQ = 1'b0 ;
  assign tb_portal1_to_bits_fifo$DEQ =
	     EN_fsls_1_get && tb_portal1_to_bits_count == 32'd1 ;
  assign tb_portal1_to_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal2_from_bits_fifo
  assign tb_portal2_from_bits_fifo$D_IN = longval__h5217 ;
  assign tb_portal2_from_bits_fifo$ENQ =
	     EN_fsls_2_put && tb_portal2_from_bits_count == 32'd1 ;
  assign tb_portal2_from_bits_fifo$DEQ = tb_portal2_from_bits_fifo$EMPTY_N ;
  assign tb_portal2_from_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal2_to_bits_fifo
  assign tb_portal2_to_bits_fifo$D_IN = 64'h0 ;
  assign tb_portal2_to_bits_fifo$ENQ = 1'b0 ;
  assign tb_portal2_to_bits_fifo$DEQ =
	     EN_fsls_2_get && tb_portal2_to_bits_count == 32'd1 ;
  assign tb_portal2_to_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal3_from_bits_fifo
  assign tb_portal3_from_bits_fifo$D_IN = longval__h5713 ;
  assign tb_portal3_from_bits_fifo$ENQ =
	     EN_fsls_3_put && tb_portal3_from_bits_count == 32'd1 ;
  assign tb_portal3_from_bits_fifo$DEQ = tb_portal3_from_bits_fifo$EMPTY_N ;
  assign tb_portal3_from_bits_fifo$CLR = 1'b0 ;

  // submodule tb_portal3_to_bits_fifo
  assign tb_portal3_to_bits_fifo$D_IN = 64'h0 ;
  assign tb_portal3_to_bits_fifo$ENQ = 1'b0 ;
  assign tb_portal3_to_bits_fifo$DEQ =
	     EN_fsls_3_get && tb_portal3_to_bits_count == 32'd1 ;
  assign tb_portal3_to_bits_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign longval__h4721 = { fsls_1_put_v, tb_portal1_from_bits_buff[63:32] } ;
  assign longval__h5217 = { fsls_2_put_v, tb_portal2_from_bits_buff[63:32] } ;
  assign longval__h5713 = { fsls_3_put_v, tb_portal3_from_bits_buff[63:32] } ;
  assign x__h4182 = tb_portal0_from_bits_count + 32'd1 ;
  assign x__h4386 = tb_portal0_to_bits_count + 32'd1 ;
  assign x__h4478 = { tb_portal0_to_bits_count[26:0], 5'd0 } ;
  assign x__h4675 = tb_portal1_from_bits_count + 32'd1 ;
  assign x__h4882 = tb_portal1_to_bits_count + 32'd1 ;
  assign x__h4968 = tb_portal1_to_bits_fifo$D_OUT >> x__h4974 ;
  assign x__h4974 = { tb_portal1_to_bits_count[26:0], 5'd0 } ;
  assign x__h5171 = tb_portal2_from_bits_count + 32'd1 ;
  assign x__h5378 = tb_portal2_to_bits_count + 32'd1 ;
  assign x__h5464 = tb_portal2_to_bits_fifo$D_OUT >> x__h5470 ;
  assign x__h5470 = { tb_portal2_to_bits_count[26:0], 5'd0 } ;
  assign x__h5667 = tb_portal3_from_bits_count + 32'd1 ;
  assign x__h5874 = tb_portal3_to_bits_count + 32'd1 ;
  assign x__h5960 = tb_portal3_to_bits_fifo$D_OUT >> x__h5966 ;
  assign x__h5966 = { tb_portal3_to_bits_count[26:0], 5'd0 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        tb_hw_cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_ledReg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	tb_portal0_from_bits_buff <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal0_from_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal0_to_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal1_from_bits_buff <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tb_portal1_from_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal1_to_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal2_from_bits_buff <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tb_portal2_from_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal2_to_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal3_from_bits_buff <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tb_portal3_from_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tb_portal3_to_bits_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (tb_hw_cnt$EN) tb_hw_cnt <= `BSV_ASSIGNMENT_DELAY tb_hw_cnt$D_IN;
	if (tb_ledReg$EN) tb_ledReg <= `BSV_ASSIGNMENT_DELAY tb_ledReg$D_IN;
	if (tb_portal0_from_bits_buff$EN)
	  tb_portal0_from_bits_buff <= `BSV_ASSIGNMENT_DELAY
	      tb_portal0_from_bits_buff$D_IN;
	if (tb_portal0_from_bits_count$EN)
	  tb_portal0_from_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal0_from_bits_count$D_IN;
	if (tb_portal0_to_bits_count$EN)
	  tb_portal0_to_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal0_to_bits_count$D_IN;
	if (tb_portal1_from_bits_buff$EN)
	  tb_portal1_from_bits_buff <= `BSV_ASSIGNMENT_DELAY
	      tb_portal1_from_bits_buff$D_IN;
	if (tb_portal1_from_bits_count$EN)
	  tb_portal1_from_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal1_from_bits_count$D_IN;
	if (tb_portal1_to_bits_count$EN)
	  tb_portal1_to_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal1_to_bits_count$D_IN;
	if (tb_portal2_from_bits_buff$EN)
	  tb_portal2_from_bits_buff <= `BSV_ASSIGNMENT_DELAY
	      tb_portal2_from_bits_buff$D_IN;
	if (tb_portal2_from_bits_count$EN)
	  tb_portal2_from_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal2_from_bits_count$D_IN;
	if (tb_portal2_to_bits_count$EN)
	  tb_portal2_to_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal2_to_bits_count$D_IN;
	if (tb_portal3_from_bits_buff$EN)
	  tb_portal3_from_bits_buff <= `BSV_ASSIGNMENT_DELAY
	      tb_portal3_from_bits_buff$D_IN;
	if (tb_portal3_from_bits_count$EN)
	  tb_portal3_from_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal3_from_bits_count$D_IN;
	if (tb_portal3_to_bits_count$EN)
	  tb_portal3_to_bits_count <= `BSV_ASSIGNMENT_DELAY
	      tb_portal3_to_bits_count$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    tb_hw_cnt = 32'hAAAAAAAA;
    tb_ledReg = 4'hA;
    tb_portal0_from_bits_buff = 32'hAAAAAAAA;
    tb_portal0_from_bits_count = 32'hAAAAAAAA;
    tb_portal0_to_bits_count = 32'hAAAAAAAA;
    tb_portal1_from_bits_buff = 64'hAAAAAAAAAAAAAAAA;
    tb_portal1_from_bits_count = 32'hAAAAAAAA;
    tb_portal1_to_bits_count = 32'hAAAAAAAA;
    tb_portal2_from_bits_buff = 64'hAAAAAAAAAAAAAAAA;
    tb_portal2_from_bits_count = 32'hAAAAAAAA;
    tb_portal2_to_bits_count = 32'hAAAAAAAA;
    tb_portal3_from_bits_buff = 64'hAAAAAAAAAAAAAAAA;
    tb_portal3_from_bits_count = 32'hAAAAAAAA;
    tb_portal3_to_bits_count = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFSLVec

