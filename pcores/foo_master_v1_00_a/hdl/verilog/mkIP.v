//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Tue Nov 20 16:01:10 EST 2012
//
// Method conflict info:
// Method: put
// Conflict-free: error, interrupt
// Sequenced before (restricted): put
// Sequenced after: get
//
// Method: get
// Conflict-free: get, error, interrupt
// Sequenced before: put
//
// Method: error
// Conflict-free: put, get, error, interrupt
//
// Method: interrupt
// Conflict-free: put, get, error, interrupt
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1 const
// get                            O    32 reg
// RDY_get                        O     1 const
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1 const
// RDY_interrupt                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_v                          I    32 reg
// EN_put                         I     1
// EN_get                         I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIP(CLK,
	    RST_N,

	    put_v,
	    EN_put,
	    RDY_put,

	    EN_get,
	    get,
	    RDY_get,

	    error,
	    RDY_error,

	    interrupt,
	    RDY_interrupt);
  input  CLK;
  input  RST_N;

  // action method put
  input  [31 : 0] put_v;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_error, RDY_get, RDY_interrupt, RDY_put, error, interrupt;

  // register r
  reg [31 : 0] r;
  wire [31 : 0] r$D_IN;
  wire r$EN;

  // action method put
  assign RDY_put = 1'd1 ;

  // actionvalue method get
  assign get = r ;
  assign RDY_get = 1'd1 ;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt = 1'd0 ;
  assign RDY_interrupt = 1'd1 ;

  // register r
  assign r$D_IN = put_v ;
  assign r$EN = EN_put ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        r <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (r$EN) r <= `BSV_ASSIGNMENT_DELAY r$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    r = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkIP

