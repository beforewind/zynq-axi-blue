//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Mon Jan 21 14:26:05 EST 2013
//
// Method conflict info:
// Method: error
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: interrupt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: ctrl_put
//
// Method: ctrl_put
// Conflict-free: error,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before (restricted): ctrl_put
// Sequenced after: interrupt, ctrl_get
//
// Method: ctrl_get
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced before: ctrl_put, fifo_put, fifo_get
//
// Method: fifo_put
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: ctrl_get
// Conflicts: fifo_put
//
// Method: fifo_get
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       fifo_put,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Sequenced after: ctrl_get
// Conflicts: fifo_get
//
// Method: axiw0_writeAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeDataByteEnable
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeLastDataBeat
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axiw0_writeResponse
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readAddr
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: axir0_readAddr
//
// Method: axir0_readBurstLen
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstWidth
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstType
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstProt
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readBurstCache
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readId
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: axir0_readData
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
// Conflicts: axir0_readData
//
// Method: hdmi_hdmi_vsync
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_hsync
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_de
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
// Method: hdmi_hdmi_data
// Conflict-free: error,
// 	       interrupt,
// 	       ctrl_put,
// 	       ctrl_get,
// 	       fifo_put,
// 	       fifo_get,
// 	       axiw0_writeAddr,
// 	       axiw0_writeBurstLen,
// 	       axiw0_writeBurstWidth,
// 	       axiw0_writeBurstType,
// 	       axiw0_writeBurstProt,
// 	       axiw0_writeBurstCache,
// 	       axiw0_writeId,
// 	       axiw0_writeData,
// 	       axiw0_writeDataByteEnable,
// 	       axiw0_writeLastDataBeat,
// 	       axiw0_writeResponse,
// 	       axir0_readAddr,
// 	       axir0_readBurstLen,
// 	       axir0_readBurstWidth,
// 	       axir0_readBurstType,
// 	       axir0_readBurstProt,
// 	       axir0_readBurstCache,
// 	       axir0_readId,
// 	       axir0_readData,
// 	       hdmi_hdmi_vsync,
// 	       hdmi_hdmi_hsync,
// 	       hdmi_hdmi_de,
// 	       hdmi_hdmi_data
//
//
// Ports:
// Name                         I/O  size props
// error                          O     1 const
// RDY_error                      O     1 const
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// RDY_ctrl_put                   O     1 const
// ctrl_get                       O    32
// RDY_ctrl_get                   O     1 const
// RDY_fifo_put                   O     1
// fifo_get                       O    32
// RDY_fifo_get                   O     1 const
// axiw0_writeAddr                O    32 const
// RDY_axiw0_writeAddr            O     1 const
// axiw0_writeBurstLen            O     8 const
// RDY_axiw0_writeBurstLen        O     1 const
// axiw0_writeBurstWidth          O     3 const
// RDY_axiw0_writeBurstWidth      O     1 const
// axiw0_writeBurstType           O     2 const
// RDY_axiw0_writeBurstType       O     1 const
// axiw0_writeBurstProt           O     3 const
// RDY_axiw0_writeBurstProt       O     1 const
// axiw0_writeBurstCache          O     4 const
// RDY_axiw0_writeBurstCache      O     1 const
// axiw0_writeId                  O     1 const
// RDY_axiw0_writeId              O     1 const
// axiw0_writeData                O    64 const
// RDY_axiw0_writeData            O     1 const
// axiw0_writeDataByteEnable      O     8 const
// RDY_axiw0_writeDataByteEnable  O     1 const
// axiw0_writeLastDataBeat        O     1 const
// RDY_axiw0_writeLastDataBeat    O     1 const
// RDY_axiw0_writeResponse        O     1 const
// axir0_readAddr                 O    32
// RDY_axir0_readAddr             O     1
// axir0_readBurstLen             O     8 const
// RDY_axir0_readBurstLen         O     1 const
// axir0_readBurstWidth           O     3 const
// RDY_axir0_readBurstWidth       O     1 const
// axir0_readBurstType            O     2 const
// RDY_axir0_readBurstType        O     1 const
// axir0_readBurstProt            O     3 const
// RDY_axir0_readBurstProt        O     1 const
// axir0_readBurstCache           O     4 const
// RDY_axir0_readBurstCache       O     1 const
// axir0_readId                   O     1 const
// RDY_axir0_readId               O     1 const
// RDY_axir0_readData             O     1 const
// hdmi_hdmi_vsync                O     1 reg
// RDY_hdmi_hdmi_vsync            O     1 const
// hdmi_hdmi_hsync                O     1 reg
// RDY_hdmi_hdmi_hsync            O     1 const
// hdmi_hdmi_de                   O     1 reg
// RDY_hdmi_hdmi_de               O     1 const
// hdmi_hdmi_data                 O    16 reg
// RDY_hdmi_hdmi_data             O     1 const
// CLK_hdmi_ref_clk               I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ctrl_put_addr                  I    12
// ctrl_put_v                     I    32
// ctrl_get_addr                  I    12
// fifo_put_addr                  I    12 unused
// fifo_put_v                     I    32
// fifo_get_addr                  I    12 unused
// axiw0_writeResponse_responseCode  I     2 unused
// axiw0_writeResponse_id         I     1 unused
// axir0_readData_data            I    64
// axir0_readData_resp            I     2 unused
// axir0_readData_last            I     1 unused
// axir0_readData_id              I     1 unused
// EN_ctrl_put                    I     1
// EN_fifo_put                    I     1
// EN_axiw0_writeResponse         I     1 unused
// EN_axir0_readData              I     1
// EN_ctrl_get                    I     1 unused
// EN_fifo_get                    I     1
// EN_axiw0_writeAddr             I     1 unused
// EN_axiw0_writeData             I     1 unused
// EN_axir0_readAddr              I     1
//
// Combinational paths from inputs to outputs:
//   ctrl_get_addr -> ctrl_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIpSlaveWithMaster(CLK_hdmi_ref_clk,
			   CLK,
			   RST_N,

			   error,
			   RDY_error,

			   interrupt,
			   RDY_interrupt,

			   ctrl_put_addr,
			   ctrl_put_v,
			   EN_ctrl_put,
			   RDY_ctrl_put,

			   ctrl_get_addr,
			   EN_ctrl_get,
			   ctrl_get,
			   RDY_ctrl_get,

			   fifo_put_addr,
			   fifo_put_v,
			   EN_fifo_put,
			   RDY_fifo_put,

			   fifo_get_addr,
			   EN_fifo_get,
			   fifo_get,
			   RDY_fifo_get,

			   EN_axiw0_writeAddr,
			   axiw0_writeAddr,
			   RDY_axiw0_writeAddr,

			   axiw0_writeBurstLen,
			   RDY_axiw0_writeBurstLen,

			   axiw0_writeBurstWidth,
			   RDY_axiw0_writeBurstWidth,

			   axiw0_writeBurstType,
			   RDY_axiw0_writeBurstType,

			   axiw0_writeBurstProt,
			   RDY_axiw0_writeBurstProt,

			   axiw0_writeBurstCache,
			   RDY_axiw0_writeBurstCache,

			   axiw0_writeId,
			   RDY_axiw0_writeId,

			   EN_axiw0_writeData,
			   axiw0_writeData,
			   RDY_axiw0_writeData,

			   axiw0_writeDataByteEnable,
			   RDY_axiw0_writeDataByteEnable,

			   axiw0_writeLastDataBeat,
			   RDY_axiw0_writeLastDataBeat,

			   axiw0_writeResponse_responseCode,
			   axiw0_writeResponse_id,
			   EN_axiw0_writeResponse,
			   RDY_axiw0_writeResponse,

			   EN_axir0_readAddr,
			   axir0_readAddr,
			   RDY_axir0_readAddr,

			   axir0_readBurstLen,
			   RDY_axir0_readBurstLen,

			   axir0_readBurstWidth,
			   RDY_axir0_readBurstWidth,

			   axir0_readBurstType,
			   RDY_axir0_readBurstType,

			   axir0_readBurstProt,
			   RDY_axir0_readBurstProt,

			   axir0_readBurstCache,
			   RDY_axir0_readBurstCache,

			   axir0_readId,
			   RDY_axir0_readId,

			   axir0_readData_data,
			   axir0_readData_resp,
			   axir0_readData_last,
			   axir0_readData_id,
			   EN_axir0_readData,
			   RDY_axir0_readData,

			   hdmi_hdmi_vsync,
			   RDY_hdmi_hdmi_vsync,

			   hdmi_hdmi_hsync,
			   RDY_hdmi_hdmi_hsync,

			   hdmi_hdmi_de,
			   RDY_hdmi_hdmi_de,

			   hdmi_hdmi_data,
			   RDY_hdmi_hdmi_data);
  input  CLK_hdmi_ref_clk;
  input  CLK;
  input  RST_N;

  // value method error
  output error;
  output RDY_error;

  // value method interrupt
  output interrupt;
  output RDY_interrupt;

  // action method ctrl_put
  input  [11 : 0] ctrl_put_addr;
  input  [31 : 0] ctrl_put_v;
  input  EN_ctrl_put;
  output RDY_ctrl_put;

  // actionvalue method ctrl_get
  input  [11 : 0] ctrl_get_addr;
  input  EN_ctrl_get;
  output [31 : 0] ctrl_get;
  output RDY_ctrl_get;

  // action method fifo_put
  input  [11 : 0] fifo_put_addr;
  input  [31 : 0] fifo_put_v;
  input  EN_fifo_put;
  output RDY_fifo_put;

  // actionvalue method fifo_get
  input  [11 : 0] fifo_get_addr;
  input  EN_fifo_get;
  output [31 : 0] fifo_get;
  output RDY_fifo_get;

  // actionvalue method axiw0_writeAddr
  input  EN_axiw0_writeAddr;
  output [31 : 0] axiw0_writeAddr;
  output RDY_axiw0_writeAddr;

  // value method axiw0_writeBurstLen
  output [7 : 0] axiw0_writeBurstLen;
  output RDY_axiw0_writeBurstLen;

  // value method axiw0_writeBurstWidth
  output [2 : 0] axiw0_writeBurstWidth;
  output RDY_axiw0_writeBurstWidth;

  // value method axiw0_writeBurstType
  output [1 : 0] axiw0_writeBurstType;
  output RDY_axiw0_writeBurstType;

  // value method axiw0_writeBurstProt
  output [2 : 0] axiw0_writeBurstProt;
  output RDY_axiw0_writeBurstProt;

  // value method axiw0_writeBurstCache
  output [3 : 0] axiw0_writeBurstCache;
  output RDY_axiw0_writeBurstCache;

  // value method axiw0_writeId
  output axiw0_writeId;
  output RDY_axiw0_writeId;

  // actionvalue method axiw0_writeData
  input  EN_axiw0_writeData;
  output [63 : 0] axiw0_writeData;
  output RDY_axiw0_writeData;

  // value method axiw0_writeDataByteEnable
  output [7 : 0] axiw0_writeDataByteEnable;
  output RDY_axiw0_writeDataByteEnable;

  // value method axiw0_writeLastDataBeat
  output axiw0_writeLastDataBeat;
  output RDY_axiw0_writeLastDataBeat;

  // action method axiw0_writeResponse
  input  [1 : 0] axiw0_writeResponse_responseCode;
  input  axiw0_writeResponse_id;
  input  EN_axiw0_writeResponse;
  output RDY_axiw0_writeResponse;

  // actionvalue method axir0_readAddr
  input  EN_axir0_readAddr;
  output [31 : 0] axir0_readAddr;
  output RDY_axir0_readAddr;

  // value method axir0_readBurstLen
  output [7 : 0] axir0_readBurstLen;
  output RDY_axir0_readBurstLen;

  // value method axir0_readBurstWidth
  output [2 : 0] axir0_readBurstWidth;
  output RDY_axir0_readBurstWidth;

  // value method axir0_readBurstType
  output [1 : 0] axir0_readBurstType;
  output RDY_axir0_readBurstType;

  // value method axir0_readBurstProt
  output [2 : 0] axir0_readBurstProt;
  output RDY_axir0_readBurstProt;

  // value method axir0_readBurstCache
  output [3 : 0] axir0_readBurstCache;
  output RDY_axir0_readBurstCache;

  // value method axir0_readId
  output axir0_readId;
  output RDY_axir0_readId;

  // action method axir0_readData
  input  [63 : 0] axir0_readData_data;
  input  [1 : 0] axir0_readData_resp;
  input  axir0_readData_last;
  input  axir0_readData_id;
  input  EN_axir0_readData;
  output RDY_axir0_readData;

  // value method hdmi_hdmi_vsync
  output hdmi_hdmi_vsync;
  output RDY_hdmi_hdmi_vsync;

  // value method hdmi_hdmi_hsync
  output hdmi_hdmi_hsync;
  output RDY_hdmi_hdmi_hsync;

  // value method hdmi_hdmi_de
  output hdmi_hdmi_de;
  output RDY_hdmi_hdmi_de;

  // value method hdmi_hdmi_data
  output [15 : 0] hdmi_hdmi_data;
  output RDY_hdmi_hdmi_data;

  // signals for module outputs
  reg [31 : 0] ctrl_get;
  wire [63 : 0] axiw0_writeData;
  wire [31 : 0] axir0_readAddr, axiw0_writeAddr, fifo_get;
  wire [15 : 0] hdmi_hdmi_data;
  wire [7 : 0] axir0_readBurstLen,
	       axiw0_writeBurstLen,
	       axiw0_writeDataByteEnable;
  wire [3 : 0] axir0_readBurstCache, axiw0_writeBurstCache;
  wire [2 : 0] axir0_readBurstProt,
	       axir0_readBurstWidth,
	       axiw0_writeBurstProt,
	       axiw0_writeBurstWidth;
  wire [1 : 0] axir0_readBurstType, axiw0_writeBurstType;
  wire RDY_axir0_readAddr,
       RDY_axir0_readBurstCache,
       RDY_axir0_readBurstLen,
       RDY_axir0_readBurstProt,
       RDY_axir0_readBurstType,
       RDY_axir0_readBurstWidth,
       RDY_axir0_readData,
       RDY_axir0_readId,
       RDY_axiw0_writeAddr,
       RDY_axiw0_writeBurstCache,
       RDY_axiw0_writeBurstLen,
       RDY_axiw0_writeBurstProt,
       RDY_axiw0_writeBurstType,
       RDY_axiw0_writeBurstWidth,
       RDY_axiw0_writeData,
       RDY_axiw0_writeDataByteEnable,
       RDY_axiw0_writeId,
       RDY_axiw0_writeLastDataBeat,
       RDY_axiw0_writeResponse,
       RDY_ctrl_get,
       RDY_ctrl_put,
       RDY_error,
       RDY_fifo_get,
       RDY_fifo_put,
       RDY_hdmi_hdmi_data,
       RDY_hdmi_hdmi_de,
       RDY_hdmi_hdmi_hsync,
       RDY_hdmi_hdmi_vsync,
       RDY_interrupt,
       axir0_readId,
       axiw0_writeId,
       axiw0_writeLastDataBeat,
       error,
       hdmi_hdmi_de,
       hdmi_hdmi_hsync,
       hdmi_hdmi_vsync,
       interrupt;

  // inlined wires
  wire [35 : 0] requestFifo_fifo_wDataIn$wget, requestFifo_fifo_wDataOut$wget;
  wire requestFifo_fifo_pwDequeue$whas, requestFifo_fifo_pwEnqueue$whas;

  // register dutWrapper_blockedRequestsDiscardedReg
  reg [31 : 0] dutWrapper_blockedRequestsDiscardedReg;
  wire [31 : 0] dutWrapper_blockedRequestsDiscardedReg$D_IN;
  wire dutWrapper_blockedRequestsDiscardedReg$EN;

  // register dutWrapper_blockedResponsesDiscardedReg
  reg [31 : 0] dutWrapper_blockedResponsesDiscardedReg;
  wire [31 : 0] dutWrapper_blockedResponsesDiscardedReg$D_IN;
  wire dutWrapper_blockedResponsesDiscardedReg$EN;

  // register dutWrapper_dut_frameBufferEnabled
  reg dutWrapper_dut_frameBufferEnabled;
  wire dutWrapper_dut_frameBufferEnabled$D_IN,
       dutWrapper_dut_frameBufferEnabled$EN;

  // register dutWrapper_dut_frameBuffer_fbc
  reg [68 : 0] dutWrapper_dut_frameBuffer_fbc;
  wire [68 : 0] dutWrapper_dut_frameBuffer_fbc$D_IN;
  wire dutWrapper_dut_frameBuffer_fbc$EN;

  // register dutWrapper_dut_frameBuffer_lineAddrReg
  reg [23 : 0] dutWrapper_dut_frameBuffer_lineAddrReg;
  wire [23 : 0] dutWrapper_dut_frameBuffer_lineAddrReg$D_IN;
  wire dutWrapper_dut_frameBuffer_lineAddrReg$EN;

  // register dutWrapper_dut_frameBuffer_lineCountReg
  reg [10 : 0] dutWrapper_dut_frameBuffer_lineCountReg;
  wire [10 : 0] dutWrapper_dut_frameBuffer_lineCountReg$D_IN;
  wire dutWrapper_dut_frameBuffer_lineCountReg$EN;

  // register dutWrapper_dut_frameBuffer_nextFbc
  reg [68 : 0] dutWrapper_dut_frameBuffer_nextFbc;
  wire [68 : 0] dutWrapper_dut_frameBuffer_nextFbc$D_IN;
  wire dutWrapper_dut_frameBuffer_nextFbc$EN;

  // register dutWrapper_dut_frameBuffer_nextent2Enabled
  reg dutWrapper_dut_frameBuffer_nextent2Enabled;
  wire dutWrapper_dut_frameBuffer_nextent2Enabled$D_IN,
       dutWrapper_dut_frameBuffer_nextent2Enabled$EN;

  // register dutWrapper_dut_frameBuffer_pixelCountReg
  reg [11 : 0] dutWrapper_dut_frameBuffer_pixelCountReg;
  wire [11 : 0] dutWrapper_dut_frameBuffer_pixelCountReg$D_IN;
  wire dutWrapper_dut_frameBuffer_pixelCountReg$EN;

  // register dutWrapper_dut_frameBuffer_pixelCountReg2
  reg [11 : 0] dutWrapper_dut_frameBuffer_pixelCountReg2;
  wire [11 : 0] dutWrapper_dut_frameBuffer_pixelCountReg2$D_IN;
  wire dutWrapper_dut_frameBuffer_pixelCountReg2$EN;

  // register dutWrapper_dut_frameBuffer_readAddrReg
  reg [23 : 0] dutWrapper_dut_frameBuffer_readAddrReg;
  reg [23 : 0] dutWrapper_dut_frameBuffer_readAddrReg$D_IN;
  wire dutWrapper_dut_frameBuffer_readAddrReg$EN;

  // register dutWrapper_dut_frameBuffer_readLimitReg
  reg [23 : 0] dutWrapper_dut_frameBuffer_readLimitReg;
  wire [23 : 0] dutWrapper_dut_frameBuffer_readLimitReg$D_IN;
  wire dutWrapper_dut_frameBuffer_readLimitReg$EN;

  // register dutWrapper_dut_frameBuffer_readingReg
  reg [96 : 0] dutWrapper_dut_frameBuffer_readingReg;
  reg [96 : 0] dutWrapper_dut_frameBuffer_readingReg$D_IN;
  wire dutWrapper_dut_frameBuffer_readingReg$EN;

  // register dutWrapper_dut_frameBuffer_runningReg
  reg dutWrapper_dut_frameBuffer_runningReg;
  wire dutWrapper_dut_frameBuffer_runningReg$D_IN,
       dutWrapper_dut_frameBuffer_runningReg$EN;

  // register dutWrapper_dut_frameBuffer_segmentLimitReg
  reg [23 : 0] dutWrapper_dut_frameBuffer_segmentLimitReg;
  wire [23 : 0] dutWrapper_dut_frameBuffer_segmentLimitReg$D_IN;
  wire dutWrapper_dut_frameBuffer_segmentLimitReg$EN;

  // register dutWrapper_dut_frameBuffer_segmentOffsetReg
  reg [31 : 0] dutWrapper_dut_frameBuffer_segmentOffsetReg;
  wire [31 : 0] dutWrapper_dut_frameBuffer_segmentOffsetReg$D_IN;
  wire dutWrapper_dut_frameBuffer_segmentOffsetReg$EN;

  // register dutWrapper_dut_frameBuffer_sglistIndexReg
  reg [7 : 0] dutWrapper_dut_frameBuffer_sglistIndexReg;
  wire [7 : 0] dutWrapper_dut_frameBuffer_sglistIndexReg$D_IN;
  wire dutWrapper_dut_frameBuffer_sglistIndexReg$EN;

  // register dutWrapper_dut_frameBuffer_startFrameEnabled
  reg dutWrapper_dut_frameBuffer_startFrameEnabled;
  wire dutWrapper_dut_frameBuffer_startFrameEnabled$D_IN,
       dutWrapper_dut_frameBuffer_startFrameEnabled$EN;

  // register dutWrapper_dut_frameBuffer_traceReadingReg
  reg dutWrapper_dut_frameBuffer_traceReadingReg;
  wire dutWrapper_dut_frameBuffer_traceReadingReg$D_IN,
       dutWrapper_dut_frameBuffer_traceReadingReg$EN;

  // register dutWrapper_dut_frameCountReg
  reg [31 : 0] dutWrapper_dut_frameCountReg;
  wire [31 : 0] dutWrapper_dut_frameCountReg$D_IN;
  wire dutWrapper_dut_frameCountReg$EN;

  // register dutWrapper_dut_hdmiTpg_dataCount
  reg [11 : 0] dutWrapper_dut_hdmiTpg_dataCount;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_dataCount$D_IN;
  wire dutWrapper_dut_hdmiTpg_dataCount$EN;

  // register dutWrapper_dut_hdmiTpg_deLineCountMaximum
  reg [10 : 0] dutWrapper_dut_hdmiTpg_deLineCountMaximum;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_deLineCountMaximum$D_IN;
  wire dutWrapper_dut_hdmiTpg_deLineCountMaximum$EN;

  // register dutWrapper_dut_hdmiTpg_deLineCountMinimum
  reg [10 : 0] dutWrapper_dut_hdmiTpg_deLineCountMinimum;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_deLineCountMinimum$D_IN;
  wire dutWrapper_dut_hdmiTpg_deLineCountMinimum$EN;

  // register dutWrapper_dut_hdmiTpg_dePixelCountMaximum
  reg [11 : 0] dutWrapper_dut_hdmiTpg_dePixelCountMaximum;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_dePixelCountMaximum$D_IN;
  wire dutWrapper_dut_hdmiTpg_dePixelCountMaximum$EN;

  // register dutWrapper_dut_hdmiTpg_dePixelCountMinimum
  reg [11 : 0] dutWrapper_dut_hdmiTpg_dePixelCountMinimum;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_dePixelCountMinimum$D_IN;
  wire dutWrapper_dut_hdmiTpg_dePixelCountMinimum$EN;

  // register dutWrapper_dut_hdmiTpg_evenOddPixelReg
  reg dutWrapper_dut_hdmiTpg_evenOddPixelReg;
  wire dutWrapper_dut_hdmiTpg_evenOddPixelReg$D_IN,
       dutWrapper_dut_hdmiTpg_evenOddPixelReg$EN;

  // register dutWrapper_dut_hdmiTpg_hsyncWidth
  reg [11 : 0] dutWrapper_dut_hdmiTpg_hsyncWidth;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_hsyncWidth$D_IN;
  wire dutWrapper_dut_hdmiTpg_hsyncWidth$EN;

  // register dutWrapper_dut_hdmiTpg_lineCount
  reg [10 : 0] dutWrapper_dut_hdmiTpg_lineCount;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_lineCount$D_IN;
  wire dutWrapper_dut_hdmiTpg_lineCount$EN;

  // register dutWrapper_dut_hdmiTpg_lineMidpoint
  reg [10 : 0] dutWrapper_dut_hdmiTpg_lineMidpoint;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_lineMidpoint$D_IN;
  wire dutWrapper_dut_hdmiTpg_lineMidpoint$EN;

  // register dutWrapper_dut_hdmiTpg_numberOfLines
  reg [10 : 0] dutWrapper_dut_hdmiTpg_numberOfLines;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_numberOfLines$D_IN;
  wire dutWrapper_dut_hdmiTpg_numberOfLines$EN;

  // register dutWrapper_dut_hdmiTpg_numberOfPixels
  reg [11 : 0] dutWrapper_dut_hdmiTpg_numberOfPixels;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_numberOfPixels$D_IN;
  wire dutWrapper_dut_hdmiTpg_numberOfPixels$EN;

  // register dutWrapper_dut_hdmiTpg_patternReg0
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternReg0;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternReg0$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternReg0$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs_1
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_1;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_1$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs_1$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs_2
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_2;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_2$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs_2$EN;

  // register dutWrapper_dut_hdmiTpg_patternRegs_3
  reg [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_3;
  wire [31 : 0] dutWrapper_dut_hdmiTpg_patternRegs_3$D_IN;
  wire dutWrapper_dut_hdmiTpg_patternRegs_3$EN;

  // register dutWrapper_dut_hdmiTpg_pixelCount
  reg [11 : 0] dutWrapper_dut_hdmiTpg_pixelCount;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_pixelCount$D_IN;
  wire dutWrapper_dut_hdmiTpg_pixelCount$EN;

  // register dutWrapper_dut_hdmiTpg_pixelMidpoint
  reg [11 : 0] dutWrapper_dut_hdmiTpg_pixelMidpoint;
  wire [11 : 0] dutWrapper_dut_hdmiTpg_pixelMidpoint$D_IN;
  wire dutWrapper_dut_hdmiTpg_pixelMidpoint$EN;

  // register dutWrapper_dut_hdmiTpg_rgb888StageReg
  reg [38 : 0] dutWrapper_dut_hdmiTpg_rgb888StageReg;
  wire [38 : 0] dutWrapper_dut_hdmiTpg_rgb888StageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_rgb888StageReg$EN;

  // register dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled
  reg dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled;
  wire dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$D_IN,
       dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$EN;

  // register dutWrapper_dut_hdmiTpg_testPatternEnabled
  reg dutWrapper_dut_hdmiTpg_testPatternEnabled;
  wire dutWrapper_dut_hdmiTpg_testPatternEnabled$D_IN,
       dutWrapper_dut_hdmiTpg_testPatternEnabled$EN;

  // register dutWrapper_dut_hdmiTpg_vsyncWidth
  reg [10 : 0] dutWrapper_dut_hdmiTpg_vsyncWidth;
  wire [10 : 0] dutWrapper_dut_hdmiTpg_vsyncWidth$D_IN;
  wire dutWrapper_dut_hdmiTpg_vsyncWidth$EN;

  // register dutWrapper_dut_hdmiTpg_yuv422StageReg
  reg [18 : 0] dutWrapper_dut_hdmiTpg_yuv422StageReg;
  wire [18 : 0] dutWrapper_dut_hdmiTpg_yuv422StageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_yuv422StageReg$EN;

  // register dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg
  reg [146 : 0] dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg;
  wire [146 : 0] dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$EN;

  // register dutWrapper_dut_hdmiTpg_yuv444StageReg
  reg [26 : 0] dutWrapper_dut_hdmiTpg_yuv444StageReg;
  wire [26 : 0] dutWrapper_dut_hdmiTpg_yuv444StageReg$D_IN;
  wire dutWrapper_dut_hdmiTpg_yuv444StageReg$EN;

  // register dutWrapper_dut_linesReg
  reg [10 : 0] dutWrapper_dut_linesReg;
  wire [10 : 0] dutWrapper_dut_linesReg$D_IN;
  wire dutWrapper_dut_linesReg$EN;

  // register dutWrapper_dut_pixelsReg
  reg [11 : 0] dutWrapper_dut_pixelsReg;
  wire [11 : 0] dutWrapper_dut_pixelsReg$D_IN;
  wire dutWrapper_dut_pixelsReg$EN;

  // register dutWrapper_dut_segmentIndexReg
  reg [7 : 0] dutWrapper_dut_segmentIndexReg;
  wire [7 : 0] dutWrapper_dut_segmentIndexReg$D_IN;
  wire dutWrapper_dut_segmentIndexReg$EN;

  // register dutWrapper_dut_segmentOffsetReg
  reg [23 : 0] dutWrapper_dut_segmentOffsetReg;
  wire [23 : 0] dutWrapper_dut_segmentOffsetReg$D_IN;
  wire dutWrapper_dut_segmentOffsetReg$EN;

  // register dutWrapper_dut_sendVsyncIndication
  reg dutWrapper_dut_sendVsyncIndication;
  wire dutWrapper_dut_sendVsyncIndication$D_IN,
       dutWrapper_dut_sendVsyncIndication$EN;

  // register dutWrapper_dut_strideBytesReg
  reg [13 : 0] dutWrapper_dut_strideBytesReg;
  wire [13 : 0] dutWrapper_dut_strideBytesReg$D_IN;
  wire dutWrapper_dut_strideBytesReg$EN;

  // register dutWrapper_dut_vsyncPulseCountReg
  reg [31 : 0] dutWrapper_dut_vsyncPulseCountReg;
  wire [31 : 0] dutWrapper_dut_vsyncPulseCountReg$D_IN;
  wire dutWrapper_dut_vsyncPulseCountReg$EN;

  // register dutWrapper_dut_waitingForVsync
  reg dutWrapper_dut_waitingForVsync;
  wire dutWrapper_dut_waitingForVsync$D_IN, dutWrapper_dut_waitingForVsync$EN;

  // register dutWrapper_junkReqReg
  reg [31 : 0] dutWrapper_junkReqReg;
  wire [31 : 0] dutWrapper_junkReqReg$D_IN;
  wire dutWrapper_junkReqReg$EN;

  // register dutWrapper_requestFired
  reg [31 : 0] dutWrapper_requestFired;
  wire [31 : 0] dutWrapper_requestFired$D_IN;
  wire dutWrapper_requestFired$EN;

  // register dutWrapper_requestTimeLimitReg
  reg [15 : 0] dutWrapper_requestTimeLimitReg;
  wire [15 : 0] dutWrapper_requestTimeLimitReg$D_IN;
  wire dutWrapper_requestTimeLimitReg$EN;

  // register dutWrapper_requestTimerReg
  reg [15 : 0] dutWrapper_requestTimerReg;
  wire [15 : 0] dutWrapper_requestTimerReg$D_IN;
  wire dutWrapper_requestTimerReg$EN;

  // register dutWrapper_responseFired
  reg [31 : 0] dutWrapper_responseFired;
  wire [31 : 0] dutWrapper_responseFired$D_IN;
  wire dutWrapper_responseFired$EN;

  // register dutWrapper_responseTimeLimitReg
  reg [15 : 0] dutWrapper_responseTimeLimitReg;
  wire [15 : 0] dutWrapper_responseTimeLimitReg$D_IN;
  wire dutWrapper_responseTimeLimitReg$EN;

  // register dutWrapper_responseTimerReg
  reg [15 : 0] dutWrapper_responseTimerReg;
  wire [15 : 0] dutWrapper_responseTimerReg$D_IN;
  wire dutWrapper_responseTimerReg$EN;

  // register getWordCount
  reg [31 : 0] getWordCount;
  wire [31 : 0] getWordCount$D_IN;
  wire getWordCount$EN;

  // register interruptCleared
  reg interruptCleared;
  wire interruptCleared$D_IN, interruptCleared$EN;

  // register interruptEnableReg
  reg [31 : 0] interruptEnableReg;
  wire [31 : 0] interruptEnableReg$D_IN;
  wire interruptEnableReg$EN;

  // register interrupted
  reg interrupted;
  wire interrupted$D_IN, interrupted$EN;

  // register overflowCount
  reg [31 : 0] overflowCount;
  wire [31 : 0] overflowCount$D_IN;
  wire overflowCount$EN;

  // register putWordCount
  reg [31 : 0] putWordCount;
  wire [31 : 0] putWordCount$D_IN;
  wire putWordCount$EN;

  // register requestFifo_buff
  reg [35 : 0] requestFifo_buff;
  wire [35 : 0] requestFifo_buff$D_IN;
  wire requestFifo_buff$EN;

  // register requestFifo_count
  reg [31 : 0] requestFifo_count;
  wire [31 : 0] requestFifo_count$D_IN;
  wire requestFifo_count$EN;

  // register requestFifo_fifo_rCache
  reg [41 : 0] requestFifo_fifo_rCache;
  wire [41 : 0] requestFifo_fifo_rCache$D_IN;
  wire requestFifo_fifo_rCache$EN;

  // register requestFifo_fifo_rRdPtr
  reg [4 : 0] requestFifo_fifo_rRdPtr;
  wire [4 : 0] requestFifo_fifo_rRdPtr$D_IN;
  wire requestFifo_fifo_rRdPtr$EN;

  // register requestFifo_fifo_rWrPtr
  reg [4 : 0] requestFifo_fifo_rWrPtr;
  wire [4 : 0] requestFifo_fifo_rWrPtr$D_IN;
  wire requestFifo_fifo_rWrPtr$EN;

  // register responseFifo_count
  reg [31 : 0] responseFifo_count;
  wire [31 : 0] responseFifo_count$D_IN;
  wire responseFifo_count$EN;

  // register underflowCount
  reg [31 : 0] underflowCount;
  wire [31 : 0] underflowCount$D_IN;
  wire underflowCount$EN;

  // register word0Put
  reg [31 : 0] word0Put;
  wire [31 : 0] word0Put$D_IN;
  wire word0Put$EN;

  // register word1Put
  reg [31 : 0] word1Put;
  wire [31 : 0] word1Put$D_IN;
  wire word1Put$EN;

  // ports of submodule dutWrapper_dut_commandFifo
  reg [34 : 0] dutWrapper_dut_commandFifo$sD_IN;
  wire [34 : 0] dutWrapper_dut_commandFifo$dD_OUT;
  wire dutWrapper_dut_commandFifo$dDEQ,
       dutWrapper_dut_commandFifo$dEMPTY_N,
       dutWrapper_dut_commandFifo$sENQ,
       dutWrapper_dut_commandFifo$sFULL_N;

  // ports of submodule dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI
  wire [87 : 0] dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DIA,
		dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DIB,
		dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOA,
		dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB;
  wire [7 : 0] dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ADDRA,
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ADDRB;
  wire dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DRA,
       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DRB,
       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ENA,
       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ENB,
       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$WEA,
       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$WEB;

  // ports of submodule dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI
  wire [63 : 0] dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DIA,
		dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DIB,
		dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DOA;
  wire [11 : 0] dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ADDRA,
		dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ADDRB;
  wire dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DRA,
       dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ENA,
       dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ENB,
       dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$WEA,
       dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$WEB;

  // ports of submodule dutWrapper_dut_hdmiTpg_bramOutStageFifo
  wire [38 : 0] dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_IN,
		dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_OUT;
  wire dutWrapper_dut_hdmiTpg_bramOutStageFifo$CLR,
       dutWrapper_dut_hdmiTpg_bramOutStageFifo$DEQ,
       dutWrapper_dut_hdmiTpg_bramOutStageFifo$EMPTY_N,
       dutWrapper_dut_hdmiTpg_bramOutStageFifo$ENQ,
       dutWrapper_dut_hdmiTpg_bramOutStageFifo$FULL_N;

  // ports of submodule dutWrapper_dut_hdmi_reset
  wire dutWrapper_dut_hdmi_reset$OUT_RST;

  // ports of submodule dutWrapper_dut_hsyncPulse
  wire dutWrapper_dut_hsyncPulse$dPulse,
       dutWrapper_dut_hsyncPulse$sEN,
       dutWrapper_dut_hsyncPulse$sRDY;

  // ports of submodule dutWrapper_dut_rgbrgbFifo
  wire [63 : 0] dutWrapper_dut_rgbrgbFifo$sD_IN;
  wire dutWrapper_dut_rgbrgbFifo$dDEQ, dutWrapper_dut_rgbrgbFifo$sENQ;

  // ports of submodule dutWrapper_dut_translationEntryFifo
  wire [95 : 0] dutWrapper_dut_translationEntryFifo$D_IN,
		dutWrapper_dut_translationEntryFifo$D_OUT;
  wire dutWrapper_dut_translationEntryFifo$CLR,
       dutWrapper_dut_translationEntryFifo$DEQ,
       dutWrapper_dut_translationEntryFifo$EMPTY_N,
       dutWrapper_dut_translationEntryFifo$ENQ,
       dutWrapper_dut_translationEntryFifo$FULL_N;

  // ports of submodule dutWrapper_dut_vsyncPulse
  wire dutWrapper_dut_vsyncPulse$dPulse,
       dutWrapper_dut_vsyncPulse$sEN,
       dutWrapper_dut_vsyncPulse$sRDY;

  // ports of submodule requestFifo_fifo_memory
  wire [35 : 0] requestFifo_fifo_memory$DIA,
		requestFifo_fifo_memory$DIB,
		requestFifo_fifo_memory$DOB;
  wire [3 : 0] requestFifo_fifo_memory$ADDRA, requestFifo_fifo_memory$ADDRB;
  wire requestFifo_fifo_memory$ENA,
       requestFifo_fifo_memory$ENB,
       requestFifo_fifo_memory$WEA,
       requestFifo_fifo_memory$WEB;

  // ports of submodule responseFifo_fifo
  wire [97 : 0] responseFifo_fifo$D_IN, responseFifo_fifo$D_OUT;
  wire responseFifo_fifo$CLR,
       responseFifo_fifo$DEQ,
       responseFifo_fifo$EMPTY_N,
       responseFifo_fifo$ENQ,
       responseFifo_fifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent,
       WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2,
       WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule,
       WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data,
       WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule,
       WILL_FIRE_RL_dutWrapper_dut_hsync,
       WILL_FIRE_RL_dutWrapper_dut_vsync,
       WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest,
       WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest,
       WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest,
       WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest,
       WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest,
       WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest,
       WILL_FIRE_RL_dutWrapper_handlehdmiStrideBytesrequest,
       WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest,
       WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest,
       WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest,
       WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest,
       WILL_FIRE_RL_dutWrapper_translationTableEntryresponse,
       WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse;

  // inputs to muxes for submodule ports
  wire [97 : 0] MUX_responseFifo_fifo$enq_1__VAL_1,
		MUX_responseFifo_fifo$enq_1__VAL_2;
  wire [96 : 0] MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_1,
		MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_2,
		MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_3;
  wire [87 : 0] MUX_dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$portAReq_3__VAL_2;
  wire [38 : 0] MUX_dutWrapper_dut_hdmiTpg_bramOutStageFifo$enq_1__VAL_1,
		MUX_dutWrapper_dut_hdmiTpg_bramOutStageFifo$enq_1__VAL_2;
  wire [34 : 0] MUX_dutWrapper_dut_commandFifo$enq_1__VAL_1,
		MUX_dutWrapper_dut_commandFifo$enq_1__VAL_3,
		MUX_dutWrapper_dut_commandFifo$enq_1__VAL_4,
		MUX_dutWrapper_dut_commandFifo$enq_1__VAL_5,
		MUX_dutWrapper_dut_commandFifo$enq_1__VAL_6,
		MUX_dutWrapper_dut_commandFifo$enq_1__VAL_7;
  wire [23 : 0] MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_3,
		MUX_dutWrapper_dut_frameBuffer_readLimitReg$write_1__VAL_1;
  wire [15 : 0] MUX_dutWrapper_requestTimerReg$write_1__VAL_12;
  wire [11 : 0] MUX_dutWrapper_dut_frameBuffer_pixelCountReg2$write_1__VAL_2,
		MUX_dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$portAReq_2__VAL_1,
		MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_1,
		MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_2;
  wire [7 : 0] MUX_dutWrapper_dut_segmentIndexReg$write_1__VAL_2;
  wire MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_2,
       MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__SEL_3,
       MUX_dutWrapper_dut_frameBuffer_startFrameEnabled$write_1__SEL_1,
       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1,
       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_2,
       MUX_dutWrapper_dut_sendVsyncIndication$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] data__h7240;
  wire [143 : 0] IF_dutWrapper_dut_hdmiTpg_rgb888StageReg_01_BI_ETC___d230;
  wire [97 : 0] x__h14213;
  wire [35 : 0] newval__h13723, x__h710;
  wire [31 : 0] IF_interrupted_87_THEN_5899681_ELSE_5899680___d534,
		IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533,
		_107_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d222,
		_150_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d210,
		_21_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d224,
		_29_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d214,
		_43_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d216,
		_77_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d206,
		_85_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d218,
		result__h13501,
		segmentOffset__h3215,
		segmentOffset__h3656,
		spliced_bits__h3296,
		spliced_bits__h3938,
		v___1__h13968,
		x__h13460,
		x__h13462,
		x__h13464,
		x__h13824,
		x__h14072,
		x__h14217,
		y__h13461,
		y__h13463,
		y__h13465;
  wire [23 : 0] IF_dutWrapper_dut_hdmiTpg_testPatternEnabled_2_ETC___d198,
		lineAddr___1__h9155,
		lineAddr__h9117,
		readLimit___1__h9156,
		readLimit__h9118,
		x__h12059,
		y__h3760;
  wire [19 : 0] length__h11939;
  wire [15 : 0] data__h8739,
		x500_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interme_ETC__q1,
		x563_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interme_ETC__q2,
		x618_MINUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q3,
		x__h8500,
		x__h8563,
		x__h8565,
		x__h8618,
		x__h8620;
  wire [11 : 0] newPixelCount__h7697, x__h7895;
  wire [10 : 0] IF_dutWrapper_dut_hdmiTpg_lineCount_09_EQ_dutW_ETC___d134,
		lineCount___1__h9157,
		lineCount__h9115,
		newLineCount___1__h7666;
  wire [7 : 0] index__h3072;
  wire [4 : 0] x__h811;
  wire [1 : 0] _theResult____h7239, result__h7365, x__h7351;
  wire NOT_dutWrapper_dut_hdmiTpg_lineCount_09_ULT_du_ETC___d118,
       NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150,
       _dor1dutWrapper_dut_hdmiTpg_testPatternEnabled$EN_write,
       dutWrapper_dut_frameBuffer_readAddrReg_4_ULE_d_ETC___d28,
       dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120,
       dutWrapper_dut_hdmiTpg_pixelCount_11_EQ_dutWra_ETC___d526,
       requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308,
       requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536,
       x__h7275,
       x__h7285;

  // value method error
  assign error = 1'd0 ;
  assign RDY_error = 1'd1 ;

  // value method interrupt
  assign interrupt =
	     interruptEnableReg[0] && !interruptCleared && interrupted ;
  assign RDY_interrupt = 1'd1 ;

  // action method ctrl_put
  assign RDY_ctrl_put = 1'd1 ;

  // actionvalue method ctrl_get
  always@(ctrl_get_addr or
	  result__h13501 or
	  interruptEnableReg or
	  dutWrapper_requestFired or
	  dutWrapper_responseFired or
	  underflowCount or
	  overflowCount or
	  x__h13460 or
	  y__h13461 or
	  putWordCount or
	  getWordCount or
	  word0Put or
	  word1Put or
	  dutWrapper_junkReqReg or
	  dutWrapper_blockedRequestsDiscardedReg or
	  dutWrapper_blockedResponsesDiscardedReg)
  begin
    case (ctrl_get_addr)
      12'h0: ctrl_get = result__h13501;
      12'h004: ctrl_get = interruptEnableReg;
      12'h008: ctrl_get = 32'd36;
      12'h00C: ctrl_get = 32'd98;
      12'h010: ctrl_get = dutWrapper_requestFired;
      12'h014: ctrl_get = dutWrapper_responseFired;
      12'h018: ctrl_get = underflowCount;
      12'h01C: ctrl_get = overflowCount;
      12'h020: ctrl_get = x__h13460 | y__h13461;
      12'h024: ctrl_get = putWordCount;
      12'h028: ctrl_get = getWordCount;
      12'h02C: ctrl_get = word0Put;
      12'h030: ctrl_get = word1Put;
      12'h034: ctrl_get = dutWrapper_junkReqReg;
      12'h038: ctrl_get = dutWrapper_blockedRequestsDiscardedReg;
      12'h03C: ctrl_get = dutWrapper_blockedResponsesDiscardedReg;
      default: ctrl_get = 32'h005A05A0;
    endcase
  end
  assign RDY_ctrl_get = 1'd1 ;

  // action method fifo_put
  assign RDY_fifo_put =
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ;

  // actionvalue method fifo_get
  assign fifo_get = responseFifo_fifo$EMPTY_N ? v___1__h13968 : 32'h050A050A ;
  assign RDY_fifo_get = 1'd1 ;

  // actionvalue method axiw0_writeAddr
  assign axiw0_writeAddr = 32'd0 ;
  assign RDY_axiw0_writeAddr = 1'd0 ;

  // value method axiw0_writeBurstLen
  assign axiw0_writeBurstLen = 8'd0 ;
  assign RDY_axiw0_writeBurstLen = 1'd1 ;

  // value method axiw0_writeBurstWidth
  assign axiw0_writeBurstWidth = 3'b011 ;
  assign RDY_axiw0_writeBurstWidth = 1'd1 ;

  // value method axiw0_writeBurstType
  assign axiw0_writeBurstType = 2'b01 ;
  assign RDY_axiw0_writeBurstType = 1'd1 ;

  // value method axiw0_writeBurstProt
  assign axiw0_writeBurstProt = 3'b0 ;
  assign RDY_axiw0_writeBurstProt = 1'd1 ;

  // value method axiw0_writeBurstCache
  assign axiw0_writeBurstCache = 4'b0011 ;
  assign RDY_axiw0_writeBurstCache = 1'd1 ;

  // value method axiw0_writeId
  assign axiw0_writeId = 1'd0 ;
  assign RDY_axiw0_writeId = 1'd1 ;

  // actionvalue method axiw0_writeData
  assign axiw0_writeData = 64'd0 ;
  assign RDY_axiw0_writeData = 1'd1 ;

  // value method axiw0_writeDataByteEnable
  assign axiw0_writeDataByteEnable = 8'd255 ;
  assign RDY_axiw0_writeDataByteEnable = 1'd1 ;

  // value method axiw0_writeLastDataBeat
  assign axiw0_writeLastDataBeat = 1'd0 ;
  assign RDY_axiw0_writeLastDataBeat = 1'd1 ;

  // action method axiw0_writeResponse
  assign RDY_axiw0_writeResponse = 1'd1 ;

  // actionvalue method axir0_readAddr
  assign axir0_readAddr =
	     { 8'd0, dutWrapper_dut_frameBuffer_readAddrReg } +
	     dutWrapper_dut_frameBuffer_segmentOffsetReg ;
  assign RDY_axir0_readAddr =
	     dutWrapper_dut_frameBuffer_runningReg &&
	     dutWrapper_dut_frameBuffer_readAddrReg <
	     dutWrapper_dut_frameBuffer_readLimitReg &&
	     dutWrapper_dut_frameBuffer_readAddrReg_4_ULE_d_ETC___d28 ;

  // value method axir0_readBurstLen
  assign axir0_readBurstLen = 8'd15 ;
  assign RDY_axir0_readBurstLen = 1'd1 ;

  // value method axir0_readBurstWidth
  assign axir0_readBurstWidth = 3'b011 ;
  assign RDY_axir0_readBurstWidth = 1'd1 ;

  // value method axir0_readBurstType
  assign axir0_readBurstType = 2'b01 ;
  assign RDY_axir0_readBurstType = 1'd1 ;

  // value method axir0_readBurstProt
  assign axir0_readBurstProt = 3'b0 ;
  assign RDY_axir0_readBurstProt = 1'd1 ;

  // value method axir0_readBurstCache
  assign axir0_readBurstCache = 4'b0011 ;
  assign RDY_axir0_readBurstCache = 1'd1 ;

  // value method axir0_readId
  assign axir0_readId = 1'd0 ;
  assign RDY_axir0_readId = 1'd1 ;

  // action method axir0_readData
  assign RDY_axir0_readData = 1'd1 ;

  // value method hdmi_hdmi_vsync
  assign hdmi_hdmi_vsync = dutWrapper_dut_hdmiTpg_yuv422StageReg[18] ;
  assign RDY_hdmi_hdmi_vsync = 1'd1 ;

  // value method hdmi_hdmi_hsync
  assign hdmi_hdmi_hsync = dutWrapper_dut_hdmiTpg_yuv422StageReg[17] ;
  assign RDY_hdmi_hdmi_hsync = 1'd1 ;

  // value method hdmi_hdmi_de
  assign hdmi_hdmi_de = dutWrapper_dut_hdmiTpg_yuv422StageReg[16] ;
  assign RDY_hdmi_hdmi_de = 1'd1 ;

  // value method hdmi_hdmi_data
  assign hdmi_hdmi_data = dutWrapper_dut_hdmiTpg_yuv422StageReg[15:0] ;
  assign RDY_hdmi_hdmi_data = 1'd1 ;

  // submodule dutWrapper_dut_commandFifo
  SyncFIFO #(.dataWidth(32'd35),
	     .depth(32'd2),
	     .indxWidth(32'd1)) dutWrapper_dut_commandFifo(.sCLK(CLK),
							   .dCLK(CLK_hdmi_ref_clk),
							   .sRST(RST_N),
							   .sD_IN(dutWrapper_dut_commandFifo$sD_IN),
							   .sENQ(dutWrapper_dut_commandFifo$sENQ),
							   .dDEQ(dutWrapper_dut_commandFifo$dDEQ),
							   .dD_OUT(dutWrapper_dut_commandFifo$dD_OUT),
							   .sFULL_N(dutWrapper_dut_commandFifo$sFULL_N),
							   .dEMPTY_N(dutWrapper_dut_commandFifo$dEMPTY_N));

  // submodule dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI
  NRCCBRAM2 #(.ADDR_WIDTH(32'd8),
	      .DATA_WIDTH(32'd88),
	      .MEMSIZE(32'd256),
	      .PIPELINED(32'd0)) dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI(.CLKA(CLK),
									       .CLKB(CLK),
									       .RSTA_N(RST_N),
									       .RSTB_N(RST_N),
									       .ADDRA(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ADDRA),
									       .ADDRB(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ADDRB),
									       .DIA(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DIA),
									       .DIB(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DIB),
									       .WEA(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$WEA),
									       .WEB(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$WEB),
									       .ENA(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ENA),
									       .ENB(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ENB),
									       .DOA(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOA),
									       .DOB(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB),
									       .DRA(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DRA),
									       .DRB(dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DRB));

  // submodule dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI
  NRCCBRAM2 #(.ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd64),
	      .MEMSIZE(32'd4096),
	      .PIPELINED(32'd0)) dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI(.CLKA(CLK_hdmi_ref_clk),
										 .CLKB(CLK),
										 .RSTA_N(dutWrapper_dut_hdmi_reset$OUT_RST),
										 .RSTB_N(RST_N),
										 .ADDRA(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ADDRA),
										 .ADDRB(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ADDRB),
										 .DIA(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DIA),
										 .DIB(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DIB),
										 .WEA(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$WEA),
										 .WEB(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$WEB),
										 .ENA(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ENA),
										 .ENB(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ENB),
										 .DOA(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DOA),
										 .DOB(),
										 .DRA(dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DRA),
										 .DRB());

  // submodule dutWrapper_dut_hdmiTpg_bramOutStageFifo
  SizedFIFO #(.p1width(32'd39),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) dutWrapper_dut_hdmiTpg_bramOutStageFifo(.RST(dutWrapper_dut_hdmi_reset$OUT_RST),
								       .CLK(CLK_hdmi_ref_clk),
								       .D_IN(dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_IN),
								       .ENQ(dutWrapper_dut_hdmiTpg_bramOutStageFifo$ENQ),
								       .DEQ(dutWrapper_dut_hdmiTpg_bramOutStageFifo$DEQ),
								       .CLR(dutWrapper_dut_hdmiTpg_bramOutStageFifo$CLR),
								       .D_OUT(dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_OUT),
								       .FULL_N(dutWrapper_dut_hdmiTpg_bramOutStageFifo$FULL_N),
								       .EMPTY_N(dutWrapper_dut_hdmiTpg_bramOutStageFifo$EMPTY_N));

  // submodule dutWrapper_dut_hdmi_reset
  SyncResetA #(.RSTDELAY(32'd1)) dutWrapper_dut_hdmi_reset(.CLK(CLK_hdmi_ref_clk),
							   .IN_RST(RST_N),
							   .OUT_RST(dutWrapper_dut_hdmi_reset$OUT_RST));

  // submodule dutWrapper_dut_hsyncPulse
  SyncHandshake dutWrapper_dut_hsyncPulse(.sCLK(CLK_hdmi_ref_clk),
					  .dCLK(CLK),
					  .sRST(dutWrapper_dut_hdmi_reset$OUT_RST),
					  .sEN(dutWrapper_dut_hsyncPulse$sEN),
					  .dPulse(dutWrapper_dut_hsyncPulse$dPulse),
					  .sRDY(dutWrapper_dut_hsyncPulse$sRDY));

  // submodule dutWrapper_dut_rgbrgbFifo
  SyncFIFO #(.dataWidth(32'd64),
	     .depth(32'd4),
	     .indxWidth(32'd2)) dutWrapper_dut_rgbrgbFifo(.sCLK(CLK),
							  .dCLK(CLK_hdmi_ref_clk),
							  .sRST(RST_N),
							  .sD_IN(dutWrapper_dut_rgbrgbFifo$sD_IN),
							  .sENQ(dutWrapper_dut_rgbrgbFifo$sENQ),
							  .dDEQ(dutWrapper_dut_rgbrgbFifo$dDEQ),
							  .dD_OUT(),
							  .sFULL_N(),
							  .dEMPTY_N());

  // submodule dutWrapper_dut_translationEntryFifo
  FIFO2 #(.width(32'd96),
	  .guarded(32'd1)) dutWrapper_dut_translationEntryFifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(dutWrapper_dut_translationEntryFifo$D_IN),
							       .ENQ(dutWrapper_dut_translationEntryFifo$ENQ),
							       .DEQ(dutWrapper_dut_translationEntryFifo$DEQ),
							       .CLR(dutWrapper_dut_translationEntryFifo$CLR),
							       .D_OUT(dutWrapper_dut_translationEntryFifo$D_OUT),
							       .FULL_N(dutWrapper_dut_translationEntryFifo$FULL_N),
							       .EMPTY_N(dutWrapper_dut_translationEntryFifo$EMPTY_N));

  // submodule dutWrapper_dut_vsyncPulse
  SyncHandshake dutWrapper_dut_vsyncPulse(.sCLK(CLK_hdmi_ref_clk),
					  .dCLK(CLK),
					  .sRST(dutWrapper_dut_hdmi_reset$OUT_RST),
					  .sEN(dutWrapper_dut_vsyncPulse$sEN),
					  .dPulse(dutWrapper_dut_vsyncPulse$dPulse),
					  .sRDY(dutWrapper_dut_vsyncPulse$sRDY));

  // submodule requestFifo_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd36),
	  .MEMSIZE(5'd16)) requestFifo_fifo_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(requestFifo_fifo_memory$ADDRA),
						   .ADDRB(requestFifo_fifo_memory$ADDRB),
						   .DIA(requestFifo_fifo_memory$DIA),
						   .DIB(requestFifo_fifo_memory$DIB),
						   .WEA(requestFifo_fifo_memory$WEA),
						   .WEB(requestFifo_fifo_memory$WEB),
						   .ENA(requestFifo_fifo_memory$ENA),
						   .ENB(requestFifo_fifo_memory$ENB),
						   .DOA(),
						   .DOB(requestFifo_fifo_memory$DOB));

  // submodule responseFifo_fifo
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd0)) responseFifo_fifo(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(responseFifo_fifo$D_IN),
						 .ENQ(responseFifo_fifo$ENQ),
						 .DEQ(responseFifo_fifo$DEQ),
						 .CLR(responseFifo_fifo$CLR),
						 .D_OUT(responseFifo_fifo$D_OUT),
						 .FULL_N(responseFifo_fifo$FULL_N),
						 .EMPTY_N(responseFifo_fifo$EMPTY_N));

  // rule RL_dutWrapper_vsyncReceivedresponse
  assign WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse =
	     responseFifo_fifo$FULL_N && dutWrapper_dut_sendVsyncIndication ;

  // rule RL_dutWrapper_translationTableEntryresponse
  assign WILL_FIRE_RL_dutWrapper_translationTableEntryresponse =
	     responseFifo_fifo$FULL_N &&
	     dutWrapper_dut_translationEntryFifo$EMPTY_N &&
	     !WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse ;

  // rule RL_dutWrapper_handlesetPatternRegrequest
  assign WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd0 ;

  // rule RL_dutWrapper_handlehdmiLinesPixelsrequest
  assign WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd3 ;

  // rule RL_dutWrapper_handlehdmiBlankLinesPixelsrequest
  assign WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd4 ;

  // rule RL_dutWrapper_handlehdmiStrideBytesrequest
  assign WILL_FIRE_RL_dutWrapper_handlehdmiStrideBytesrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd5 ;

  // rule RL_dutWrapper_handlehdmiLineCountMinMaxrequest
  assign WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd6 ;

  // rule RL_dutWrapper_handlehdmiPixelCountMinMaxrequest
  assign WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd7 ;

  // rule RL_dutWrapper_handlebeginTranslationTablerequest
  assign WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd9 ;

  // rule RL_dutWrapper_handlehdmiSyncWidthsrequest
  assign WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd8 ;

  // rule RL_dutWrapper_handleaddTranslationEntryrequest
  assign WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_translationEntryFifo$FULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd10 ;

  // rule RL_dutWrapper_dut_vsync
  assign WILL_FIRE_RL_dutWrapper_dut_vsync =
	     !dutWrapper_dut_frameBuffer_startFrameEnabled &&
	     dutWrapper_dut_vsyncPulse$dPulse ;

  // rule RL_dutWrapper_handlewaitForVsyncrequest
  assign WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd2 ;

  // rule RL_dutWrapper_dut_frameBuffer_nextent
  assign WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent =
	     dutWrapper_dut_frameBuffer_readAddrReg != 24'hFFFFFF &&
	     !dutWrapper_dut_frameBuffer_readAddrReg_4_ULE_d_ETC___d28 &&
	     !dutWrapper_dut_frameBuffer_nextent2Enabled &&
	     !WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ;

  // rule RL_dutWrapper_dut_hsync
  assign WILL_FIRE_RL_dutWrapper_dut_hsync =
	     dutWrapper_dut_hsyncPulse$dPulse && !EN_axir0_readAddr ;

  // rule RL_dutWrapper_dut_frameBuffer_nextent2
  assign WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 =
	     dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DRA &&
	     dutWrapper_dut_frameBuffer_nextent2Enabled &&
	     !WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     !EN_axir0_readAddr ;

  // rule RL_dutWrapper_dut_frameBuffer_startFrameRule
  assign WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule =
	     dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DRB &&
	     dutWrapper_dut_frameBuffer_startFrameEnabled ;

  // rule RL_dutWrapper_handlestartFrameBufferrequest
  assign WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest =
	     !requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 &&
	     dutWrapper_dut_commandFifo$sFULL_N &&
	     requestFifo_fifo_wDataOut$wget[35:32] == 4'd1 ;

  // rule RL_dutWrapper_dut_hdmiTpg_data
  assign WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data =
	     dutWrapper_dut_hdmiTpg_bramOutStageFifo$FULL_N &&
	     dutWrapper_dut_hdmiTpg_testPatternEnabled ;

  // rule RL_dutWrapper_dut_hdmiTpg_fbRule
  assign WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule =
	     dutWrapper_dut_hdmiTpg_bramOutStageFifo$FULL_N &&
	     !dutWrapper_dut_hdmiTpg_testPatternEnabled ;

  // inputs to muxes for submodule ports
  assign MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_2 =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg ;
  assign MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__SEL_3 =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg &&
	     dutWrapper_dut_frameBuffer_readAddrReg == 24'hFFFFFF ;
  assign MUX_dutWrapper_dut_frameBuffer_startFrameEnabled$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_frameBufferEnabled ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data &&
	     (NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150 &&
	      dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120 ||
	      x__h7285) ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule &&
	     (x__h7285 ||
	      NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150 &&
	      dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120) ;
  assign MUX_dutWrapper_dut_sendVsyncIndication$write_1__SEL_1 =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_waitingForVsync ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_1 =
	     { 3'd0, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_3 =
	     { 3'd2, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_4 =
	     { 3'd3, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_5 =
	     { 3'd4, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_6 =
	     { 3'd5, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_commandFifo$enq_1__VAL_7 =
	     { 3'd6, requestFifo_fifo_wDataOut$wget[31:0] } ;
  assign MUX_dutWrapper_dut_frameBuffer_pixelCountReg2$write_1__VAL_2 =
	     dutWrapper_dut_frameBuffer_pixelCountReg2 + 12'd2 ;
  assign MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_3 =
	     dutWrapper_dut_frameBuffer_readAddrReg + 24'd128 ;
  assign MUX_dutWrapper_dut_frameBuffer_readLimitReg$write_1__VAL_1 =
	     dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] +
	     y__h3760 ;
  assign MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_1 =
	     { 1'd1,
	       segmentOffset__h3656,
	       32'd16777215,
	       spliced_bits__h3938 } ;
  assign MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_2 =
	     { 1'd1,
	       segmentOffset__h3215,
	       8'd0,
	       dutWrapper_dut_frameBuffer_readAddrReg,
	       spliced_bits__h3296 } ;
  assign MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_3 =
	     { 1'd1,
	       dutWrapper_dut_frameBuffer_segmentOffsetReg,
	       8'd0,
	       lineAddr__h9117,
	       8'd0,
	       dutWrapper_dut_frameBuffer_segmentLimitReg } ;
  assign MUX_dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$portAReq_3__VAL_2 =
	     { dutWrapper_dut_segmentOffsetReg,
	       x__h12059,
	       requestFifo_fifo_wDataOut$wget[31:12],
	       length__h11939 } ;
  assign MUX_dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$portAReq_2__VAL_1 =
	     { 1'd0, dutWrapper_dut_hdmiTpg_dataCount[11:1] } ;
  assign MUX_dutWrapper_dut_hdmiTpg_bramOutStageFifo$enq_1__VAL_1 =
	     { x__h7275,
	       x__h7285,
	       NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150 &&
	       dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120,
	       data__h7240[23:0],
	       12'hAAA } ;
  assign MUX_dutWrapper_dut_hdmiTpg_bramOutStageFifo$enq_1__VAL_2 =
	     { x__h7275,
	       x__h7285,
	       NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150 &&
	       dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120,
	       24'hAAAAAA,
	       dutWrapper_dut_hdmiTpg_dataCount } ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_1 =
	     (NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150 &&
	      dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120) ?
	       x__h7895 :
	       12'd0 ;
  assign MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_2 =
	     x__h7285 ? 12'd0 : x__h7895 ;
  assign MUX_dutWrapper_dut_segmentIndexReg$write_1__VAL_2 =
	     dutWrapper_dut_segmentIndexReg + 8'd1 ;
  assign MUX_dutWrapper_requestTimerReg$write_1__VAL_12 =
	     dutWrapper_requestTimerReg + 16'd1 ;
  assign MUX_responseFifo_fifo$enq_1__VAL_1 =
	     { 66'h0AAAAAAAAAAAAAAAA, dutWrapper_dut_vsyncPulseCountReg } ;
  assign MUX_responseFifo_fifo$enq_1__VAL_2 =
	     { 2'd1, dutWrapper_dut_translationEntryFifo$D_OUT } ;

  // inlined wires
  assign requestFifo_fifo_wDataIn$wget =
	     { fifo_put_v[3:0], requestFifo_buff[35:4] } ;
  assign requestFifo_fifo_wDataOut$wget =
	     (requestFifo_fifo_rCache[41] &&
	      requestFifo_fifo_rCache[40:36] == requestFifo_fifo_rRdPtr) ?
	       requestFifo_fifo_rCache[35:0] :
	       requestFifo_fifo_memory$DOB ;
  assign requestFifo_fifo_pwDequeue$whas =
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiStrideBytesrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ;
  assign requestFifo_fifo_pwEnqueue$whas =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 &&
	     requestFifo_count == 32'd1 ;

  // register dutWrapper_blockedRequestsDiscardedReg
  assign dutWrapper_blockedRequestsDiscardedReg$D_IN = 32'h0 ;
  assign dutWrapper_blockedRequestsDiscardedReg$EN = 1'b0 ;

  // register dutWrapper_blockedResponsesDiscardedReg
  assign dutWrapper_blockedResponsesDiscardedReg$D_IN = 32'h0 ;
  assign dutWrapper_blockedResponsesDiscardedReg$EN = 1'b0 ;

  // register dutWrapper_dut_frameBufferEnabled
  assign dutWrapper_dut_frameBufferEnabled$D_IN = 1'd1 ;
  assign dutWrapper_dut_frameBufferEnabled$EN =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ;

  // register dutWrapper_dut_frameBuffer_fbc
  assign dutWrapper_dut_frameBuffer_fbc$D_IN =
	     dutWrapper_dut_frameBuffer_nextFbc ;
  assign dutWrapper_dut_frameBuffer_fbc$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_lineAddrReg
  assign dutWrapper_dut_frameBuffer_lineAddrReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ?
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] :
	       lineAddr__h9117 ;
  assign dutWrapper_dut_frameBuffer_lineAddrReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_lineCountReg
  assign dutWrapper_dut_frameBuffer_lineCountReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ?
	       dutWrapper_dut_frameBuffer_nextFbc[36:26] :
	       lineCount__h9115 ;
  assign dutWrapper_dut_frameBuffer_lineCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_nextFbc
  assign dutWrapper_dut_frameBuffer_nextFbc$D_IN =
	     { requestFifo_fifo_wDataOut$wget[31:0],
	       dutWrapper_dut_linesReg,
	       dutWrapper_dut_pixelsReg,
	       dutWrapper_dut_strideBytesReg } ;
  assign dutWrapper_dut_frameBuffer_nextFbc$EN =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ;

  // register dutWrapper_dut_frameBuffer_nextent2Enabled
  assign dutWrapper_dut_frameBuffer_nextent2Enabled$D_IN =
	     !WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 ;
  assign dutWrapper_dut_frameBuffer_nextent2Enabled$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent ;

  // register dutWrapper_dut_frameBuffer_pixelCountReg
  assign dutWrapper_dut_frameBuffer_pixelCountReg$D_IN =
	     dutWrapper_dut_frameBuffer_nextFbc[25:14] ;
  assign dutWrapper_dut_frameBuffer_pixelCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_pixelCountReg2
  assign dutWrapper_dut_frameBuffer_pixelCountReg2$D_IN =
	     MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_2 ?
	       12'd0 :
	       MUX_dutWrapper_dut_frameBuffer_pixelCountReg2$write_1__VAL_2 ;
  assign dutWrapper_dut_frameBuffer_pixelCountReg2$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg ||
	     EN_axir0_readData ;

  // register dutWrapper_dut_frameBuffer_readAddrReg
  always@(WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule or
	  MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_2 or
	  lineAddr__h9117 or
	  EN_axir0_readAddr or
	  MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule:
	dutWrapper_dut_frameBuffer_readAddrReg$D_IN = 24'hFFFFFF;
    MUX_dutWrapper_dut_frameBuffer_lineAddrReg$write_1__SEL_2:
	dutWrapper_dut_frameBuffer_readAddrReg$D_IN = lineAddr__h9117;
    EN_axir0_readAddr:
	dutWrapper_dut_frameBuffer_readAddrReg$D_IN =
	    MUX_dutWrapper_dut_frameBuffer_readAddrReg$write_1__VAL_3;
    default: dutWrapper_dut_frameBuffer_readAddrReg$D_IN =
		 24'b101010101010101010101010 /* unspecified value */ ;
  endcase
  assign dutWrapper_dut_frameBuffer_readAddrReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg ||
	     EN_axir0_readAddr ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_readLimitReg
  assign dutWrapper_dut_frameBuffer_readLimitReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ?
	       MUX_dutWrapper_dut_frameBuffer_readLimitReg$write_1__VAL_1 :
	       readLimit__h9118 ;
  assign dutWrapper_dut_frameBuffer_readLimitReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_readingReg
  always@(WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule or
	  MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_1 or
	  WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 or
	  MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_2 or
	  MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__SEL_3 or
	  MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule:
	dutWrapper_dut_frameBuffer_readingReg$D_IN =
	    MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_1;
    WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2:
	dutWrapper_dut_frameBuffer_readingReg$D_IN =
	    MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_2;
    MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__SEL_3:
	dutWrapper_dut_frameBuffer_readingReg$D_IN =
	    MUX_dutWrapper_dut_frameBuffer_readingReg$write_1__VAL_3;
    default: dutWrapper_dut_frameBuffer_readingReg$D_IN =
		 97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign dutWrapper_dut_frameBuffer_readingReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg &&
	     dutWrapper_dut_frameBuffer_readAddrReg == 24'hFFFFFF ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_runningReg
  assign dutWrapper_dut_frameBuffer_runningReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;
  assign dutWrapper_dut_frameBuffer_runningReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg &&
	     lineCount__h9115 == 11'd0 ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_segmentLimitReg
  assign dutWrapper_dut_frameBuffer_segmentLimitReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ?
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[63:40] :
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOA[63:40] ;
  assign dutWrapper_dut_frameBuffer_segmentLimitReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_segmentOffsetReg
  assign dutWrapper_dut_frameBuffer_segmentOffsetReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ?
	       segmentOffset__h3656 :
	       segmentOffset__h3215 ;
  assign dutWrapper_dut_frameBuffer_segmentOffsetReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_sglistIndexReg
  assign dutWrapper_dut_frameBuffer_sglistIndexReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ?
	       dutWrapper_dut_frameBuffer_nextFbc[44:37] :
	       index__h3072 ;
  assign dutWrapper_dut_frameBuffer_sglistIndexReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent2 ;

  // register dutWrapper_dut_frameBuffer_startFrameEnabled
  assign dutWrapper_dut_frameBuffer_startFrameEnabled$D_IN =
	     MUX_dutWrapper_dut_frameBuffer_startFrameEnabled$write_1__SEL_1 ;
  assign dutWrapper_dut_frameBuffer_startFrameEnabled$EN =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_frameBufferEnabled ||
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule ;

  // register dutWrapper_dut_frameBuffer_traceReadingReg
  assign dutWrapper_dut_frameBuffer_traceReadingReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ;
  assign dutWrapper_dut_frameBuffer_traceReadingReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hsync &&
	     dutWrapper_dut_frameBuffer_runningReg &&
	     lineCount__h9115 == 11'd0 ||
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ;

  // register dutWrapper_dut_frameCountReg
  assign dutWrapper_dut_frameCountReg$D_IN =
	     dutWrapper_dut_frameCountReg + 32'd1 ;
  assign dutWrapper_dut_frameCountReg$EN =
	     MUX_dutWrapper_dut_frameBuffer_startFrameEnabled$write_1__SEL_1 ;

  // register dutWrapper_dut_hdmiTpg_dataCount
  assign dutWrapper_dut_hdmiTpg_dataCount$D_IN =
	     MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1 ?
	       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_1 :
	       MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__VAL_2 ;
  assign dutWrapper_dut_hdmiTpg_dataCount$EN =
	     MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_1 ||
	     MUX_dutWrapper_dut_hdmiTpg_dataCount$write_1__SEL_2 ;

  // register dutWrapper_dut_hdmiTpg_deLineCountMaximum
  assign dutWrapper_dut_hdmiTpg_deLineCountMaximum$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[26:16] ;
  assign dutWrapper_dut_hdmiTpg_deLineCountMaximum$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd4 ;

  // register dutWrapper_dut_hdmiTpg_deLineCountMinimum
  assign dutWrapper_dut_hdmiTpg_deLineCountMinimum$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[10:0] ;
  assign dutWrapper_dut_hdmiTpg_deLineCountMinimum$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd4 ;

  // register dutWrapper_dut_hdmiTpg_dePixelCountMaximum
  assign dutWrapper_dut_hdmiTpg_dePixelCountMaximum$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[27:16] ;
  assign dutWrapper_dut_hdmiTpg_dePixelCountMaximum$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd5 ;

  // register dutWrapper_dut_hdmiTpg_dePixelCountMinimum
  assign dutWrapper_dut_hdmiTpg_dePixelCountMinimum$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[11:0] ;
  assign dutWrapper_dut_hdmiTpg_dePixelCountMinimum$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd5 ;

  // register dutWrapper_dut_hdmiTpg_evenOddPixelReg
  assign dutWrapper_dut_hdmiTpg_evenOddPixelReg$D_IN =
	     !dutWrapper_dut_hdmiTpg_evenOddPixelReg ;
  assign dutWrapper_dut_hdmiTpg_evenOddPixelReg$EN =
	     dutWrapper_dut_hdmiTpg_yuv444StageReg[24] ;

  // register dutWrapper_dut_hdmiTpg_hsyncWidth
  assign dutWrapper_dut_hdmiTpg_hsyncWidth$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[27:16] ;
  assign dutWrapper_dut_hdmiTpg_hsyncWidth$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd0 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd1 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd2 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd3 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd4 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd5 ;

  // register dutWrapper_dut_hdmiTpg_lineCount
  assign dutWrapper_dut_hdmiTpg_lineCount$D_IN =
	     dutWrapper_dut_hdmiTpg_pixelCount_11_EQ_dutWra_ETC___d526 ?
	       IF_dutWrapper_dut_hdmiTpg_lineCount_09_EQ_dutW_ETC___d134 :
	       dutWrapper_dut_hdmiTpg_lineCount ;
  assign dutWrapper_dut_hdmiTpg_lineCount$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data ;

  // register dutWrapper_dut_hdmiTpg_lineMidpoint
  assign dutWrapper_dut_hdmiTpg_lineMidpoint$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[10:0] +
	     dutWrapper_dut_commandFifo$dD_OUT[26:16] >>
	     1 ;
  assign dutWrapper_dut_hdmiTpg_lineMidpoint$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd4 ;

  // register dutWrapper_dut_hdmiTpg_numberOfLines
  assign dutWrapper_dut_hdmiTpg_numberOfLines$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[10:0] ;
  assign dutWrapper_dut_hdmiTpg_numberOfLines$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd2 ;

  // register dutWrapper_dut_hdmiTpg_numberOfPixels
  assign dutWrapper_dut_hdmiTpg_numberOfPixels$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[27:16] ;
  assign dutWrapper_dut_hdmiTpg_numberOfPixels$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd2 ;

  // register dutWrapper_dut_hdmiTpg_patternReg0
  assign dutWrapper_dut_hdmiTpg_patternReg0$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[31:0] ;
  assign dutWrapper_dut_hdmiTpg_patternReg0$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs
  assign dutWrapper_dut_hdmiTpg_patternRegs$D_IN =
	     dutWrapper_dut_hdmiTpg_patternReg0 ;
  assign dutWrapper_dut_hdmiTpg_patternRegs$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs_1
  assign dutWrapper_dut_hdmiTpg_patternRegs_1$D_IN = 32'h00FF0000 ;
  assign dutWrapper_dut_hdmiTpg_patternRegs_1$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs_2
  assign dutWrapper_dut_hdmiTpg_patternRegs_2$D_IN = 32'h0000FF00 ;
  assign dutWrapper_dut_hdmiTpg_patternRegs_2$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_patternRegs_3
  assign dutWrapper_dut_hdmiTpg_patternRegs_3$D_IN = 32'h000000FF ;
  assign dutWrapper_dut_hdmiTpg_patternRegs_3$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_pixelCount
  assign dutWrapper_dut_hdmiTpg_pixelCount$D_IN =
	     dutWrapper_dut_hdmiTpg_pixelCount_11_EQ_dutWra_ETC___d526 ?
	       12'd0 :
	       newPixelCount__h7697 ;
  assign dutWrapper_dut_hdmiTpg_pixelCount$EN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data ;

  // register dutWrapper_dut_hdmiTpg_pixelMidpoint
  assign dutWrapper_dut_hdmiTpg_pixelMidpoint$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[11:0] +
	     dutWrapper_dut_commandFifo$dD_OUT[27:16] >>
	     1 ;
  assign dutWrapper_dut_hdmiTpg_pixelMidpoint$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd5 ;

  // register dutWrapper_dut_hdmiTpg_rgb888StageReg
  assign dutWrapper_dut_hdmiTpg_rgb888StageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_OUT[38:36],
	       IF_dutWrapper_dut_hdmiTpg_testPatternEnabled_2_ETC___d198,
	       dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_OUT[11:0] } ;
  assign dutWrapper_dut_hdmiTpg_rgb888StageReg$EN =
	     dutWrapper_dut_hdmiTpg_bramOutStageFifo$EMPTY_N &&
	     dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DRA ;

  // register dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled
  assign dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[0] ;
  assign dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd1 ;

  // register dutWrapper_dut_hdmiTpg_testPatternEnabled
  assign dutWrapper_dut_hdmiTpg_testPatternEnabled$D_IN =
	     dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled ;
  assign dutWrapper_dut_hdmiTpg_testPatternEnabled$EN =
	     _dor1dutWrapper_dut_hdmiTpg_testPatternEnabled$EN_write &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // register dutWrapper_dut_hdmiTpg_vsyncWidth
  assign dutWrapper_dut_hdmiTpg_vsyncWidth$D_IN =
	     dutWrapper_dut_commandFifo$dD_OUT[10:0] ;
  assign dutWrapper_dut_hdmiTpg_vsyncWidth$EN =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd0 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd1 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd2 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd3 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd4 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd5 ;

  // register dutWrapper_dut_hdmiTpg_yuv422StageReg
  assign dutWrapper_dut_hdmiTpg_yuv422StageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_yuv444StageReg[26:24], data__h8739 } ;
  assign dutWrapper_dut_hdmiTpg_yuv422StageReg$EN = 1'd1 ;

  // register dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg
  assign dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_rgb888StageReg[38:36],
	       IF_dutWrapper_dut_hdmiTpg_rgb888StageReg_01_BI_ETC___d230 } ;
  assign dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$EN = 1'd1 ;

  // register dutWrapper_dut_hdmiTpg_yuv444StageReg
  assign dutWrapper_dut_hdmiTpg_yuv444StageReg$D_IN =
	     { dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[146:144],
	       dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[144] ?
		 { x500_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interme_ETC__q1[15:8],
		   x563_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interme_ETC__q2[15:8],
		   x618_MINUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q3[15:8] } :
		 24'd0 } ;
  assign dutWrapper_dut_hdmiTpg_yuv444StageReg$EN = 1'd1 ;

  // register dutWrapper_dut_linesReg
  assign dutWrapper_dut_linesReg$D_IN = requestFifo_fifo_wDataOut$wget[10:0] ;
  assign dutWrapper_dut_linesReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest ;

  // register dutWrapper_dut_pixelsReg
  assign dutWrapper_dut_pixelsReg$D_IN =
	     requestFifo_fifo_wDataOut$wget[27:16] ;
  assign dutWrapper_dut_pixelsReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest ;

  // register dutWrapper_dut_segmentIndexReg
  assign dutWrapper_dut_segmentIndexReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest ?
	       requestFifo_fifo_wDataOut$wget[7:0] :
	       MUX_dutWrapper_dut_segmentIndexReg$write_1__VAL_2 ;
  assign dutWrapper_dut_segmentIndexReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ;

  // register dutWrapper_dut_segmentOffsetReg
  assign dutWrapper_dut_segmentOffsetReg$D_IN =
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ?
	       x__h12059 :
	       24'd0 ;
  assign dutWrapper_dut_segmentOffsetReg$EN =
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest ;

  // register dutWrapper_dut_sendVsyncIndication
  assign dutWrapper_dut_sendVsyncIndication$D_IN =
	     MUX_dutWrapper_dut_sendVsyncIndication$write_1__SEL_1 ;
  assign dutWrapper_dut_sendVsyncIndication$EN =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_waitingForVsync ||
	     WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse ;

  // register dutWrapper_dut_strideBytesReg
  assign dutWrapper_dut_strideBytesReg$D_IN =
	     requestFifo_fifo_wDataOut$wget[13:0] ;
  assign dutWrapper_dut_strideBytesReg$EN =
	     WILL_FIRE_RL_dutWrapper_handlehdmiStrideBytesrequest ;

  // register dutWrapper_dut_vsyncPulseCountReg
  assign dutWrapper_dut_vsyncPulseCountReg$D_IN =
	     dutWrapper_dut_vsyncPulseCountReg + 32'd1 ;
  assign dutWrapper_dut_vsyncPulseCountReg$EN =
	     WILL_FIRE_RL_dutWrapper_dut_vsync ;

  // register dutWrapper_dut_waitingForVsync
  assign dutWrapper_dut_waitingForVsync$D_IN =
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest ;
  assign dutWrapper_dut_waitingForVsync$EN =
	     WILL_FIRE_RL_dutWrapper_dut_vsync &&
	     dutWrapper_dut_waitingForVsync ||
	     WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ;

  // register dutWrapper_junkReqReg
  assign dutWrapper_junkReqReg$D_IN = 32'h0 ;
  assign dutWrapper_junkReqReg$EN = 1'b0 ;

  // register dutWrapper_requestFired
  assign dutWrapper_requestFired$D_IN = dutWrapper_requestFired + 32'd1 ;
  assign dutWrapper_requestFired$EN = requestFifo_fifo_pwDequeue$whas ;

  // register dutWrapper_requestTimeLimitReg
  assign dutWrapper_requestTimeLimitReg$D_IN = 16'h0 ;
  assign dutWrapper_requestTimeLimitReg$EN = 1'b0 ;

  // register dutWrapper_requestTimerReg
  assign dutWrapper_requestTimerReg$D_IN =
	     (WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	      WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest ||
	      WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ||
	      WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest ||
	      WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest ||
	      WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest ||
	      WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest ||
	      WILL_FIRE_RL_dutWrapper_handlehdmiStrideBytesrequest ||
	      WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest ||
	      WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest ||
	      WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest) ?
	       16'd0 :
	       MUX_dutWrapper_requestTimerReg$write_1__VAL_12 ;
  assign dutWrapper_requestTimerReg$EN =
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ||
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ||
	     WILL_FIRE_RL_dutWrapper_handlebeginTranslationTablerequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiStrideBytesrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlewaitForVsyncrequest ||
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ;

  // register dutWrapper_responseFired
  assign dutWrapper_responseFired$D_IN = dutWrapper_responseFired + 32'd1 ;
  assign dutWrapper_responseFired$EN =
	     WILL_FIRE_RL_dutWrapper_translationTableEntryresponse ||
	     WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse ;

  // register dutWrapper_responseTimeLimitReg
  assign dutWrapper_responseTimeLimitReg$D_IN = 16'h0 ;
  assign dutWrapper_responseTimeLimitReg$EN = 1'b0 ;

  // register dutWrapper_responseTimerReg
  assign dutWrapper_responseTimerReg$D_IN =
	     dutWrapper_responseTimerReg + 16'd1 ;
  assign dutWrapper_responseTimerReg$EN = !responseFifo_fifo$FULL_N ;

  // register getWordCount
  assign getWordCount$D_IN = getWordCount + 32'd1 ;
  assign getWordCount$EN = EN_fifo_get && responseFifo_fifo$EMPTY_N ;

  // register interruptCleared
  assign interruptCleared$D_IN = !(!interrupted) ;
  assign interruptCleared$EN =
	     EN_ctrl_put && ctrl_put_addr == 12'h0 && ctrl_put_v[0] &&
	     interrupted ||
	     !interrupted ;

  // register interruptEnableReg
  assign interruptEnableReg$D_IN = ctrl_put_v ;
  assign interruptEnableReg$EN = EN_ctrl_put && ctrl_put_addr == 12'h004 ;

  // register interrupted
  assign interrupted$D_IN = responseFifo_fifo$EMPTY_N ;
  assign interrupted$EN = 1'd1 ;

  // register overflowCount
  assign overflowCount$D_IN = overflowCount + 32'd1 ;
  assign overflowCount$EN =
	     EN_fifo_put &&
	     requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ;

  // register putWordCount
  assign putWordCount$D_IN = putWordCount + 32'd1 ;
  assign putWordCount$EN =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ;

  // register requestFifo_buff
  assign requestFifo_buff$D_IN =
	     (requestFifo_count == 32'd1) ?
	       { fifo_put_v, requestFifo_buff[35:32] } :
	       newval__h13723 ;
  assign requestFifo_buff$EN =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ;

  // register requestFifo_count
  assign requestFifo_count$D_IN =
	     (requestFifo_count == 32'd1) ? 32'd0 : x__h13824 ;
  assign requestFifo_count$EN =
	     EN_fifo_put &&
	     !requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ;

  // register requestFifo_fifo_rCache
  assign requestFifo_fifo_rCache$D_IN =
	     { 1'd1, requestFifo_fifo_rWrPtr, x__h710 } ;
  assign requestFifo_fifo_rCache$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register requestFifo_fifo_rRdPtr
  assign requestFifo_fifo_rRdPtr$D_IN = x__h811 ;
  assign requestFifo_fifo_rRdPtr$EN = requestFifo_fifo_pwDequeue$whas ;

  // register requestFifo_fifo_rWrPtr
  assign requestFifo_fifo_rWrPtr$D_IN = requestFifo_fifo_rWrPtr + 5'd1 ;
  assign requestFifo_fifo_rWrPtr$EN = requestFifo_fifo_pwEnqueue$whas ;

  // register responseFifo_count
  assign responseFifo_count$D_IN =
	     (responseFifo_count == 32'd3) ? 32'd0 : x__h14072 ;
  assign responseFifo_count$EN = EN_fifo_get && responseFifo_fifo$EMPTY_N ;

  // register underflowCount
  assign underflowCount$D_IN = underflowCount + 32'd1 ;
  assign underflowCount$EN = EN_fifo_get && !responseFifo_fifo$EMPTY_N ;

  // register word0Put
  assign word0Put$D_IN = word1Put ;
  assign word0Put$EN = EN_fifo_put ;

  // register word1Put
  assign word1Put$D_IN = fifo_put_v ;
  assign word1Put$EN = EN_fifo_put ;

  // submodule dutWrapper_dut_commandFifo
  always@(WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest or
	  MUX_dutWrapper_dut_commandFifo$enq_1__VAL_1 or
	  WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest or
	  WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest or
	  MUX_dutWrapper_dut_commandFifo$enq_1__VAL_3 or
	  WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest or
	  MUX_dutWrapper_dut_commandFifo$enq_1__VAL_4 or
	  WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest or
	  MUX_dutWrapper_dut_commandFifo$enq_1__VAL_5 or
	  WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest or
	  MUX_dutWrapper_dut_commandFifo$enq_1__VAL_6 or
	  WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest or
	  MUX_dutWrapper_dut_commandFifo$enq_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest:
	  dutWrapper_dut_commandFifo$sD_IN =
	      MUX_dutWrapper_dut_commandFifo$enq_1__VAL_1;
      WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest:
	  dutWrapper_dut_commandFifo$sD_IN = 35'h155555554;
      WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest:
	  dutWrapper_dut_commandFifo$sD_IN =
	      MUX_dutWrapper_dut_commandFifo$enq_1__VAL_3;
      WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest:
	  dutWrapper_dut_commandFifo$sD_IN =
	      MUX_dutWrapper_dut_commandFifo$enq_1__VAL_4;
      WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest:
	  dutWrapper_dut_commandFifo$sD_IN =
	      MUX_dutWrapper_dut_commandFifo$enq_1__VAL_5;
      WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest:
	  dutWrapper_dut_commandFifo$sD_IN =
	      MUX_dutWrapper_dut_commandFifo$enq_1__VAL_6;
      WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest:
	  dutWrapper_dut_commandFifo$sD_IN =
	      MUX_dutWrapper_dut_commandFifo$enq_1__VAL_7;
      default: dutWrapper_dut_commandFifo$sD_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dutWrapper_dut_commandFifo$sENQ =
	     WILL_FIRE_RL_dutWrapper_handlesetPatternRegrequest ||
	     WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiLinesPixelsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiBlankLinesPixelsrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiLineCountMinMaxrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiPixelCountMinMaxrequest ||
	     WILL_FIRE_RL_dutWrapper_handlehdmiSyncWidthsrequest ;
  assign dutWrapper_dut_commandFifo$dDEQ =
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd0 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd1 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd2 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd3 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd4 &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] != 3'd5 ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd5 ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd4 ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd3 ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd2 ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd1 ||
	     dutWrapper_dut_commandFifo$dEMPTY_N &&
	     dutWrapper_dut_commandFifo$dD_OUT[34:32] == 3'd0 ;

  // submodule dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ADDRA =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent ?
	       index__h3072 :
	       dutWrapper_dut_segmentIndexReg ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ADDRB =
	     dutWrapper_dut_frameBuffer_nextFbc[44:37] ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DIA =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent ?
	       88'd0 :
	       MUX_dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$portAReq_3__VAL_2 ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DIB = 88'd0 ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$WEA =
	     !WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$WEB = 1'd0 ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ENA =
	     WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent ||
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ;
  assign dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$ENB =
	     MUX_dutWrapper_dut_frameBuffer_startFrameEnabled$write_1__SEL_1 ;

  // submodule dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ADDRA =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule ?
	       MUX_dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$portAReq_2__VAL_1 :
	       12'd0 ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ADDRB =
	     dutWrapper_dut_frameBuffer_pixelCountReg2 >> 1 ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DIA = 64'd0 ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DIB =
	     axir0_readData_data ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$WEA = 1'd0 ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$WEB = 1'd1 ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ENA =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data ;
  assign dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$ENB =
	     EN_axir0_readData ;

  // submodule dutWrapper_dut_hdmiTpg_bramOutStageFifo
  assign dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_IN =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data ?
	       MUX_dutWrapper_dut_hdmiTpg_bramOutStageFifo$enq_1__VAL_1 :
	       MUX_dutWrapper_dut_hdmiTpg_bramOutStageFifo$enq_1__VAL_2 ;
  assign dutWrapper_dut_hdmiTpg_bramOutStageFifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data ||
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule ;
  assign dutWrapper_dut_hdmiTpg_bramOutStageFifo$DEQ =
	     dutWrapper_dut_hdmiTpg_bramOutStageFifo$EMPTY_N &&
	     dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DRA ;
  assign dutWrapper_dut_hdmiTpg_bramOutStageFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_hsyncPulse
  assign dutWrapper_dut_hsyncPulse$sEN =
	     dutWrapper_dut_hsyncPulse$sRDY &&
	     NOT_dutWrapper_dut_hdmiTpg_lineCount_09_ULT_du_ETC___d118 &&
	     dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // submodule dutWrapper_dut_rgbrgbFifo
  assign dutWrapper_dut_rgbrgbFifo$sD_IN = 64'h0 ;
  assign dutWrapper_dut_rgbrgbFifo$sENQ = 1'b0 ;
  assign dutWrapper_dut_rgbrgbFifo$dDEQ = 1'b0 ;

  // submodule dutWrapper_dut_translationEntryFifo
  assign dutWrapper_dut_translationEntryFifo$D_IN =
	     { 12'd0,
	       requestFifo_fifo_wDataOut$wget[31:12],
	       8'd0,
	       dutWrapper_dut_segmentOffsetReg,
	       20'd0,
	       requestFifo_fifo_wDataOut$wget[11:0] } ;
  assign dutWrapper_dut_translationEntryFifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest ;
  assign dutWrapper_dut_translationEntryFifo$DEQ =
	     WILL_FIRE_RL_dutWrapper_translationTableEntryresponse ;
  assign dutWrapper_dut_translationEntryFifo$CLR = 1'b0 ;

  // submodule dutWrapper_dut_vsyncPulse
  assign dutWrapper_dut_vsyncPulse$sEN =
	     dutWrapper_dut_vsyncPulse$sRDY &&
	     dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	     dutWrapper_dut_hdmiTpg_pixelCount == 12'd0 ;

  // submodule requestFifo_fifo_memory
  assign requestFifo_fifo_memory$ADDRA = requestFifo_fifo_rWrPtr[3:0] ;
  assign requestFifo_fifo_memory$ADDRB =
	     requestFifo_fifo_pwDequeue$whas ?
	       x__h811[3:0] :
	       requestFifo_fifo_rRdPtr[3:0] ;
  assign requestFifo_fifo_memory$DIA = x__h710 ;
  assign requestFifo_fifo_memory$DIB =
	     36'hAAAAAAAAA /* unspecified value */  ;
  assign requestFifo_fifo_memory$WEA = requestFifo_fifo_pwEnqueue$whas ;
  assign requestFifo_fifo_memory$WEB = 1'd0 ;
  assign requestFifo_fifo_memory$ENA = 1'd1 ;
  assign requestFifo_fifo_memory$ENB = 1'd1 ;

  // submodule responseFifo_fifo
  assign responseFifo_fifo$D_IN =
	     WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse ?
	       MUX_responseFifo_fifo$enq_1__VAL_1 :
	       MUX_responseFifo_fifo$enq_1__VAL_2 ;
  assign responseFifo_fifo$ENQ =
	     WILL_FIRE_RL_dutWrapper_vsyncReceivedresponse ||
	     WILL_FIRE_RL_dutWrapper_translationTableEntryresponse ;
  assign responseFifo_fifo$DEQ =
	     EN_fifo_get && responseFifo_fifo$EMPTY_N &&
	     responseFifo_count == 32'd3 ;
  assign responseFifo_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_dutWrapper_dut_hdmiTpg_lineCount_09_EQ_dutW_ETC___d134 =
	     (dutWrapper_dut_hdmiTpg_lineCount ==
	      dutWrapper_dut_hdmiTpg_numberOfLines - 11'd1) ?
	       11'd0 :
	       newLineCount___1__h7666 ;
  assign IF_dutWrapper_dut_hdmiTpg_rgb888StageReg_01_BI_ETC___d230 =
	     dutWrapper_dut_hdmiTpg_rgb888StageReg[36] ?
	       { _77_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d206[15:0],
		 _150_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d210[15:0],
		 _29_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d214[15:0],
		 _43_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d216[15:0],
		 _85_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d218[15:0],
		 1'd0,
		 dutWrapper_dut_hdmiTpg_rgb888StageReg[35:28],
		 8'd0,
		 dutWrapper_dut_hdmiTpg_rgb888StageReg[19:12],
		 7'd0,
		 _107_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d222[15:0],
		 _21_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d224[15:0] } :
	       144'd0 ;
  assign IF_dutWrapper_dut_hdmiTpg_testPatternEnabled_2_ETC___d198 =
	     dutWrapper_dut_hdmiTpg_testPatternEnabled ?
	       dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_OUT[35:12] :
	       (dutWrapper_dut_hdmiTpg_bramOutStageFifo$D_OUT[0] ?
		  dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DOA[55:32] :
		  dutWrapper_dut_frameBuffer_syncBRAM_syncBRAMBVI$DOA[23:0]) ;
  assign IF_interrupted_87_THEN_5899681_ELSE_5899680___d534 =
	     interrupted ? 32'd5899681 : 32'd5899680 ;
  assign IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533 =
	     responseFifo_fifo$FULL_N ? 32'h00000020 : 32'd0 ;
  assign NOT_dutWrapper_dut_hdmiTpg_lineCount_09_ULT_du_ETC___d118 =
	     dutWrapper_dut_hdmiTpg_lineCount >=
	     dutWrapper_dut_hdmiTpg_deLineCountMinimum ;
  assign NOT_dutWrapper_dut_hdmiTpg_pixelCount_11_ULT_d_ETC___d150 =
	     dutWrapper_dut_hdmiTpg_pixelCount >=
	     dutWrapper_dut_hdmiTpg_dePixelCountMinimum &&
	     dutWrapper_dut_hdmiTpg_pixelCount <
	     dutWrapper_dut_hdmiTpg_dePixelCountMaximum &&
	     NOT_dutWrapper_dut_hdmiTpg_lineCount_09_ULT_du_ETC___d118 ;
  assign _107_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d222 =
	     16'd107 *
	     { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[27:20] } ;
  assign _150_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888_ETC___d210 =
	     16'd150 *
	     { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[27:20] } ;
  assign _21_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d224 =
	     16'd21 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[35:28] } ;
  assign _29_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d214 =
	     16'd29 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[35:28] } ;
  assign _43_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d216 =
	     16'd43 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[19:12] } ;
  assign _77_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d206 =
	     16'd77 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[19:12] } ;
  assign _85_MUL_0_CONCAT_dutWrapper_dut_hdmiTpg_rgb888S_ETC___d218 =
	     16'd85 * { 8'd0, dutWrapper_dut_hdmiTpg_rgb888StageReg[27:20] } ;
  assign _dor1dutWrapper_dut_hdmiTpg_testPatternEnabled$EN_write =
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule ||
	     WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data ;
  assign _theResult____h7239 =
	     (dutWrapper_dut_hdmiTpg_pixelCount <
	      dutWrapper_dut_hdmiTpg_pixelMidpoint) ?
	       2'd0 :
	       2'd1 ;
  assign data__h8739 =
	     { dutWrapper_dut_hdmiTpg_evenOddPixelReg ?
		 dutWrapper_dut_hdmiTpg_yuv444StageReg[15:8] :
		 dutWrapper_dut_hdmiTpg_yuv444StageReg[7:0],
	       dutWrapper_dut_hdmiTpg_yuv444StageReg[23:16] } ;
  assign dutWrapper_dut_frameBuffer_readAddrReg_4_ULE_d_ETC___d28 =
	     dutWrapper_dut_frameBuffer_readAddrReg <=
	     dutWrapper_dut_frameBuffer_segmentLimitReg ;
  assign dutWrapper_dut_hdmiTpg_lineCount_09_ULT_dutWra_ETC___d120 =
	     dutWrapper_dut_hdmiTpg_lineCount <
	     dutWrapper_dut_hdmiTpg_deLineCountMaximum ;
  assign dutWrapper_dut_hdmiTpg_pixelCount_11_EQ_dutWra_ETC___d526 =
	     dutWrapper_dut_hdmiTpg_pixelCount ==
	     dutWrapper_dut_hdmiTpg_numberOfPixels - 12'd1 ;
  assign index__h3072 = dutWrapper_dut_frameBuffer_sglistIndexReg + 8'd1 ;
  assign length__h11939 = { 8'd0, requestFifo_fifo_wDataOut$wget[11:0] } ;
  assign lineAddr___1__h9155 =
	     dutWrapper_dut_frameBuffer_lineAddrReg +
	     { 10'd0, dutWrapper_dut_frameBuffer_fbc[13:0] } ;
  assign lineAddr__h9117 =
	     (dutWrapper_dut_frameBuffer_readAddrReg == 24'hFFFFFF) ?
	       dutWrapper_dut_frameBuffer_lineAddrReg :
	       lineAddr___1__h9155 ;
  assign lineCount___1__h9157 =
	     dutWrapper_dut_frameBuffer_lineCountReg - 11'd1 ;
  assign lineCount__h9115 =
	     (dutWrapper_dut_frameBuffer_readAddrReg == 24'hFFFFFF) ?
	       dutWrapper_dut_frameBuffer_lineCountReg :
	       lineCount___1__h9157 ;
  assign newLineCount___1__h7666 = dutWrapper_dut_hdmiTpg_lineCount + 11'd1 ;
  assign newPixelCount__h7697 = dutWrapper_dut_hdmiTpg_pixelCount + 12'd1 ;
  assign newval__h13723 = { fifo_put_v, requestFifo_buff[35:32] } ;
  assign readLimit___1__h9156 =
	     dutWrapper_dut_frameBuffer_readLimitReg +
	     { 10'd0, dutWrapper_dut_frameBuffer_fbc[13:0] } ;
  assign readLimit__h9118 =
	     (dutWrapper_dut_frameBuffer_readAddrReg == 24'hFFFFFF) ?
	       dutWrapper_dut_frameBuffer_readLimitReg :
	       readLimit___1__h9156 ;
  assign requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 =
	     requestFifo_fifo_rRdPtr == requestFifo_fifo_rWrPtr ;
  assign requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 =
	     requestFifo_fifo_rRdPtr + 5'd8 == requestFifo_fifo_rWrPtr ;
  assign result__h13501 =
	     { IF_interrupted_87_THEN_5899681_ELSE_5899680___d534[31:17],
	       responseFifo_fifo$FULL_N,
	       IF_interrupted_87_THEN_5899681_ELSE_5899680___d534[15:0] } ;
  assign result__h7365 = { 1'd1, _theResult____h7239[0] } ;
  assign segmentOffset__h3215 =
	     { dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOA[39:20],
	       12'd0 } -
	     { 8'd0,
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOA[87:64] } ;
  assign segmentOffset__h3656 =
	     { dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[39:20],
	       12'd0 } -
	     { 8'd0,
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] } ;
  assign spliced_bits__h3296 =
	     { index__h3072,
	       dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOA[63:40] } ;
  assign spliced_bits__h3938 =
	     { 16'd0,
	       dutWrapper_dut_frameBuffer_nextFbc[44:37],
	       dutWrapper_dut_frameBuffer_nextFbc[44:37] } ;
  assign v___1__h13968 =
	     responseFifo_fifo$EMPTY_N ? x__h14213[31:0] : 32'h050A050A ;
  assign x500_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interme_ETC__q1 =
	     x__h8500 +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[111:96] ;
  assign x563_PLUS_dutWrapper_dut_hdmiTpg_yuv444Interme_ETC__q2 =
	     x__h8563 +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[63:48] ;
  assign x618_MINUS_dutWrapper_dut_hdmiTpg_yuv444Interm_ETC__q3 =
	     x__h8618 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[15:0] ;
  assign x__h12059 =
	     dutWrapper_dut_segmentOffsetReg +
	     { requestFifo_fifo_wDataOut$wget[11:0], 12'd0 } ;
  assign x__h13460 = x__h13462 | y__h13463 ;
  assign x__h13462 = x__h13464 | y__h13465 ;
  assign x__h13464 =
	     { IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533[31],
	       2'd3,
	       IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533[28],
	       1'd1,
	       IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533[26:23],
	       1'd1,
	       IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533[21:19],
	       3'd7,
	       IF_responseFifo_fifo_i_notFull__04_THEN_0x20_E_ETC___d533[15:0] } ;
  assign x__h13824 = requestFifo_count + 32'd1 ;
  assign x__h14072 = responseFifo_count + 32'd1 ;
  assign x__h14213 = responseFifo_fifo$D_OUT >> x__h14217 ;
  assign x__h14217 = { responseFifo_count[26:0], 5'd0 } ;
  assign x__h710 =
	     requestFifo_fifo_pwEnqueue$whas ?
	       requestFifo_fifo_wDataIn$wget :
	       36'd0 ;
  assign x__h7275 =
	     dutWrapper_dut_hdmiTpg_lineCount <
	     dutWrapper_dut_hdmiTpg_vsyncWidth ;
  assign x__h7285 =
	     dutWrapper_dut_hdmiTpg_pixelCount <
	     dutWrapper_dut_hdmiTpg_hsyncWidth ;
  assign x__h7351 =
	     (dutWrapper_dut_hdmiTpg_lineCount <
	      dutWrapper_dut_hdmiTpg_lineMidpoint) ?
	       _theResult____h7239 :
	       result__h7365 ;
  assign x__h7895 = dutWrapper_dut_hdmiTpg_dataCount + 12'd1 ;
  assign x__h811 = requestFifo_fifo_rRdPtr + 5'd1 ;
  assign x__h8500 =
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[143:128] +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[127:112] ;
  assign x__h8563 =
	     x__h8565 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[79:64] ;
  assign x__h8565 =
	     16'd32768 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[95:80] ;
  assign x__h8618 =
	     x__h8620 -
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[31:16] ;
  assign x__h8620 =
	     16'd32768 +
	     dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg[47:32] ;
  assign y__h13461 =
	     requestFifo_fifo_rRdPtr_1_EQ_requestFifo_fifo__ETC___d308 ?
	       32'd0 :
	       32'h00000001 ;
  assign y__h13463 =
	     requestFifo_fifo_rRdPtr_1_PLUS_8_99_EQ_request_ETC___d536 ?
	       32'd0 :
	       32'h00000002 ;
  assign y__h13465 = responseFifo_fifo$EMPTY_N ? 32'h00000010 : 32'd0 ;
  assign y__h3760 = { 10'd0, dutWrapper_dut_frameBuffer_nextFbc[13:0] } ;
  always@(x__h7351 or
	  dutWrapper_dut_hdmiTpg_patternRegs_3 or
	  dutWrapper_dut_hdmiTpg_patternRegs or
	  dutWrapper_dut_hdmiTpg_patternRegs_1 or
	  dutWrapper_dut_hdmiTpg_patternRegs_2)
  begin
    case (x__h7351)
      2'd0: data__h7240 = dutWrapper_dut_hdmiTpg_patternRegs;
      2'd1: data__h7240 = dutWrapper_dut_hdmiTpg_patternRegs_1;
      2'd2: data__h7240 = dutWrapper_dut_hdmiTpg_patternRegs_2;
      2'd3: data__h7240 = dutWrapper_dut_hdmiTpg_patternRegs_3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dutWrapper_blockedRequestsDiscardedReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_blockedResponsesDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_frameBufferEnabled <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_frameBuffer_fbc <= `BSV_ASSIGNMENT_DELAY 69'd0;
	dutWrapper_dut_frameBuffer_lineAddrReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dutWrapper_dut_frameBuffer_lineCountReg <= `BSV_ASSIGNMENT_DELAY
	    11'd0;
	dutWrapper_dut_frameBuffer_nextFbc <= `BSV_ASSIGNMENT_DELAY 69'd0;
	dutWrapper_dut_frameBuffer_nextent2Enabled <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_frameBuffer_pixelCountReg <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	dutWrapper_dut_frameBuffer_pixelCountReg2 <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	dutWrapper_dut_frameBuffer_readAddrReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dutWrapper_dut_frameBuffer_readLimitReg <= `BSV_ASSIGNMENT_DELAY
	    24'd0;
	dutWrapper_dut_frameBuffer_readingReg <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	dutWrapper_dut_frameBuffer_runningReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_frameBuffer_segmentLimitReg <= `BSV_ASSIGNMENT_DELAY
	    24'd0;
	dutWrapper_dut_frameBuffer_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	dutWrapper_dut_frameBuffer_sglistIndexReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	dutWrapper_dut_frameBuffer_startFrameEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_frameBuffer_traceReadingReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	dutWrapper_dut_frameCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_linesReg <= `BSV_ASSIGNMENT_DELAY 11'd1080;
	dutWrapper_dut_pixelsReg <= `BSV_ASSIGNMENT_DELAY 12'd1920;
	dutWrapper_dut_segmentIndexReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dutWrapper_dut_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	dutWrapper_dut_sendVsyncIndication <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_strideBytesReg <= `BSV_ASSIGNMENT_DELAY 14'd7680;
	dutWrapper_dut_vsyncPulseCountReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_waitingForVsync <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dutWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dutWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	getWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interruptCleared <= `BSV_ASSIGNMENT_DELAY 1'd0;
	interruptEnableReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	interrupted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	overflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	putWordCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_buff <= `BSV_ASSIGNMENT_DELAY 36'd0;
	requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 42'h0AAAAAAAAAA;
	requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	underflowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	word0Put <= `BSV_ASSIGNMENT_DELAY 32'd0;
	word1Put <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dutWrapper_blockedRequestsDiscardedReg$EN)
	  dutWrapper_blockedRequestsDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_blockedRequestsDiscardedReg$D_IN;
	if (dutWrapper_blockedResponsesDiscardedReg$EN)
	  dutWrapper_blockedResponsesDiscardedReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_blockedResponsesDiscardedReg$D_IN;
	if (dutWrapper_dut_frameBufferEnabled$EN)
	  dutWrapper_dut_frameBufferEnabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBufferEnabled$D_IN;
	if (dutWrapper_dut_frameBuffer_fbc$EN)
	  dutWrapper_dut_frameBuffer_fbc <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_fbc$D_IN;
	if (dutWrapper_dut_frameBuffer_lineAddrReg$EN)
	  dutWrapper_dut_frameBuffer_lineAddrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_lineAddrReg$D_IN;
	if (dutWrapper_dut_frameBuffer_lineCountReg$EN)
	  dutWrapper_dut_frameBuffer_lineCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_lineCountReg$D_IN;
	if (dutWrapper_dut_frameBuffer_nextFbc$EN)
	  dutWrapper_dut_frameBuffer_nextFbc <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_nextFbc$D_IN;
	if (dutWrapper_dut_frameBuffer_nextent2Enabled$EN)
	  dutWrapper_dut_frameBuffer_nextent2Enabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_nextent2Enabled$D_IN;
	if (dutWrapper_dut_frameBuffer_pixelCountReg$EN)
	  dutWrapper_dut_frameBuffer_pixelCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_pixelCountReg$D_IN;
	if (dutWrapper_dut_frameBuffer_pixelCountReg2$EN)
	  dutWrapper_dut_frameBuffer_pixelCountReg2 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_pixelCountReg2$D_IN;
	if (dutWrapper_dut_frameBuffer_readAddrReg$EN)
	  dutWrapper_dut_frameBuffer_readAddrReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_readAddrReg$D_IN;
	if (dutWrapper_dut_frameBuffer_readLimitReg$EN)
	  dutWrapper_dut_frameBuffer_readLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_readLimitReg$D_IN;
	if (dutWrapper_dut_frameBuffer_readingReg$EN)
	  dutWrapper_dut_frameBuffer_readingReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_readingReg$D_IN;
	if (dutWrapper_dut_frameBuffer_runningReg$EN)
	  dutWrapper_dut_frameBuffer_runningReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_runningReg$D_IN;
	if (dutWrapper_dut_frameBuffer_segmentLimitReg$EN)
	  dutWrapper_dut_frameBuffer_segmentLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_segmentLimitReg$D_IN;
	if (dutWrapper_dut_frameBuffer_segmentOffsetReg$EN)
	  dutWrapper_dut_frameBuffer_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_segmentOffsetReg$D_IN;
	if (dutWrapper_dut_frameBuffer_sglistIndexReg$EN)
	  dutWrapper_dut_frameBuffer_sglistIndexReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_sglistIndexReg$D_IN;
	if (dutWrapper_dut_frameBuffer_startFrameEnabled$EN)
	  dutWrapper_dut_frameBuffer_startFrameEnabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_startFrameEnabled$D_IN;
	if (dutWrapper_dut_frameBuffer_traceReadingReg$EN)
	  dutWrapper_dut_frameBuffer_traceReadingReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameBuffer_traceReadingReg$D_IN;
	if (dutWrapper_dut_frameCountReg$EN)
	  dutWrapper_dut_frameCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_frameCountReg$D_IN;
	if (dutWrapper_dut_linesReg$EN)
	  dutWrapper_dut_linesReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_linesReg$D_IN;
	if (dutWrapper_dut_pixelsReg$EN)
	  dutWrapper_dut_pixelsReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_pixelsReg$D_IN;
	if (dutWrapper_dut_segmentIndexReg$EN)
	  dutWrapper_dut_segmentIndexReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_segmentIndexReg$D_IN;
	if (dutWrapper_dut_segmentOffsetReg$EN)
	  dutWrapper_dut_segmentOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_segmentOffsetReg$D_IN;
	if (dutWrapper_dut_sendVsyncIndication$EN)
	  dutWrapper_dut_sendVsyncIndication <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_sendVsyncIndication$D_IN;
	if (dutWrapper_dut_strideBytesReg$EN)
	  dutWrapper_dut_strideBytesReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_strideBytesReg$D_IN;
	if (dutWrapper_dut_vsyncPulseCountReg$EN)
	  dutWrapper_dut_vsyncPulseCountReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_vsyncPulseCountReg$D_IN;
	if (dutWrapper_dut_waitingForVsync$EN)
	  dutWrapper_dut_waitingForVsync <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_waitingForVsync$D_IN;
	if (dutWrapper_junkReqReg$EN)
	  dutWrapper_junkReqReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_junkReqReg$D_IN;
	if (dutWrapper_requestFired$EN)
	  dutWrapper_requestFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestFired$D_IN;
	if (dutWrapper_requestTimeLimitReg$EN)
	  dutWrapper_requestTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestTimeLimitReg$D_IN;
	if (dutWrapper_requestTimerReg$EN)
	  dutWrapper_requestTimerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_requestTimerReg$D_IN;
	if (dutWrapper_responseFired$EN)
	  dutWrapper_responseFired <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseFired$D_IN;
	if (dutWrapper_responseTimeLimitReg$EN)
	  dutWrapper_responseTimeLimitReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseTimeLimitReg$D_IN;
	if (dutWrapper_responseTimerReg$EN)
	  dutWrapper_responseTimerReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_responseTimerReg$D_IN;
	if (getWordCount$EN)
	  getWordCount <= `BSV_ASSIGNMENT_DELAY getWordCount$D_IN;
	if (interruptCleared$EN)
	  interruptCleared <= `BSV_ASSIGNMENT_DELAY interruptCleared$D_IN;
	if (interruptEnableReg$EN)
	  interruptEnableReg <= `BSV_ASSIGNMENT_DELAY interruptEnableReg$D_IN;
	if (interrupted$EN)
	  interrupted <= `BSV_ASSIGNMENT_DELAY interrupted$D_IN;
	if (overflowCount$EN)
	  overflowCount <= `BSV_ASSIGNMENT_DELAY overflowCount$D_IN;
	if (putWordCount$EN)
	  putWordCount <= `BSV_ASSIGNMENT_DELAY putWordCount$D_IN;
	if (requestFifo_buff$EN)
	  requestFifo_buff <= `BSV_ASSIGNMENT_DELAY requestFifo_buff$D_IN;
	if (requestFifo_count$EN)
	  requestFifo_count <= `BSV_ASSIGNMENT_DELAY requestFifo_count$D_IN;
	if (requestFifo_fifo_rCache$EN)
	  requestFifo_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rCache$D_IN;
	if (requestFifo_fifo_rRdPtr$EN)
	  requestFifo_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rRdPtr$D_IN;
	if (requestFifo_fifo_rWrPtr$EN)
	  requestFifo_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      requestFifo_fifo_rWrPtr$D_IN;
	if (responseFifo_count$EN)
	  responseFifo_count <= `BSV_ASSIGNMENT_DELAY responseFifo_count$D_IN;
	if (underflowCount$EN)
	  underflowCount <= `BSV_ASSIGNMENT_DELAY underflowCount$D_IN;
	if (word0Put$EN) word0Put <= `BSV_ASSIGNMENT_DELAY word0Put$D_IN;
	if (word1Put$EN) word1Put <= `BSV_ASSIGNMENT_DELAY word1Put$D_IN;
      end
  end

  always@(posedge CLK_hdmi_ref_clk)
  begin
    if (dutWrapper_dut_hdmi_reset$OUT_RST == `BSV_RESET_VALUE)
      begin
        dutWrapper_dut_hdmiTpg_dataCount <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dutWrapper_dut_hdmiTpg_deLineCountMaximum <= `BSV_ASSIGNMENT_DELAY
	    11'd1121;
	dutWrapper_dut_hdmiTpg_deLineCountMinimum <= `BSV_ASSIGNMENT_DELAY
	    11'd41;
	dutWrapper_dut_hdmiTpg_dePixelCountMaximum <= `BSV_ASSIGNMENT_DELAY
	    12'd2112;
	dutWrapper_dut_hdmiTpg_dePixelCountMinimum <= `BSV_ASSIGNMENT_DELAY
	    12'd192;
	dutWrapper_dut_hdmiTpg_evenOddPixelReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dutWrapper_dut_hdmiTpg_hsyncWidth <= `BSV_ASSIGNMENT_DELAY 12'd44;
	dutWrapper_dut_hdmiTpg_lineCount <= `BSV_ASSIGNMENT_DELAY 11'd0;
	dutWrapper_dut_hdmiTpg_lineMidpoint <= `BSV_ASSIGNMENT_DELAY 11'd581;
	dutWrapper_dut_hdmiTpg_numberOfLines <= `BSV_ASSIGNMENT_DELAY
	    11'd1125;
	dutWrapper_dut_hdmiTpg_numberOfPixels <= `BSV_ASSIGNMENT_DELAY
	    12'd2200;
	dutWrapper_dut_hdmiTpg_patternReg0 <= `BSV_ASSIGNMENT_DELAY
	    32'h00FFFFFF;
	dutWrapper_dut_hdmiTpg_patternRegs <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_patternRegs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_patternRegs_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_patternRegs_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dutWrapper_dut_hdmiTpg_pixelCount <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dutWrapper_dut_hdmiTpg_pixelMidpoint <= `BSV_ASSIGNMENT_DELAY
	    12'd1152;
	dutWrapper_dut_hdmiTpg_rgb888StageReg <= `BSV_ASSIGNMENT_DELAY 39'd0;
	dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	dutWrapper_dut_hdmiTpg_testPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	dutWrapper_dut_hdmiTpg_vsyncWidth <= `BSV_ASSIGNMENT_DELAY 11'd5;
	dutWrapper_dut_hdmiTpg_yuv422StageReg <= `BSV_ASSIGNMENT_DELAY 19'd0;
	dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg <= `BSV_ASSIGNMENT_DELAY
	    147'd0;
	dutWrapper_dut_hdmiTpg_yuv444StageReg <= `BSV_ASSIGNMENT_DELAY 27'd0;
      end
    else
      begin
        if (dutWrapper_dut_hdmiTpg_dataCount$EN)
	  dutWrapper_dut_hdmiTpg_dataCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_dataCount$D_IN;
	if (dutWrapper_dut_hdmiTpg_deLineCountMaximum$EN)
	  dutWrapper_dut_hdmiTpg_deLineCountMaximum <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_deLineCountMaximum$D_IN;
	if (dutWrapper_dut_hdmiTpg_deLineCountMinimum$EN)
	  dutWrapper_dut_hdmiTpg_deLineCountMinimum <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_deLineCountMinimum$D_IN;
	if (dutWrapper_dut_hdmiTpg_dePixelCountMaximum$EN)
	  dutWrapper_dut_hdmiTpg_dePixelCountMaximum <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_dePixelCountMaximum$D_IN;
	if (dutWrapper_dut_hdmiTpg_dePixelCountMinimum$EN)
	  dutWrapper_dut_hdmiTpg_dePixelCountMinimum <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_dePixelCountMinimum$D_IN;
	if (dutWrapper_dut_hdmiTpg_evenOddPixelReg$EN)
	  dutWrapper_dut_hdmiTpg_evenOddPixelReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_evenOddPixelReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_hsyncWidth$EN)
	  dutWrapper_dut_hdmiTpg_hsyncWidth <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_hsyncWidth$D_IN;
	if (dutWrapper_dut_hdmiTpg_lineCount$EN)
	  dutWrapper_dut_hdmiTpg_lineCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_lineCount$D_IN;
	if (dutWrapper_dut_hdmiTpg_lineMidpoint$EN)
	  dutWrapper_dut_hdmiTpg_lineMidpoint <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_lineMidpoint$D_IN;
	if (dutWrapper_dut_hdmiTpg_numberOfLines$EN)
	  dutWrapper_dut_hdmiTpg_numberOfLines <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_numberOfLines$D_IN;
	if (dutWrapper_dut_hdmiTpg_numberOfPixels$EN)
	  dutWrapper_dut_hdmiTpg_numberOfPixels <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_numberOfPixels$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternReg0$EN)
	  dutWrapper_dut_hdmiTpg_patternReg0 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternReg0$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs_1$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs_1 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs_1$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs_2$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs_2 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs_2$D_IN;
	if (dutWrapper_dut_hdmiTpg_patternRegs_3$EN)
	  dutWrapper_dut_hdmiTpg_patternRegs_3 <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_patternRegs_3$D_IN;
	if (dutWrapper_dut_hdmiTpg_pixelCount$EN)
	  dutWrapper_dut_hdmiTpg_pixelCount <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_pixelCount$D_IN;
	if (dutWrapper_dut_hdmiTpg_pixelMidpoint$EN)
	  dutWrapper_dut_hdmiTpg_pixelMidpoint <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_pixelMidpoint$D_IN;
	if (dutWrapper_dut_hdmiTpg_rgb888StageReg$EN)
	  dutWrapper_dut_hdmiTpg_rgb888StageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_rgb888StageReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$EN)
	  dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled$D_IN;
	if (dutWrapper_dut_hdmiTpg_testPatternEnabled$EN)
	  dutWrapper_dut_hdmiTpg_testPatternEnabled <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_testPatternEnabled$D_IN;
	if (dutWrapper_dut_hdmiTpg_vsyncWidth$EN)
	  dutWrapper_dut_hdmiTpg_vsyncWidth <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_vsyncWidth$D_IN;
	if (dutWrapper_dut_hdmiTpg_yuv422StageReg$EN)
	  dutWrapper_dut_hdmiTpg_yuv422StageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_yuv422StageReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$EN)
	  dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg$D_IN;
	if (dutWrapper_dut_hdmiTpg_yuv444StageReg$EN)
	  dutWrapper_dut_hdmiTpg_yuv444StageReg <= `BSV_ASSIGNMENT_DELAY
	      dutWrapper_dut_hdmiTpg_yuv444StageReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dutWrapper_blockedRequestsDiscardedReg = 32'hAAAAAAAA;
    dutWrapper_blockedResponsesDiscardedReg = 32'hAAAAAAAA;
    dutWrapper_dut_frameBufferEnabled = 1'h0;
    dutWrapper_dut_frameBuffer_fbc = 69'h0AAAAAAAAAAAAAAAAA;
    dutWrapper_dut_frameBuffer_lineAddrReg = 24'hAAAAAA;
    dutWrapper_dut_frameBuffer_lineCountReg = 11'h2AA;
    dutWrapper_dut_frameBuffer_nextFbc = 69'h0AAAAAAAAAAAAAAAAA;
    dutWrapper_dut_frameBuffer_nextent2Enabled = 1'h0;
    dutWrapper_dut_frameBuffer_pixelCountReg = 12'hAAA;
    dutWrapper_dut_frameBuffer_pixelCountReg2 = 12'hAAA;
    dutWrapper_dut_frameBuffer_readAddrReg = 24'hAAAAAA;
    dutWrapper_dut_frameBuffer_readLimitReg = 24'hAAAAAA;
    dutWrapper_dut_frameBuffer_readingReg = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_frameBuffer_runningReg = 1'h0;
    dutWrapper_dut_frameBuffer_segmentLimitReg = 24'hAAAAAA;
    dutWrapper_dut_frameBuffer_segmentOffsetReg = 32'hAAAAAAAA;
    dutWrapper_dut_frameBuffer_sglistIndexReg = 8'hAA;
    dutWrapper_dut_frameBuffer_startFrameEnabled = 1'h0;
    dutWrapper_dut_frameBuffer_traceReadingReg = 1'h0;
    dutWrapper_dut_frameCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_dataCount = 12'hAAA;
    dutWrapper_dut_hdmiTpg_deLineCountMaximum = 11'h2AA;
    dutWrapper_dut_hdmiTpg_deLineCountMinimum = 11'h2AA;
    dutWrapper_dut_hdmiTpg_dePixelCountMaximum = 12'hAAA;
    dutWrapper_dut_hdmiTpg_dePixelCountMinimum = 12'hAAA;
    dutWrapper_dut_hdmiTpg_evenOddPixelReg = 1'h0;
    dutWrapper_dut_hdmiTpg_hsyncWidth = 12'hAAA;
    dutWrapper_dut_hdmiTpg_lineCount = 11'h2AA;
    dutWrapper_dut_hdmiTpg_lineMidpoint = 11'h2AA;
    dutWrapper_dut_hdmiTpg_numberOfLines = 11'h2AA;
    dutWrapper_dut_hdmiTpg_numberOfPixels = 12'hAAA;
    dutWrapper_dut_hdmiTpg_patternReg0 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs_1 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs_2 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_patternRegs_3 = 32'hAAAAAAAA;
    dutWrapper_dut_hdmiTpg_pixelCount = 12'hAAA;
    dutWrapper_dut_hdmiTpg_pixelMidpoint = 12'hAAA;
    dutWrapper_dut_hdmiTpg_rgb888StageReg = 39'h2AAAAAAAAA;
    dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled = 1'h0;
    dutWrapper_dut_hdmiTpg_testPatternEnabled = 1'h0;
    dutWrapper_dut_hdmiTpg_vsyncWidth = 11'h2AA;
    dutWrapper_dut_hdmiTpg_yuv422StageReg = 19'h2AAAA;
    dutWrapper_dut_hdmiTpg_yuv444IntermediatesStageReg =
	147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dutWrapper_dut_hdmiTpg_yuv444StageReg = 27'h2AAAAAA;
    dutWrapper_dut_linesReg = 11'h2AA;
    dutWrapper_dut_pixelsReg = 12'hAAA;
    dutWrapper_dut_segmentIndexReg = 8'hAA;
    dutWrapper_dut_segmentOffsetReg = 24'hAAAAAA;
    dutWrapper_dut_sendVsyncIndication = 1'h0;
    dutWrapper_dut_strideBytesReg = 14'h2AAA;
    dutWrapper_dut_vsyncPulseCountReg = 32'hAAAAAAAA;
    dutWrapper_dut_waitingForVsync = 1'h0;
    dutWrapper_junkReqReg = 32'hAAAAAAAA;
    dutWrapper_requestFired = 32'hAAAAAAAA;
    dutWrapper_requestTimeLimitReg = 16'hAAAA;
    dutWrapper_requestTimerReg = 16'hAAAA;
    dutWrapper_responseFired = 32'hAAAAAAAA;
    dutWrapper_responseTimeLimitReg = 16'hAAAA;
    dutWrapper_responseTimerReg = 16'hAAAA;
    getWordCount = 32'hAAAAAAAA;
    interruptCleared = 1'h0;
    interruptEnableReg = 32'hAAAAAAAA;
    interrupted = 1'h0;
    overflowCount = 32'hAAAAAAAA;
    putWordCount = 32'hAAAAAAAA;
    requestFifo_buff = 36'hAAAAAAAAA;
    requestFifo_count = 32'hAAAAAAAA;
    requestFifo_fifo_rCache = 42'h2AAAAAAAAAA;
    requestFifo_fifo_rRdPtr = 5'h0A;
    requestFifo_fifo_rWrPtr = 5'h0A;
    responseFifo_count = 32'hAAAAAAAA;
    underflowCount = 32'hAAAAAAAA;
    word0Put = 32'hAAAAAAAA;
    word1Put = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_handleaddTranslationEntryrequest)
	$display("setSgEntry startingOffset %d address %d length %h limitOffset %h",
		 dutWrapper_dut_segmentOffsetReg,
		 requestFifo_fifo_wDataOut$wget[31:12],
		 length__h11939,
		 dutWrapper_dut_segmentOffsetReg + { length__h11939, 4'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_vsync)
	$display("vsync pulse received %h",
		 dutWrapper_dut_frameBufferEnabled);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_vsync &&
	  dutWrapper_dut_frameBufferEnabled)
	$display("frame started");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_frameBuffer_nextent)
	$display("nextent readAddrReg %h segmentLimitReg %h",
		 dutWrapper_dut_frameBuffer_readAddrReg,
		 dutWrapper_dut_frameBuffer_segmentLimitReg);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_hsync &&
	  dutWrapper_dut_frameBuffer_runningReg)
	$display("startLine readAddr %h readLimit %h stridebytes %h",
		 lineAddr__h9117,
		 readLimit__h9118,
		 dutWrapper_dut_frameBuffer_fbc[13:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_frameBuffer_startFrameRule)
	$display("startFrame address %h startingOffset %h segmentOffset %h readLimit %h",
		 { dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[39:20],
		   12'd0 },
		 dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[87:64],
		 segmentOffset__h3656,
		 dutWrapper_dut_frameBuffer_sglist_syncBRAMBVI$DOB[87:64] +
		 y__h3760);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest)
	$display("startFrameBuffer %h", requestFifo_fifo_wDataOut$wget[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_handlestartFrameBufferrequest)
	$display("startFrameBuffer lines %d pixels %d bytesperpixel %d stridebytes %d",
		 dutWrapper_dut_linesReg,
		 dutWrapper_dut_pixelsReg,
		 $signed(32'd4),
		 dutWrapper_dut_strideBytesReg);
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_hdmi_ref_clk)
  begin
    #0;
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (dutWrapper_dut_vsyncPulse$sRDY &&
	  dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("vsync pulse sent");
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_data &&
	  dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("testPatternEnabled %d",
		 dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled);
    if (dutWrapper_dut_hdmi_reset$OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dutWrapper_dut_hdmiTpg_fbRule &&
	  dutWrapper_dut_hdmiTpg_lineCount == 11'd0 &&
	  dutWrapper_dut_hdmiTpg_pixelCount == 12'd0)
	$display("testPatternEnabled %d",
		 dutWrapper_dut_hdmiTpg_shadowTestPatternEnabled);
  end
  // synopsys translate_on
endmodule  // mkIpSlaveWithMaster

